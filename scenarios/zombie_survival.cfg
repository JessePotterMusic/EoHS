#textdomain wesnoth-multiplayer


[multiplayer]
    id=EoHS_zombie_survival
    name= _ "EoHS — 1-4p — Kill Literally 1000 Zombies"
    description= _ "You must kill literally 1000 zombies. Playable with any era.

This map uses the EoHS swarm AI to avoid AI turns taking forever. Despite a lot of optimizations, it may still be useful for the host to have a good computer."

    
    map_data="{~/add-ons/Era_of_High_Sorcery/maps/zombie_survival.map}"

    {DEFAULT_SCHEDULE}
    {DEFAULT_MUSIC_PLAYLIST}
    
    {EOHS_EVENTS () ("") (<<
EoHS.zombie_survival_spawn_rows = 6
-- avoid camping on the spawn hexes, so that the zombies can all spawn promptly.
EoHS.adjust_swarm_move_priority (function (unit, wesnoth_unit, dst_x, dst_y)
  if unit.side == 5 then
    if wesnoth.get_village_owner (dst_x, dst_y) == 5 and EoHS.get_variable ("zombie_survival_adepts") and not EoHS.get_variable ("zombie_survival_charging_"..dst_x.."_"..dst_y) then
      return -1200
    end
    if EoHS.get_variable ("zombie_survival_spawns_left") > 0 then
      if dst_y <= EoHS.zombie_survival_spawn_rows then
        return dst_y - 1000
      end
    else
      return EoHS.zombie_survival_hex_values[dst_x.."_"..dst_y]
    end
  end
end)
-- plan out the northernmost zombie movement choices first, so that they don't
-- have to displace lots of other zombies to be able to leave the spawn area.
EoHS.transform_swarm_lists (function (list)
  if wesnoth.current.side == 5 and EoHS.get_variable ("zombie_survival_spawns_left") > 0 then
    table.sort (list, function (first, second)
      local x1, y1 = EoHS.consistent_coordinates (first.x, first.y)
      local x2, y2 = EoHS.consistent_coordinates (second.x, second.y)
      return y1 < y2
    end)
  end
end)
>>)}

    [side]
        side=1
        canrecruit=yes
        controller=human
        gold=150
        fog=no
        team_name=humans
    [/side]
    [side]
        side=2
        canrecruit=yes
        controller=human
        gold=150
        fog=no
        team_name=humans
    [/side]
    [side]
        side=3
        canrecruit=yes
        controller=human
        gold=150
        fog=no
        team_name=humans
    [/side]
    [side]
        side=4
        canrecruit=yes
        controller=human
        gold=150
        fog=no
        team_name=humans
    [/side]
    [side]
        side=5
        canrecruit=yes
        controller=ai
        allow_player=no
        disallow_observers=yes
        team_name=zombies
        type=Ancient Lich
    [/side]
    
    [event]
      name=start
      first_time_only=no
      [lua]
        code=<<--zomb surv start
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.begin_event (true, true, true)

EoHS.set_variable ("zombie_survival_spawns_left", 1000)
EoHS.set_side_variable (5, "AI_does_not_need_accommodations", true)
EoHS.set_side_variable (5, "swarms_only", true)

local choice = helper.get_user_choice ({speaker = "narrator", message =_"How would you like to play?"}, {"For the meme: Just literally 1000 zombies.", "For the challenge: Zombie-controlled villages also spawn Dark Adepts every other turn."})

if choice == 2 then
  EoHS.set_variable ("zombie_survival_adepts", true)
end

EoHS.end_event()
        >>
      [/lua]
    [/event]
    
    [event]
      name=side 1 turn refresh
      first_time_only=no
      [lua]
        code=<<--zomb surv turn
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.begin_event (true, true, true)

local width, height = wesnoth.get_map_size()

local spawn_locations = {}
local number_found = 0
for something = EoHS.zombie_survival_spawn_rows, 1, -1 do
  for start = 2,1,-1 do
    if number_found >= EoHS.get_variable ("zombie_survival_spawns_left") then break end
    local possibilities = {}
    for whatever = start, width, 2 do
      if EoHS.location_is_passable (whatever, something) and not wesnoth.get_unit (whatever, something) then
        table.insert (possibilities, {x= whatever, y=something})
      end
    end
    EoHS.shuffle (possibilities)
    number_found = number_found + #possibilities
    for dummy, possibility in ipairs (possibilities) do
      table.insert (spawn_locations, possibility)
    end
  end
end

local chosen_hexes = {}
for index, location in ipairs (spawn_locations) do
  if EoHS.get_variable ("zombie_survival_spawns_left") > 0 then
    chosen_hexes [location.x..","..location.y] = true
    EoHS.set_variable ("zombie_survival_spawns_left", EoHS.get_variable ("zombie_survival_spawns_left") - 1)
  end
end

local increment = 9
for start = 1, width, increment do
  local hexes = {}
  for whatever = start, start + increment - 1 do
    for something = 1, 6 do
      if chosen_hexes [whatever..","..something] then
        table.insert (hexes, {x = whatever,y = something})
      end
    end
  end
  EoHS.summon_swarm_zombies ({side = 5}, hexes)
end

if EoHS.get_variable ("zombie_survival_adepts") then
  for x=0,width+1 do for y=0,height+1 do
    if wesnoth.get_village_owner(x, y) == 5 and not wesnoth.get_unit (x, y) then
      local charging = EoHS.get_variable ("zombie_survival_charging_"..x.."_"..y)
      if not charging then
        EoHS.summon_swarm_zombies ({side = 5}, {{x=x,y=y,unit_table_override = {
          type="Dark Adept",
          {"modifications", {
            {"trait", {
              name =_"frail",
              description =_"no zone of control,",
              {"effect", {
                apply_to = "hitpoints",
                increase_total = "-40%",
              }},
              {"effect", {
                apply_to = "zoc",
                value = false,
              }},
            }},
          }},
          {"variables", {
            EoHS_is_reanimated=true,
          }},
        }}})
      end
      EoHS.set_variable ("zombie_survival_charging_"..x.."_"..y, not charging)
    end
  end end
end

EoHS.end_event()
        >>
      [/lua]
    [/event]
    
    [event]
      name=side 5 turn refresh
      first_time_only=no
      [lua]
        code=<<--zomb surv turn5
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.begin_event (true, true, true)

local width, height = wesnoth.get_map_size()

EoHS.zombie_survival_hex_values = {}
local player_units = EoHS.get_units ({side = "1,2,3,4"})

for x=0,width+1 do for y=0,height+1 do
  local value = 0
  for dummy, unit in ipairs (player_units) do
    -- we are allowed to do this division because the values will only be used inside synchronize_choice
    value = value + 1/EoHS.distance_between (x, y, unit.x, unit.y)
  end
  EoHS.zombie_survival_hex_values[x.."_"..y] = value
end end

EoHS.end_event()
        >>
      [/lua]
    [/event]
      

      
    [event]
      name=die
      first_time_only=no
      [lua]
        code=<<--zomb surv die
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.begin_event (true, true, false)

if not wesnoth.eval_conditional({
      {"have_unit",{ side=5, canrecruit=false }}
    }) then
  wesnoth.fire ("kill", {side = 5, canrecruit = true})
end

EoHS.end_event()
        >>
      [/lua]
    [/event]
[/multiplayer]

{EOHS_LUA_FILE (<<-- training.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

--[[
summon_

energy_blast
mage_shield
wizard_sword

corridor_of_frost
summon_arctic_drake
dispelling_touch

fireball
group_teleport
summon_sea_serpent

aberrant_growth
circle_of_protection
haste

disenchant_area
dumbfound
disintegrate

summon_fire_dragon
meteor_storm
create_portal




summon_wolf
grow_vegetation
mount_dismount

mud_touch
summon_wose
regeneration

dehydration
downpour
summon_water_serpent

lightning_bolt
rampage
summon_gryphon

fissure
summon_yeti
blizzard

monsters_nest???
hurricane




curse_of_anxiety
summon_vampire_bat - absorb_bat
life_drain

poison_ground
summon_ghost
summon_skeleton

reanimating_touch
summon_chocobone
dark_pact

devour_soul
wraithform
zombie_attack

summon_skeletal_dragon
renounce_life / curse_life_once_more

zombie_mastery



volcano

summon_chimera

unused units, unintentional:
  Elvish Lady,Elder Mage,Royal Warrior,Troll Hero,Ancient Lich
  boats,
  Mermaid Initiate,
  Cuttle Fish,Giant Rat,Giant Scorpion,Tentacle of the Deep,
  Fire Guardian,
unused units, intentional:
  Giant Spider,
  drakes(burner+Armageddon,clasher,glider)]]


EoHS.skills = {
  realms = {
    {
      id = "evocation",
      names = {
        realm = _"Evocation",
        skill = _"Evocation skill",
        --practitioner = _"Evoker",
      },
    },
    {
      id = "nature_magic",
      names = {
        realm = _"Nature magic",
        skill = _"Nature magic skill",
      },
    },
    {
      id = "necromancy",
      names = {
        realm = _"Necromancy",
        skill = _"Necromancy skill",
      },
    },
  },
  perks = {
    { id="archmage", name=_"Archmage", cost=2 },
    { id="superb_summoner", name=_"Superb Summoner", cost=2 },
    { id="enchanter", name=_"Enchanter", cost=1 },
    { id="farseer", name=_"Farseer", cost=1 },
  }
}

EoHS.unit_can_train = function(unit)
  return EoHS.get_unit_variable(unit, "is_wizard")
end

EoHS.init_skillset = function(skillset)
  for i,realm in ipairs(EoHS.skills.realms) do
    skillset[realm.id] = skillset[realm.id] or 0
  end
  for i,perk in ipairs(EoHS.skills.perks) do
    skillset[perk.id] = skillset[perk.id] or false
  end
end

EoHS.skillset_points_spent = function(skillset)
  local result = 0
  for i,realm in ipairs(EoHS.skills.realms) do
    result = result + skillset[realm.id]
  end
  for i,perk in ipairs(EoHS.skills.perks) do
    if skillset[perk.id] then result = result + perk.cost end
  end
  return result
end

EoHS.get_unit_skillset = function(unit)
  return EoHS.get_unit_variable(unit, "skillset")
end
EoHS.get_unit_skill = function(unit, name)
  return EoHS.get_unit_variable(unit, "skillset."..name)
end

EoHS.set_unit_skillset = function(unit, skillset)
  EoHS.set_unit_variable(unit, "skillset", skillset)
  EoHS.update_all_type_adjustments(unit)
end

EoHS.unit_total_skill_points = function(unit)
  return EoHS.get_wizard_setting(unit, "skill_points_at_level_0") + EoHS.get_wizard_setting(unit, "skill_points_per_level") * unit.level
end
EoHS.unit_skill_points_left = function(unit)
  return EoHS.unit_total_skill_points(unit) - EoHS.skillset_points_spent(EoHS.get_unit_skillset(unit))
end

EoHS.training_dialog_grid = function(dialog_context, skillset, old_skillset, total_points)
  local num_realm_entries = math.max(0, total_points - EoHS.skillset_points_spent(old_skillset)) + 1

  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local l = function(text) return { "label", { label = text } } end
  local t = function(id) return { "text_box", { id = id } } end
  
  local update_total_points = function()
    wesnoth.set_dialog_value(total_points, "total_points_box")
    wesnoth.set_dialog_value(total_points - EoHS.skillset_points_spent(skillset), "points_remaining_box")
  end

  local total_points_grid = g{r{c{l(_"Total skill points:")}, c{t("total_points_box")}}}
  local points_remaining_grid = g{r{c{l(_"Skill points remaining:")}, c{t("points_remaining_box")}}}
  local summary_grid = g{r{c{total_points_grid}, c{points_remaining_grid}}}
  local realms_cols = {}
  for dummy,realm_ in ipairs(EoHS.skills.realms) do
    local realm = realm_
    local realm_rows = {
      r{c{l(realm.names.skill)}}
    }
    
    local set_level = function(level)
      for i=1,num_realm_entries+old_skillset[realm.id] do
        local level2 = i - 1
        local id = realm.id.."_level_"..level2
        wesnoth.set_dialog_value(level2 <= level, id)
      end
    end
    dialog_context.preshow(function() set_level(old_skillset[realm.id]) end)
    
    for i=1,num_realm_entries+old_skillset[realm.id] do
      local level = i - 1
      local id = realm.id.."_level_"..level
      table.insert(realm_rows, r{c{ {"toggle_button",{id=id,label=EoHS.substitute(_"Level $1|: ",{level})}} }})
      dialog_context.preshow(function()
        if level < old_skillset[realm.id] then wesnoth.set_dialog_active(false, id) end
        wesnoth.set_dialog_callback(function()
          skillset[realm.id] = level
          update_total_points()
          set_level(level)
        end, id)
      end)
    end
    table.insert(realms_cols, c{g(realm_rows)})
  end
  local realms_grid = g{r(realms_cols)}
  local num_perks = #EoHS.skills.perks
  local num_perks_cols = 3
  local perks_rows = {}
  for i,perk in ipairs(EoHS.skills.perks) do
    if (not perks_rows[1]) or (#perks_rows[#perks_rows][2] == num_perks_cols) then
      table.insert(perks_rows, r{})
    end
    table.insert(perks_rows[#perks_rows][2], c{ {"toggle_button",{id=perk.id.."_toggle",label=perk.name}} })
  end
  while #perks_rows[#perks_rows][2] < num_perks_cols do
    table.insert(perks_rows[#perks_rows][2], c{ {"spacer",{}} })
  end
  local perks_grid = g(perks_rows)
  
  local perk_update = function(perk)
    return function()
      skillset[perk.id] = wesnoth.get_dialog_value(perk.id.."_toggle")
      update_total_points()
    end
  end
  
  --[[dialog_context.set_total_skill_points = function(points)
    total_points = points
    update_total_points()
  end]]
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_active(false, "total_points_box")
    wesnoth.set_dialog_active(false, "points_remaining_box")
    for i,perk in ipairs(EoHS.skills.perks) do
      wesnoth.set_dialog_callback(perk_update(perk), perk.id.."_toggle")
      wesnoth.set_dialog_value(skillset[perk.id], perk.id.."_toggle")
      wesnoth.set_dialog_active(not skillset[perk.id], perk.id.."_toggle")
    end
    update_total_points()
  end)

  return g{
    r{c{summary_grid}},
    r{c{g{r{c{realms_grid},c{perks_grid}}}}},
  }
end

>>)}

{EOHS_LUA_FILE (<<-- training.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.skills = {
  realms = {
    {
      id = "evocation",
      names = {
        realm = _"Evocation",
        skill = _"Evocation skill",
        --practitioner = _"Evoker",
      },
    },
    {
      id = "nature_magic",
      names = {
        realm = _"Nature magic",
        skill = _"Nature magic skill",
      },
    },
    {
      id = "necromancy",
      names = {
        realm = _"Necromancy",
        skill = _"Necromancy skill",
      },
    },
  },
  perks = {
    { id="archmage", name=_"Archmage", cost=2 },
    { id="superb_summoner", name=_"Superb Summoner", cost=2 },
    { id="enchanter", name=_"Enchanter", cost=1 },
    { id="farseer", name=_"Farseer", cost=1 },
  }
}

EoHS.null_skillset = {}
for i,realm in ipairs(EoHS.skills.realms) do
  EoHS.null_skillset[realm.id] = 0
end
for i,perk in ipairs(EoHS.skills.perks) do
  EoHS.null_skillset[perk.id] = false
end

EoHS.skillset_points_spent = function(skillset)
  local result = 0
  for i,realm in ipairs(EoHS.skills.realms) do
    result = result + skillset[realm.id]
  end
  for i,perk in ipairs(EoHS.skills.perks) do
    if skillset[perk.id] then result = result + perk.cost end
  end
  return result
end

EoHS.training_dialog_grid = function(dialog_context, skillset, total_points)
  local old_skillset = EoHS.deep_copy(skillset)

  local g = function(contents)
    return { "grid", contents }
  end
  local r = function(contents)
    return { "row", contents }
  end
  local c = function(contents)
    return { "column", contents }
  end
  local l = function(text)
    return { "label", { label = text } }
  end
  local t = function(id)
    return { "text_box", { id = id } }
  end

  local total_points_grid = g{r{c{l("Total skill points:")}, c{t("total_points_box")}}}
  local points_remaining_grid = g{r{c{l("Skill points remaining:")}, c{t("points_remaining_box")}}}
  local summary_grid = g{r{c{total_points_grid}, c{points_remaining}}}
  local realms_rows = {}
  for i,realm in ipairs(EoHS.skills.realms) do
    table.insert(realms_rows, r{c{l(realm.names.skill)}, c{t(realm.id.."_skill_box")}})
  end
  local realms_grid = g(realms_rows)
  local num_perks = #EoHS.skills.perks
  local num_perks_cols = 3
  local perks_rows = {}
  for i,perk in ipairs(EoHS.skills.perks) do
    if #perks_rows[#perks_rows][2] = num_perks_cols then
      table.insert(perks_rows, r{})
    end
    table.insert(perks_rows[#perks_rows][2], c{ {"toggle_button",{id=perk[id].."_toggle",label=perk[name]}} })
  end
  local perks_grid = g(perks_rows)
  
  local update_total_points = function()
    wesnoth.set_dialog_value("total_points_box", total_points)
    wesnoth.set_dialog_value("points_remaining_box", total_points - EoHS.skillset_points_spent(skillset))
  end
  
  local realm_update = function(realm)
    return function()
      local n = tonumber(get_dialog_value(realm.id.."_skill_box"))
      if n == nil then n = 0 end
      n = math.max(math.floor(n), old_skillset[realm.id])
      skillset[realm.id] = n
      wesnoth.set_dialog_value(n, realm.id.."_skill_box")
      update_total_points()
    end
  end
  
  dialog_context.set_total_skill_points = function(points)
    total_points = points
    update_total_points()
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_active(false, "total_points_box")
    wesnoth.set_dialog_active(false, "points_remaining_box")
    for i,realm in ipairs(EoHS.skills.realms) do
      wesnoth.set_dialog_callback(realm_update(realm), realm.id.."_skill_box")
      realm_update(realm)()
    end
    for i,perk in ipairs(EoHS.skills.perks) do
      wesnoth.set_dialog_callback(update_total_points, perk[id].."_toggle")
      wesnoth.set_dialog_value(skillset[perk.id], perk[id].."_toggle")
      wesnoth.set_dialog_active(not skillset[perk.id], perk[id].."_toggle")
    end
    update_total_points()
  end)

  return g{
    r{c{summary_grid}},
    r{c{realms_grid}},
    r{c{perks_grid}},
  }
end

>>)}

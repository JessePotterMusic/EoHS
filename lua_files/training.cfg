{EOHS_LUA_FILE (<<-- training.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

--[[
summon_





volcano

summon_chimera

unused units, unintentional:
  Elder Mage,Royal Warrior,Troll Hero,Ancient Lich
  boats,
  Cuttle Fish,Giant Rat,Giant Scorpion,Tentacle of the Deep,
  Fire Guardian,
unused units, intentional:
  Giant Spider (not worth triggering people's arachnophobia),
  drakes(burner+Armageddon,clasher,glider) (I don't like 'em)]]


EoHS.skills = {
  realms = {
    {
      id = "evocation",
      names = {
        realm = _"Evocation",
        skill = _"Evocation skill",
        --practitioner = _"Evoker",
      },
      spells = {
        { "energy_blast", "wizard_sword", "mage_shield", },
        { "corridor_of_frost", "summon_arctic_drake", "dispelling_touch", },
        { "fireball", "group_teleport", "summon_sea_serpent", },
        { "aberrant_growth", "circle_of_protection", "haste", },
        { "obliterate", "disenchant_area", "guardian_aegis" },
        { "summon_fire_dragon", "create_portal", "meteor_storm", },
      },
    },
    {
      id = "nature_magic",
      names = {
        realm = _"Nature magic",
        skill = _"Nature magic skill",
      },
      spells = {
        { "summon_wolf", "change_terrain", "mud_touch", },
        { "summon_wose", "regeneration", "mount_dismount", },
        { "summon_water_serpent", "...", "dehydration", },
        { "summon_gryphon", "lightning_bolt", "rampage", },
        { "summon_yeti", "blizzard", "restoration", },
        { "swarm_nest", "hurricane", "fissure", },
      },
    },
    {
      id = "necromancy",
      names = {
        realm = _"Necromancy",
        skill = _"Necromancy skill",
      },
      spells = {
        { "curse_of_anxiety", "life_drain", "summon_vampire_bat", },
        { "poison_ground", "summon_ghost", "summon_skeleton", },
        { "dark_pact", "wraithform", "summon_chocobone", },
        { "zombie_attack", "reanimating_touch", "devour_soul", },
        { "summon_skeletal_dragon", "renounce_life", "dumbfound", },
        { "zombie_mastery", "create_abomination", "invincible_soldiers" },
      },
    },
  },
  talents = {
    { id="efficiency", name=_"Expert", description=_"Your spells cost 80% as much mana/gold." },
    { id="summoner", name=_"Summoner", description=_"Your summoning spells cost 60% as much AP, rounded up." },
    { id="enchanter", name=_"Enchanter", description=_"Your enchantment spells cost 60% as much AP, rounded up." },
    { id="farseer", name=_"Farseer", description=_"The range of your spells is doubled." },
    { id="archmage", name=_"Archmage", description=_"You get +40% fire/cold/arcane resistance, and you can train apprentices." },
  },
  alliances = {
    { id="military_commander", name=_"Human military"    , description=_"You can recruit from the Loyalist faction, except Mages, plus Sergeants.\nYou gain Leadership and become Lawful." },
    { id="rascally_friends"  , name=_"Motley crew"       , description=_"You can recruit outlaws, including Ruffians.\nYou gain Skirmisher." },
    { id="elvish_alliance"   , name=_"Elf-friend"        , description=_"You can recruit Elves and merfolk Hunters and Initiates.\nYou get 70% defense/1 move in forest.\nYou gain heals +4, increasing at level 3 to cures,heals +8." },
    { id="dwarvish_alliance" , name=_"Dwarvish alliance" , description=_"You can recruit Dwarves, and Gryphon Riders if you can summon Gryphons.\nYou get +20% physical resistances" },
    { id="orcish_mercenaries", name=_"Orcish mercenaries", description=_"You can recruit from the Northerners faction.\nYou get +2 melee damage/+1 ranged damage." },
    { id="traveler"          , name=_"Traveler"          , description=_"You can recruit Saurians, Peasants, and Woodsmen.\nYou get +1 move and improved terrain movement and defenses." },
    { id="petty_necromancer" , name=_"Petty necromancy"  , description=_"You can recruit from the Undead faction, except for Ghosts.\nYou become Chaotic and you gain plague on your staff." },
  },
  perks = {},
}
for i,talent in ipairs(EoHS.skills.talents) do
  table.insert(EoHS.skills.perks, talent)
end
for i,alliance in ipairs(EoHS.skills.alliances) do
  table.insert(EoHS.skills.perks, alliance)
end

EoHS.unit_can_train = function(unit)
  return EoHS.get_unit_variable(unit, "is_wizard")
end

EoHS.init_skillset = function(skillset)
  for i,realm in ipairs(EoHS.skills.realms) do
    skillset[realm.id] = skillset[realm.id] or 0
  end
  for i,perk in ipairs(EoHS.skills.perks) do
    skillset[perk.id] = skillset[perk.id] or false
  end
end

EoHS.skillset_realm_rank = function(skillset, realm_id)
  local max_rank = 0
  for dummy,realm in ipairs(EoHS.skills.realms) do
    if realm.id == realm_id then
      for i,rank in ipairs(realm.spells) do
        for j,spell_id in ipairs(rank) do
          if skillset[spell_id] then max_rank = i end
        end
      end
    end
  end
  return max_rank
end

EoHS.spells_known_from_skillset = function(skillset)
  local result = {}
  for dummy,realm in ipairs(EoHS.skills.realms) do
    for i,rank in ipairs(realm.spells) do
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] and EoHS.actions[spell_id] then table.insert(result,spell_id) end
      end
    end
  end
  return result
end

EoHS.skillset_points_spent = function(skillset)
  local result = 0
  for dummy,realm in ipairs(EoHS.skills.realms) do
    local earlier_rank_payment_deficiencies = 0
    for i,rank in ipairs(realm.spells) do
      local rank_payment = 0
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] then
          result = result + earlier_rank_payment_deficiencies
          earlier_rank_payment_deficiencies = 0
          result = result + 1
          rank_payment = rank_payment + 1
        end
      end
      if rank_payment < 3 then
        earlier_rank_payment_deficiencies = earlier_rank_payment_deficiencies + 3 - rank_payment
      end
    end
  end
  local talents = 0
  for i,talent in ipairs(EoHS.skills.talents) do
    if skillset[talent.id] then
      talents = talents + 1
      result = result + talents
    end
  end
  local alliances = 0
  for i,alliance in ipairs(EoHS.skills.alliances) do
    if skillset[alliance.id] then
      result = result + alliances
      alliances = alliances + 1
    end
  end
  local living_alliances = alliances
  local has_necro_spell = (EoHS.skillset_realm_rank(skillset, "necromancy") >= 1)
  if skillset.petty_necromancer then
    living_alliances = living_alliances - 1
    if not has_necro_spell then result = result + 1 end
  end
  if living_alliances > 0 then
    if has_necro_spell then result = result + 1 end
  end
  
  return result
end

EoHS.get_unit_skillset = function(unit)
  return EoHS.get_unit_variable(unit, "skillset")
end
EoHS.get_unit_skill = function(unit, name)
  return EoHS.get_unit_variable(unit, "skillset."..name)
end

EoHS.set_unit_skillset = function(unit, skillset)
  EoHS.set_unit_variable(unit, "skillset", skillset)
  EoHS.update_all_type_adjustments(unit)
end

EoHS.unit_total_skill_points = function(unit)
  return EoHS.get_wizard_setting(unit, "skill_points_at_level_0") + EoHS.get_wizard_setting(unit, "skill_points_per_level") * unit.level
end
EoHS.unit_skill_points_left = function(unit)
  return EoHS.unit_total_skill_points(unit) - EoHS.skillset_points_spent(EoHS.get_unit_skillset(unit))
end

EoHS.choose_alliance_for_ai = function(unit)
  local skillset = EoHS.get_unit_skillset(unit)
  for i,alliance in ipairs(EoHS.skills.alliances) do
    if skillset[alliance.id] then
      return false
    end
  end
  skillset[EoHS.random("military_commander,rascally_friends,elvish_alliance,dwarvish_alliance,orcish_mercenaries,petty_necromancer")] = true
  EoHS.update_all_type_adjustments(unit)
  return true
end

local choose_one_random_skill = function(skillset, skill_points_limit)
  local choices = {}
  local has_spells = {}
  for z,realm in ipairs(EoHS.skills.realms) do
    for j,spell_id in ipairs(realm.spells[1]) do
      if skillset[spell_id] then
        has_spells[realm.id] = true
        has_spells.at_all = true
      end
    end
  end
  for z,realm in ipairs(EoHS.skills.realms) do
    for i,rank in ipairs(realm.spells) do
      local rank_spells = 0
      local unbought_spells = 0
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] then
          rank_spells = rank_spells + 1
        else
          unbought_spells = unbought_spells + 1
        end
      end
      local weight
      if not has_spells.at_all then weight = 10000000 -- Pick a spell already!
      elseif not has_spells[realm.id] then weight = 250 -- not likely to branch into another realm
      elseif rank_spells >= 3 then weight = 100 -- even less likely to take spells that no longer contribute towards higher ranks
      else weight = math.ceil(100000/unbought_spells) end -- A new spell at the forefront of a realm we already have: Good.
                                                          -- And have the same probability of taking one regardless of how many there are.
      for j,spell_id in ipairs(rank) do if not skillset[spell_id] then
        table.insert(choices, { skill = spell_id, weight = weight, realm = realm.id })
      end end
      if rank_spells < 3 then
        -- We can't buy spells above this rank
        break
      end
    end
  end
  local talents = 0
  for i,talent in ipairs(EoHS.skills.talents) do if skillset[talent.id] then
    talents = talents + 1
  end  end
  for i,talent in ipairs(EoHS.skills.talents) do if not skillset[talent.id] then
    table.insert(choices, { skill = talent.id, weight = math.ceil(4000 / math.max(1,talents*2)) })
  end end
  local alliances = 0
  for i,alliance in ipairs(EoHS.skills.alliances) do if skillset[alliance.id] then
    alliances = alliances + 1
  end end
  for i,alliance in ipairs(EoHS.skills.alliances) do if not skillset[alliance.id] then
    table.insert(choices, { skill = alliance.id, weight = math.ceil(4000 / (1+(alliances*alliances*20))), living_alliance = (alliance.id ~= "petty_necromancer") })
  end end
  local living_alliances = alliances
  if skillset.petty_necromancer then
    living_alliances = living_alliances - 1
  end
  
  local filtered_choices = {}
  local weight_total = 0
  for i,choice in ipairs(choices) do
    local can_pick = true
    if skill_points_limit then
      local next_skillset = EoHS.deep_copy(skillset)
      next_skillset[choice.skill] = true
      if EoHS.skillset_points_spent(next_skillset) > skill_points_limit then
        can_pick = false
      end
    end
    if can_pick then
      if has_spells.necromancy and choice.living_alliance then choice.weight = math.ceil(choice.weight / 20) end
      if (choice.realm == "necromancy") and (not has_spells.necromancy) and (living_alliances > 0) then choice.weight = math.ceil(choice.weight / 10) end
      if (not has_spells.necromancy) and (choice.skill == "petty_necromancer") then choice.weight = math.ceil(choice.weight / 5) end
      table.insert(filtered_choices, choice)
      weight_total = weight_total + choice.weight
    end
  end
  
  if not filtered_choices[1] then return false end
  local pick = math.random(1,weight_total)
  for i,choice in ipairs(filtered_choices) do
    pick = pick - choice.weight
    if pick <= 0 then
      skillset[choice.skill] = true
      return true
    end
  end
  return false
end

EoHS.training_dialog_grid = function(dialog_context, unit, old_skillset, variant)
  --local num_realm_entries = math.max(0, total_points - EoHS.skillset_points_spent(old_skillset)) + 1
  local total_points = EoHS.unit_total_skill_points(unit)
  local skillset = EoHS.get_unit_skillset(unit)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local l = function(text) return { "label", { definition = "default_small", label = text } } end
  local title = function(text) return { "label", { label = text, definition = "title" } } end
  local t = function(id) return { "text_box", { id = id } } end
  
  local can_possibly_afford = function(skill)
    local next_skillset = EoHS.deep_copy(old_skillset)
    next_skillset[skill] = true
    if EoHS.skillset_points_spent(next_skillset) > total_points then
      return false
    end
    return true
  end
  
  local skill_points_remaining_string = _"Skill points remaining:"
  local update_total_points = function()
    local remaining_points = total_points - EoHS.skillset_points_spent(skillset)
    wesnoth.set_dialog_value(""..(total_points - EoHS.skillset_points_spent(old_skillset)), "total_points_box")
    --wesnoth.set_dialog_active(remaining_points >= 0, "ok")
    wesnoth.set_dialog_value(""..remaining_points, "points_remaining_box")
    -- I don't at all understand this dance of resetting and concatenating values,
    -- but if I remove any part of it, the result is visible incorrect behavior...
    wesnoth.set_dialog_value(skill_points_remaining_string..remaining_points, "points_remaining_label")
    wesnoth.set_dialog_value(skill_points_remaining_string, "points_remaining_label")
    wesnoth.set_dialog_canvas(1, { {"text",{
      x = "0", y = "0", w = "(text_width)", h = "(text_height)",
      font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__LARGE,
      color = EoHS.validity_color((remaining_points >= 0) and "valid" or "impossible"),
      text = skill_points_remaining_string.."",
    }} }, "points_remaining_label")
    wesnoth.set_dialog_canvas(1, { {"text",{
      x = "0", y = "0", w = "(text_width)", h = "(text_height)",
      font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__LARGE,
      color = EoHS.validity_color((remaining_points >= 0) and "valid" or "impossible"),
      text = ""..remaining_points,
    }} }, "points_remaining_box")
  end

  local summary_grid = g{
    r{
      c{ horizontal_alignment="right", { "label", { definition = "default_large", label = _"Skill points to spend:"}}},
      c{ horizontal_grow=true, border="left", border_size=8, grow_factor=2, { "label", { definition = "default_large", id = "total_points_box" } }}
    },
    r{
      c{ horizontal_alignment="right", { "label", { definition = "default_large", id = "points_remaining_label", label = skill_points_remaining_string}}},
      c{ horizontal_grow=true, border="left", border_size=8, { "label", { definition = "default_large", id = "points_remaining_box" } }}}
  }
  
  local realms_rows = {r{c{border="left,right", border_size=15, g{r{c{horizontal_alignment="left", title(_"Spells")}},r{c{border="all", border_size=5,
    l(_"Each spell costs one skill point.\nTo learn a spell, you must know three spells of each lower rank in the same realm.\n \nEach realm gives you a ranged attack and a resistance bonus,\nbased on the highest rank in which you have at least one spell,\nbut not more than your level.")}}}}}}
  
  dialog_context.add_top_level({"linked_group",{id = "realm_box", fixed_width = true}})
  local realms_cols = {}
  for dummy,realm_ in ipairs(EoHS.skills.realms) do
    local realm = realm_
    local realm_rows = {
      linked_group = "realm_box",
      r{c{title(realm.names.realm)}},
    }
    
    for i,rank in ipairs(realm.spells) do
      table.insert(realm_rows, r{c{ border="top", border_size=5, l(EoHS.substitute(_"Rank $1|",{i})) }})
      for j,spell_id in ipairs(rank) do
        local id = spell_id.."_toggle"
        local name = spell_id
        local description = spell_id
        if EoHS.actions[spell_id] then
          name = EoHS.actions[spell_id].name
          description = EoHS.actions[spell_id].description
        end
        table.insert(realm_rows, r{c{ horizontal_alignment="left", {"toggle_button",{id=id,label=name,tooltip=name.."\n\n"..description}} }})
  
        dialog_context.preshow(function()
          wesnoth.set_dialog_value(skillset[spell_id], id)
          wesnoth.set_dialog_active((not old_skillset[spell_id]) and can_possibly_afford(spell_id), id)
          wesnoth.set_dialog_callback(function()
            skillset[spell_id] = wesnoth.get_dialog_value(id)
            
            for i2,rank2 in ipairs(realm.spells) do
              for j2,spell_id2 in ipairs(rank2) do
                local id2 = spell_id2.."_toggle"
                if (i2 < i) and skillset[spell_id] then
                  skillset[spell_id2] = true
                  wesnoth.set_dialog_value(true, id2)
                end
                if (i2 > i) and not skillset[spell_id] then
                  skillset[spell_id2] = false
                  wesnoth.set_dialog_value(false, id2)
                end
              end
            end
            update_total_points()
          end, id)
        end)
      end
    end
    table.insert(realms_cols, c{border="all", border_size=9, vertical_alignment="top", g(realm_rows)})
  end
  table.insert(realms_rows, r{c{g{r(realms_cols)}}})
  local realms_grid = g(realms_rows) --{"scrollbar_panel",{{"definition",realms_rows}}}
  
  
  --[[local num_talents = #EoHS.skills.talents
  local num_talents_cols = 3
  local talents_rows = {}
  for i,talent in ipairs(EoHS.skills.talents) do
    if (not talents_rows[1]) or (#talents_rows[#talents_rows][2] == num_talents_cols) then
      table.insert(talents_rows, r{})
    end
    table.insert(talents_rows[#talents_rows][2], c{ {"toggle_button",{id=talent.id.."_toggle",label=talent.name}} })
  end
  while #talents_rows[#talents_rows][2] <1 num_talents_cols do
    table.insert(talents_rows[#talents_rows][2], c{ {"spacer",{}} })
  end
  local talents_grid = g(talents_rows)]]
  
  local perk_toggle = function(perk)
    return {"toggle_button",{id=perk.id.."_toggle",label=perk.name,tooltip=perk.name.."\n\n"..perk.description}}
  end
  
  local talents_rows = {r{c{horizontal_alignment="left", title(_"Talents")}},r{c{border="all", border_size=5, l(_"Buying a talent costs one point,\nplus one for each talent you already have.")}}}
  for i,talent in ipairs(EoHS.skills.talents) do
    table.insert(talents_rows, r{c{horizontal_alignment="left", perk_toggle(talent)}})
  end
  
  local alliances_rows = {r{c{horizontal_alignment="left", title(_"Alliances")}},r{c{border="all", border_size=5, l(_"Your first alliance is free. Later alliances cost\none point for each alliance you already have.\nYou pay one extra if you have a\nNecromancy spell and take a living alliance,\nor if you don't and take Petty Necromancy.")}}}
  for i,alliance in ipairs(EoHS.skills.alliances) do
    table.insert(alliances_rows, r{c{horizontal_alignment="left", perk_toggle(alliance)}})
  end
  
  local buttons_rows = {
    r{c{g{
      r{c{ dialog_context.button({label = _"Reset skills"}, function() EoHS.deep_overwrite(skillset, old_skillset) end) },
      c{ dialog_context.button({label = _"Random skills"}, function()
        EoHS.deep_overwrite(skillset, old_skillset)
        while choose_one_random_skill(skillset, total_points) do end
      end) }},
    }}},
    r{c{ dialog_context.button({label = _"Change appearance"}, function()
      if EoHS.show_dress_up_dialog(unit, EoHS.get_subtag(skillset, "dress_up_options")) then
        EoHS.update_unit_graphics(unit)
      end
    end) }},
    --r{c{ {"button",{label = _"Finish training", id="ok"}} }},
  }
  --[[if variant == "preselect" then
    table.insert(buttons_rows, r{c{
      l(_"Choices will be applied at\nthe beginning of your next turn.")
    }})
  end]]
  local buttons_grid = g(buttons_rows)
  
  local perks_grid = g{
    r{c{
      horizontal_grow=true, border="all", border_size=5, summary_grid
    }},
    r{c{
      border="all", border_size=5, buttons_grid
    }},
    r{c{
      horizontal_alignment="left", border="all", border_size=5, g(talents_rows)
    }},
    r{c{
      horizontal_alignment="left", border="all", border_size=5, g(alliances_rows)
    }},
  }
  
  local perk_update = function(perk)
    return function()
      skillset[perk.id] = wesnoth.get_dialog_value(perk.id.."_toggle")
      update_total_points()
    end
  end
  
  dialog_context.preshow(function()
    for i,perk in ipairs(EoHS.skills.perks) do
      wesnoth.set_dialog_callback(perk_update(perk), perk.id.."_toggle")
      wesnoth.set_dialog_value(skillset[perk.id], perk.id.."_toggle")
      wesnoth.set_dialog_active((not old_skillset[perk.id]) and can_possibly_afford(perk.id), perk.id.."_toggle")
    end
    update_total_points()
  end)

  return g{r{c{realms_grid},c{vertical_grow=true, perks_grid}}}
end

EoHS.local_player_can_preselect_skills = function(side)
  if wesnoth.sides[wesnoth.current.side].controller == "network" then
    local choice = EoHS.show_menu(true)
    
    local prepared_trainings = EoHS.get_variable("client_local_trainings")
    for i,instruction in ipairs(choice) do
      if instruction[1] == "training" then
        table.insert(prepared_trainings, instruction)
      end
    end
    EoHS.set_variable("client_local_trainings", prepared_trainings)
  end
end
--[[      local skillset = EoHS.get_unit_skillset(unit)
      if skillset and (EoHS.unit_total_skill_points(unit) > EoHS.skillset_points_spent(training_skillset)) then
        EoHS.give_alert()
        local training_skillset = EoHS.deep_copy(skillset)
          
        local finished = false
        while not finished do
          local d = EoHS.make_dialog_context(function()
            if EoHS.unit_total_skill_points(unit) >= EoHS.skillset_points_spent(training_skillset) then
              finished = true
              local prepared_trainings = EoHS.get_variable("client_local_trainings")
              table.insert(prepared_trainings, {"training",{ trainer_id = unit.underlying_id, {"skillset",training_skillset } }})
              EoHS.set_variable("client_local_trainings", prepared_trainings)
            end
          end, function()
            finished = true
          end)
          local g = function(contents) return { "grid", contents } end
          local r = function(contents) return { "row", contents } end
          local c = function(contents) return { "column", contents } end
          d.show(g{
            r{c{{"label",{definition="title", label=EoHS.substitute(_"Preselect skills for $1|",{unit.name})}}}},
            r{c{{"label",{label=(wesnoth.current.turn==1 and wesnoth.current.side==1) and _"The skills you choose will be applied at the beginning of your first turn." or _"The skills you choose will be applied at the beginning of your next turn."}}}},
            r{c{EoHS.training_dialog_grid(d, unit, training_skillset, "preselect")}},
          })
        end
      end
    end
  end)
end
]]
>>)}

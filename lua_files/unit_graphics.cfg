{EOHS_LUA_FILE (<<-- unit_graphics.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

--[[

A "unit_graphics" is a {
  underlays = image_aggregate,
  main_layer = image_layer,
  overlays = image_aggregate,
}

]]

do
  local wizard_casting_image_bases_table = {
    [      "Mage"] = {"units/human-magi/mage+female-attack-magic1.png"      , "units/human-magi/mage+female-attack-magic2.png"      },
    [  "Red Mage"] = {"units/human-magi/red-mage+female-attack-magic1.png"  , "units/human-magi/red-mage+female-attack-magic2.png"  },
    [ "Arch Mage"] = {"units/human-magi/arch-mage+female-attack-magic1.png" , "units/human-magi/arch-mage+female-attack-magic2.png" },
    ["Great Mage"] = {"units/human-magi/great-mage+female-attack-magic1.png", "units/human-magi/great-mage+female-attack-magic2.png"},
    [      "Lich"] = {"units/undead-necromancers/lich-magic-1.png", "units/undead-necromancers/lich-magic-3.png"},
  }
  EoHS.wizard_casting_image_base = function(unit, frame_number)
    local image_base = wizard_casting_frames_table[unit.type]
    if unit.gender ~= "female" then return string.gsub(image_base, "+female", "") end
    return image_base
  end
end

do
  local weapon_head_offsets_table = {
    ["units/undead-necromancers/lich.png"             ] = { x = 36-11, y = 36-22 },
    ["units/undead-necromancers/lich-magic-1.png"     ] = { x = 36-12, y = 36-25 },
    ["units/undead-necromancers/lich-magic-3.png"     ] = { x = 36-15, y = 36-28 },
    ["units/undead-necromancers/lich-defend.png"      ] = { x = 36-15, y = 36-24 },
    ["units/undead-necromancers/lich-idle-1.png"      ] = { x = 36-11, y = 36-23 },
    ["units/undead-necromancers/lich-idle-2.png"      ] = { x = 36-11, y = 36-23 },
    ["units/undead-necromancers/lich-idle-3.png"      ] = { x = 36-11, y = 36-23 },
    ["units/undead-necromancers/lich-melee-1.png"     ] = { x = 36- 7, y = 36-26 },
    ["units/undead-necromancers/lich-melee-2.png"     ] = { x = 36- 5, y = 36-26 },
    ["units/human-magi/mage.png"                      ] = { x = 36+15, y = 36-14 },
    ["units/human-magi/mage-attack-magic1.png"        ] = { x = 36+14, y = 36-16 },
    ["units/human-magi/mage-attack-magic2.png"        ] = { x = 36+ 9, y = 36-21 },
    ["units/human-magi/mage-attack-staff1.png"        ] = { x = 36+ 8, y = 36-24 },
    ["units/human-magi/mage-attack-staff2.png"        ] = { x = 36+27, y = 36+10 },
    ["units/human-magi/mage-defend.png"               ] = { x = 36+12, y = 36-15 },
    ["units/human-magi/red-mage.png"                  ] = { x = 36+14, y = 36-11 },
    ["units/human-magi/red-mage-attack-magic-1.png"   ] = { x = 36+13, y = 36-18 },
    ["units/human-magi/red-mage-attack-magic-2.png"   ] = { x = 36+11, y = 36-23 },
    ["units/human-magi/red-mage-attack-staff-1.png"   ] = { x = 36+10, y = 36-23 },
    ["units/human-magi/red-mage-attack-staff-2.png"   ] = { x = 36+28, y = 36+ 9 },
    ["units/human-magi/red-mage-defend.png"           ] = { x = 36+14, y = 36-17 },
    ["units/human-magi/arch-mage.png"                 ] = { x = 36+16, y = 36-18 },
    ["units/human-magi/arch-mage-attack-magic-1.png"  ] = { x = 36+17, y = 36-21 },
    ["units/human-magi/arch-mage-attack-magic-2.png"  ] = { x = 36+18, y = 36-24 },
    ["units/human-magi/arch-mage-attack-staff-1.png"  ] = { x = 36+ 6, y = 36-30 },
    ["units/human-magi/arch-mage-attack-staff-2.png"  ] = { x = 36+30, y = 36+10 },
    ["units/human-magi/arch-mage-defend.png"          ] = { x = 36+13, y = 36-19 },
    ["units/human-magi/great-mage.png"                ] = { x = 36+17, y = 36-26 },
    ["units/human-magi/great-mage-attack-magic-1.png" ] = { x = 36+17, y = 36-28 },
    ["units/human-magi/great-mage-attack-magic-2.png" ] = { x = 36+18, y = 36-31 },
    ["units/human-magi/great-mage-attack-staff-1.png" ] = { x = 36+ 3, y = 36-33 },
    ["units/human-magi/great-mage-attack-staff-2.png" ] = { x = 36+32, y = 36+10 },
    ["units/human-magi/great-mage-defend.png"         ] = { x = 36+12, y = 36-27 },
    ["units/undead/wraith-s.png"                      ] = { x = 36+ 8, y = 36+ 5 },
    ["units/undead/wraith-s-1.png"                    ] = { x = 36+ 8, y = 36+ 5 },
    ["units/undead/wraith-s-2.png"                    ] = { x = 36+ 8, y = 36+ 5 },
    ["units/undead/wraith-s-3.png"                    ] = { x = 36+ 7, y = 36+ 4 },
    ["units/undead/wraith-s-4.png"                    ] = { x = 36+ 7, y = 36+ 5 },
    ["units/undead/wraith-s-defend-1.png"             ] = { x = 36+ 7, y = 36+ 3 },
    ["units/undead/wraith-s-defend-2.png"             ] = { x = 36+ 6, y = 36+ 2 },
    ["units/undead/wraith-s-attack-1.png"             ] = { x = 36+ 6, y = 36+ 1 },
    ["units/undead/wraith-s-attack-2.png"             ] = { x = 36+ 0, y = 36+10 },
    ["units/undead/wraith-s-attack-3.png"             ] = { x = 36+14, y = 36- 6 },
    ["units/undead/wraith-s-attack-4.png"             ] = { x = 36+14, y = 36- 6 },
    ["units/undead/wraith-s-attack-5.png"             ] = { x = 36+15, y = 36- 7 },
  }
  EoHS.weapon_head_offset = function(image_layer_or_unit_graphics)
    if image_layer_or_unit_graphics.main_layer then image_layer_or_unit_graphics = image_layer_or_unit_graphics.main_layer end
    local relevant_image_name = string.gsub(EoHS.get_image_base(image_layer_or_unit_graphics), "+female", "")
    local result = weapon_head_offsets_table[relevant_image_name]
    if not result then
      if string.find(relevant_image_name, "spectre") then result = { x=55, y=23 }
      else return EoHS.image_layer_offset(image_layer_or_unit_graphics) end
    end
    EoHS.make_offset_relative_to_base_image(result, image_layer_or_unit_graphics)
    return result
  end
end

EoHS.rider_mountpoint_offset = function(image_layer_or_unit_graphics)
  if image_layer_or_unit_graphics.main_layer then image_layer_or_unit_graphics = image_layer_or_unit_graphics.main_layer end
  local relevant_image_name = string.gsub(EoHS.get_image_base(image_layer_or_unit_graphics), "+female", "")
  local result
      if string.match(relevant_image_name, "deathknight-crossbow") then result = { x = 36+ 5, y = 36-12 }
  elseif string.match(relevant_image_name, "deathknight"         ) then result = { x = 36+ 4, y = 36- 4 }
  elseif string.match(relevant_image_name,           "great-mage")
      or string.match(relevant_image_name,            "arch-mage") then result = { x = 36+ 0, y = 36- 4 }
  elseif string.match(relevant_image_name,             "red-mage") then result = { x = 36+ 4, y = 36- 4 }
  elseif string.match(relevant_image_name,                 "mage") then result = { x = 36+ 3, y = 36- 5 }
  elseif string.match(relevant_image_name,                 "lich") then result = { x = 36- 2, y = 36- 4 }
  end
  if not result then
    return EoHS.image_layer_offset(image_layer_or_unit_graphics)
  end
  EoHS.make_offset_relative_to_base_image(result, image_layer_or_unit_graphics)
  return result
end

-- TODO: refine these by actually tweaking them while looking at them in-game
do
  local mount_mountpoints_table = {
    ["units/monsters/water-serpent.png"            ] = { x=36- 6, y=36+11 },
    ["units/monsters/water-serpent-n.png"          ] = { x=36- 4, y=36+ 5 },
    ["units/monsters/gryphon.png"                  ] = { x =  41, y =  34 },
    ["units/monsters/gryphon-flying-1.png"         ] = { x =  65, y = 60- 5 },
    ["units/monsters/gryphon-flying-2.png"         ] = { x =  65, y = 60- 8 },
    ["units/monsters/gryphon-flying-3.png"         ] = { x =  65, y = 60-10 },
    ["units/monsters/gryphon-flying-4.png"         ] = { x =  65, y = 60-14 },
    ["units/monsters/gryphon-flying-5.png"         ] = { x =  65, y = 60-12 },
    ["units/monsters/gryphon-flying-6.png"         ] = { x =  65, y = 60- 9 },
    ["units/monsters/gryphon-flying-7.png"         ] = { x =  65, y = 60- 6 },
    ["units/monsters/gryphon-flying-8.png"         ] = { x =  65, y = 60- 3 },
    ["units/monsters/fire-dragon.png"              ] = { x = 109, y =  79 },
    ["units/undead-skeletal/chocobone.png"         ] = { x = 36- 5, y = 36- 2 },
    ["units/undead-skeletal/chocobone-defend-2.png"] = { x = 36-14, y = 36 },
    ["units/undead-skeletal/chocobone-defend-1.png"] = { x = 36-12, y = 36- 2 },
    ["units/undead-skeletal/chocobone-attack-1.png"] = { x = 36- 7, y = 36 },
    ["units/undead-skeletal/chocobone-attack-2.png"] = { x = 36- 8, y = 36 },
    ["units/undead-skeletal/chocobone-attack-3.png"] = { x = 36- 3, y = 36- 1 },
    ["units/undead-skeletal/chocobone-attack-4.png"] = { x = 36- 8, y = 36 },
  }
  local wolf_aux = {
    ["units/monsters/wolf.png"                    ] = { x = 36- 1, y = 36- 7 },
    ["units/monsters/wolf-water.png"              ] = { x = 36- 1, y = 36- 7 },
    ["units/monsters/wolf-moving.png"             ] = { x = 36+ 0, y = 36- 5 },
    ["units/monsters/wolf-attack.png"             ] = { x = 36+ 5, y = 36- 9 },
    ["units/monsters/wolf-defend-1.png"           ] = { x = 36- 3, y = 36+ 0 },
    ["units/monsters/wolf-defend-2.png"           ] = { x = 36- 1, y = 36- 4 },
  }
  for k,v in pairs(wolf_aux) do
    local gwolf_name = string.gsub(k, "wolf", "wolf-great")
    local dwolf_name = string.gsub(k, "wolf", "direwolf")
    
    mount_mountpoints_table[k] = EoHS.deep_copy(v)
    
    mount_mountpoints_table[gwolf_name] = EoHS.deep_copy(v)
    mount_mountpoints_table[gwolf_name].y = v.y - 5
    
    mount_mountpoints_table[dwolf_name] = EoHS.deep_copy(v)
    mount_mountpoints_table[dwolf_name].y = v.y - 6
  end
  
  EoHS.mount_mountpoint_offset = function(image_layer_or_unit_graphics)
    if image_layer_or_unit_graphics.main_layer then image_layer_or_unit_graphics = image_layer_or_unit_graphics.main_layer end
    local relevant_image_name = EoHS.get_image_base(image_layer_or_unit_graphics)
    local result = mount_mountpoints_table[relevant_image_name]
    if not result then
      if string.find(relevant_image_name, "mudcrawler") then result = { x=36- 1, y=36- 7 }
      else return EoHS.image_layer_offset(image_layer_or_unit_graphics) end
    end
    EoHS.make_offset_relative_to_base_image(result, image_layer_or_unit_graphics)
    return result
  end
end

EoHS.unit_graphics_aggregate = function(unit_graphics)
  return EoHS.image_aggregate_combine(unit_graphics.underlays, unit_graphics.main_layer, unit_graphics.overlays)
end

EoHS.mounted_unit_graphics = function(mount_graphics, rider_graphics)
  local mount_mountpoint_offset = EoHS.mount_mountpoint_offset(mount_graphics)
  local rider_mountpoint_offset = EoHS.rider_mountpoint_offset(rider_graphics)
  local rider_offset = mount_mountpoint_offset
  EoHS.translate_offset(rider_offset, EoHS.offset_negated(rider_mountpoint_offset))
  
  local result = EoHS.deep_copy(rider_graphics)
  EoHS.translate_unit_graphics(result, rider_offset)
  
  local mount_image_aggregate = EoHS.unit_graphics_aggregate(mount_graphics)
  -- Flatten so that cropping doesn't create an excessive amount of layers.
  -- local mount_image_modded = EoHS.collapse_image_aggregate(EoHS.unit_graphics_aggregate(mount_graphics), "image_layer")
  
  local underlay = function(...)
    result.underlays = EoHS.image_aggregate_combine(unpack(...), result.underlays)
  end
  local overlay = function(...)
    result.overlays = EoHS.image_aggregate_combine(result.overlays, unpack(...))
  end
  local pack = function(...)
    return ...
  end
  local one_underlay_many_overlays = function(...)
    local lays = pack(EoHS.image_aggregate_split(...))
    underlay(lays[1])
    table.remove(lays, 1)
    overlay(unpack(lays))
  end
  
  local mount_image_base = EoHS.get_image_base(mount_graphics.main_layer)
  if mount_image_base == "units/monsters/fire-dragon.png" then
    local l = function(c)
      c.relative_to_base_image = "units/monsters/fire-dragon.png"
      return c
    end
    one_underlay_many_overlays(mount_image_aggregate,
      l{ x=108, y1=53, y2=55, },
      l{ x=109, y1=53, y2=57, },
      l{ x=110, y1=54, y2=58, },
      l{ x=111, y1=55, y2=60, },
      l{ x=112, y1=56, y2=61, },
      l{ x=113, y1=57, y2=67, },
      l{ x=114, y1=58, y2=68, },))
  elseif string.find(mount_image_base, "water%-serpent%-attack") then
    -- Riding during a lunge would be unrealistic AND I can't draw it nicely. Temporarily appear to dismount.
    if string.find(mount_image_base, "water%-serpent%-attack%-s%-") then
      overlay(mount_image_aggregate)
    else
      underlay(mount_image_aggregate)
    end
    else
  elseif mount_image_base == "water-serpent-n.png" then
  elseif mount_image_base == "water-serpent.png" then
    local l = function(c)
      c.relative_to_base_image = "water-serpent.png"
      return c
    end
    one_underlay_many_overlays(mount_image_aggregate,
      l{ x1 = mount_mountpoint_offset.x, y1 = mount_mountpoint_offset.y, x2 = 37 },
      l{ y1 = 48, x1 = 38, },
      l{ y1 = 47, x1 = 42, },
      l{ y1 = 46, x1 = 44, },
      l{ x1 = 45, },
      l{ x1 = 38, y2 = 39, })
  else
    local under,over = EoHS.image_aggregate_split(mount_image_aggregate,
      { x1 = mount_mountpoint_offset.x, y1 = mount_mountpoint_offset.y, relative_to_base_image = mount_image_base })
    underlay(under)
    overlay(over)
  end
  
  return result
end

EoHS.simple_unit_graphics = function(main_layer) return { underlays = {}, main_layer = main_layer, overlays = {} } end

EoHS.unit_graphics_ignoring_mount = function(unit, main_layer)
  local result = EoHS.simple_unit_graphics(main_layer)
  local underlay = function(...)
    result.underlays = EoHS.image_aggregate_combine(result.underlays, unpack(...))
  end
  local overlay = function(...)
    result.overlays = EoHS.image_aggregate_combine(result.overlays, unpack(...))
  end
  
  local weapon_head_offset = EoHS.weapon_head_offsets_table[get_image_base(main_layer)] or {x=0,y=0}
  EoHS.make_offset_relative(weapon_head_offset, main_layer)

  if not is_mount then
    local unit_image_layers = { result }

    if unit_has_explicit_enchantment(unit, "dark_pact") then
      local dark_layer = EoHS.full_image_layer_copy(main_layer)
      dark_layer.image_modded = dark_layer.image_modded.."~O(0.5)~CS(-255,-255,-255)"
      
      underlay(EoHS.image_aggregate_translated(dark_layer, {x= 2}))
      underlay(EoHS.image_aggregate_translated(dark_layer, {x=-2}))
      underlay(EoHS.image_aggregate_translated(dark_layer, {y= 2}))
      underlay(EoHS.image_aggregate_translated(dark_layer, {y=-2}))
    end
    if unit_has_explicit_enchantment(unit, "rampage") then
      local rampage_layer = EoHS.full_image_layer_copy(main_layer)
      rampage_layer.image_modded = rampage_layer.image_modded.."~O(0.5)~CS(255,255,-255)~CS(0,-127,0)~BL(3)"
      overlay(rampage_layer)
    end
    if unit_has_explicit_enchantment(unit, "curse_of_anxiety") then
      overlay{ image_modded = "projectiles/wailprojectile-ne-3.png~O(0.8)"          , offset = { x =  11, y = -9 } }
      overlay{ image_modded = "projectiles/wailprojectile-ne-3.png~O(0.8)~FL(horiz)", offset = { x = -11, y = -9 } }
    end
    if unit_has_explicit_enchantment(unit, "lightning_paralysis") then
      overlay("projectiles/gaze.png")
    end
    local variables = helper.get_child(unit, "variables")
    local num_swords = 0
    local i = 1
    while variables[i] do
      if variables[i][1] == "wizard_sword" then
        num_swords = num_swords + 1
      end
      if remove then table.remove(variables, i) else i = i + 1 end
    end
    if num_swords >= 1 then
      overlay("items/sword.png")
    end
    if num_swords >= 2 then
      overlay("items/sword.png~FL(horiz)")
    end
    if unit_has_explicit_enchantment(unit, "dispelling_touch") then
      overlay{ image_modded = "halo/elven/ice-halo5.png", offset = weapon_head_offset }
    end
    if unit_has_explicit_enchantment(unit, "reanimating_touch") then
      overlay{ image_modded = "projectiles/darkmissile-ne.png~CROP(16,16,40,40)", offset = weapon_head_offset }
    end
    if unit_has_explicit_enchantment(unit, "mud_touch") then
      overlay{ image_modded = "projectiles/mud-glob.png~CROP(26,25,19,19)", offset = weapon_head_offset }
    end
    if unit_has_explicit_enchantment(unit, "regeneration") then
      overlay("halo/elven/nature-halo6.png")
    end
    if unit_has_explicit_enchantment(unit, "just_teleported") then
      overlay("footsteps/teleport-in.png~O(0.5)")
    end
  end

  return result
end

EoHS.unit_graphics = function(unit, main_layer, mount_layer)
  if unit_has_eohs_special(unit, "is_chocobone_knight") then
    main_layer = EoHS.collapse_image_aggregate(EoHS.unit_graphics_aggregate(EoHS.mounted_unit_graphics(EoHS.simple_unit_graphics(mount_layer), EoHS.simple_unit_graphics(main_layer))), "image_layer")
  end
  local graphics_ignoring_mount = EoHS.unit_graphics_ignoring_mount(unit, main_layer)
  local result
  if unit_has_eohs_special(unit, "is_mounted") then
    result = EoHS.mounted_unit_graphics(EoHS.simple_unit_graphics(mount_layer), graphics_ignoring_mount)
  else
    result = graphics_ignoring_mount
  end
  
  local shields = EoHS.get_unit_variable(unit, "mage_shields")
  if shields and shields > 0 then
    local extents = EoHS.image_aggregate_extents(EoHS.unit_graphics_aggregate(result))
    local size = math.ceil(math.max(extents.size.x, extents.size.y) * 160 / 72)
    table.insert(unit_image_layers, {
      image_name = "halo/elven/elven-shield-halo-100pct.png~SCALE("..size..","..size..")~O("..((shields + 1) / 3)..")",
      offsx = prelim_image_info.offsx,
      offsy = prelim_image_info.offsy,
    })
  end

  return result
end

function generate_unit_image_info(unit, frame_type)
  local unit_image_layers = {}
  if not (unit_has_eohs_special(unit, "is_mounted") or unit_has_eohs_special(unit, "is_chocobone_knight")) then
    table.insert(unit_image_layers, unit_base_image_info(unit, frame_type))
  else
    local rider_image_info = rider_image_info_without_mount(unit, frame_type)
    local mount_image_info
    local mount_vben
    local mount
    if unit_has_eohs_special(unit, "is_mounted") then
      mount = get_current_mount(unit)
      if not frame_type.mount_frame_type then
        frame_type.mount_frame_type = {}
        if unit_is_type(mount, "Water Serpent") then
          if string.match(unit.facing, "n") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/water-serpent-n.png" }
          end
        end
        if frame_type.mount_moving then
              if unit_is_type(mount, "Wolf") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/wolf-moving.png" }
          elseif unit_is_type(mount, "Great Wolf") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/wolf-great-moving.png" }
          elseif unit_is_type(mount, "Direwolf") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/direwolf-moving.png" }
          elseif unit_is_type(mount, "Gryphon") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/gryphon-flying-4.png" }
          end
        end
      end
      mount_image_info = unit_base_image_info(mount, frame_type.mount_frame_type, true)
      mount_vben = very_basic_image_info(mount, frame_type.mount_frame_type).image_name
    elseif unit_has_eohs_special(unit, "is_chocobone_knight") then
      if frame_type.mount_frame_type then
        mount_vben = frame_type.mount_frame_type.image_info.image_name
      else
        mount_vben = "units/undead-skeletal/chocobone.png"
      end
      mount_image_info = { image_name = mount_vben }
    end
    local mount_offs = mount_center_to_rider_crotch_offsets(mount_vben)
    if unit_has_eohs_special(unit, "is_mounted") then
      if unit_is_type(mount, "Giant Mudcrawler") then
        if mount.level == 2 then mount_offs.y = mount_offs.y - 4 end
        if mount.level == 3 then mount_offs.y = mount_offs.y - 8 end
        if mount.level > 3 then mount_offs.y = mount_offs.y - 16 end
      end
    end
    translate_image(rider_image_info, mount_offs.x, mount_offs.y)
    table.insert(unit_image_layers, mount_image_info)
    table.insert(unit_image_layers, crop_without_moving(rider_image_info, { y2 = mount_offs.y }))
    table.insert(unit_image_layers, crop_without_moving(rider_image_info, { y1 = mount_offs.y, x2 = mount_offs.x }))
    if unit_has_eohs_special(unit, "is_mounted") then
      if unit_is_type(mount, "Water Serpent") then
        table.insert(unit_image_layers, crop_without_moving(mount_image_info, { x1 = 2 }))
        if string.match(mount_vben, "-n") then
          table.insert(unit_image_layers, crop_without_moving(mount_image_info, { y1 = 15 }))
        end
      end
      if unit_is_type(mount, "Fire Dragon") then
        table.insert(unit_image_layers, crop_without_moving(mount_image_info, { x1 = 45, y1 = -55, y2 = -30 }))
      end
    end
    if unit_has_eohs_special(unit, "is_chocobone_knight") then
      table.insert(unit_image_layers, crop_without_moving(mount_image_info, { x1 = 6 }))
    end
  end
  
  if unit_has_explicit_enchantment(unit, "mage_shield") then
    local prelim_image_info = blit_together(unit_image_layers)
    local image_width, image_height = image_dimensions(prelim_image_info.image_name)
    local size = math.ceil(math.max(image_width, image_height) * 160 / 72)
    table.insert(unit_image_layers, {
      image_name = "halo/elven/elven-shield-halo-100pct.png~SCALE("..size..","..size..")",
      offsx = prelim_image_info.offsx,
      offsy = prelim_image_info.offsy,
    })
  end
  
  return blit_together(unit_image_layers)
end

local add_unit_type_animations = function(animations_added, unit_type, frame_graphics_func, animation_fixer_func)
  for i,potential_anim_tag in ipairs(unit_type) do
    -- Hack - assume an animation is anything with a frame in it
    local function search_for_frames(tag)
      if string.match(tag[1], "frame") then return true end
      for i,subtag in ipairs(tag[2]) do if search_for_frames(subtag) then return true end end
      return false
    end
    if search_for_frames(potential_anim_tag) then
      local new_animation = naive_deep_copy(potential_anim_tag)
      local function fix_frames(table)
        for i,tag in ipairs(new_animation[2]) do
          if tag[1] == "frame" then
            EoHS.make_image_aggregate_frame(
              frame_graphics_func(unit, { image_modded = frame.image, offset = { x = frame.directional_x, y = frame.y }}), frame)
          end
          if tag[1] == "if" or tag[1] == "else" then fix_frames(tag[2]) end
        end
      end
      fix_frames(new_animation[2])
      -- always higher priority than the original animation
      new_animation[2].base_score = (new_animation[2].base_score or 0) + 1
      if animation_fixer_func then animation_fixer_func(new_animation) end
      table.insert(animations_added, new_animation)
    end
  end
end

function regenerate_unit_graphics(unit)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local modifications = EoHS.force_subtag(unit, "modifications")

  -- Clear any existing generated unit animations.
  local i = 1
  while modifications[i] do
    if modifications[i][2].id == "EoHS_unit_graphics_override" then table.remove(modifications, i) else i = i + 1 end
  end

  --[[ Do we need to generate anything?
  local need_to_alter_base_image = false
  local need_to_generate_casting_anims = false
  if unit_has_eohs_special(unit, "is_mounted") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "is_chocobone_knight") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "is_casting_a_spell") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "can_train_and_cast") then need_to_generate_casting_anims = true end
  local need_to_generate_extra_anims = false
  local enchantments = helper.get_child(variables, "EoHS_enchantments")
  if enchantments then for k,v in pairs(enchantments) do need_to_alter_base_image = true; break end end
  for i,var_pair in ipairs(variables) do
    if var_pair[1] == "EoHS_superimposed_animation" then need_to_generate_extra_anims = true end
  end

  -- What? We don't? Never mind then
  if not (need_to_alter_base_image or need_to_generate_casting_anims or need_to_generate_extra_anims) then return end  ]]

  local unit_graphics_override_object_contents = { id = "eohs_unit_graphics_override" }
  local animations_added = { apply_to = "new_animation" }
  
  local default_unit_graphics = EoHS.unit_graphics(unit, EoHS.get_unit_variable(unit, "is_casting_a_spell") and EoHS.wizard_casting_image_base(unit, 2) or unit.image)
  local default_image_aggregate = EoHS.unit_graphics_aggregate(default_unit_graphics)
  local default_frame_prototype = EoHS.make_image_aggregate_frame(default_image_aggregate)
  local default_frame = function(frame_contents)
    for k,v in pairs(default_frame_prototype) do
      frame_contents[k] = v
    end
    return frame_contents
  end

  if need_to_generate_extra_anims then
    for i,var_pair in ipairs(variables) do
      if var_pair[1] == "EoHS_superimposed_animation" then
        table.insert(animations_added, { "animation", var_pair[2] })
      end
    end
  end
  if need_to_alter_base_image then
    add_unit_type_animations(animations_added, get_gendered_unit_type(unit), EoHS.unit_graphics)
    
    if unit_has_eohs_special(unit, "is_mounted") then
      local mount = get_current_mount(unit)
      add_unit_type_animations(animations_added, get_gendered_unit_type(mount), function (unit, mount_layer)
          return generate_unit_image_info(unit, { mount_frame_type = { image_info = { image_name = frame.image, offsx = frame.directional_x, offsy = frame.y }}})
        end,
        function (animation)
          if animation[1] == "attack_anim" or string.match(animation[2].apply_to, "attack") then
            EoHS.restrict_contained_filter(animation[2], "filter_attack",        { special = "granted_by_mount" })
          end
          if animation[1] == "defend" or string.match(animation[2].apply_to, "defend") then
            EoHS.restrict_contained_filter(animation[2], "filter_second_attack", { special = "granted_by_mount" })
          end
        end
      )
    end
    
    if unit_has_eohs_special(unit, "is_chocobone_knight") then
      add_unit_type_animations(animations_added, wesnoth.unit_types["Chocobone"].__cfg, function (unit, mount_layer)
          return generate_unit_image_info(unit, { mount_frame_type = { image_info = { image_name = frame.image, offsx = frame.directional_x, offsy = frame.y }}})
        end,
        function (animation)
          if animation[1] == "attack_anim" or string.match(animation[2].apply_to, "attack") then
            EoHS.restrict_contained_filter(animation[2], "filter_attack",        { name = "spear" })
          end
          if animation[1] == "defend" or string.match(animation[2].apply_to, "defend") then
            EoHS.restrict_contained_filter(animation[2], "filter_second_attack", { name = "spear" })
          end
        end
      )
    end
    
    local sidebar_image_aggregate
    local extents = EoHS.image_aggregate_extents(default_image_aggregate)
    if (extents.size.x == 72) and (extents.size.y == 72) end
      sidebar_image_aggregate = default_image_aggregate
    else
      local character_offset = EoHS.image_layer_offset(default_unit_graphics.main_layer)
      sidebar_image_aggregate = EoHS.image_aggregate_cropped(
        EoHS.image_aggregate_translated(default_image_aggregate,
          EoHS.offset_negated(character_offset)), { size={x=72,y=72}, offset={x=0,y=0} })
      
      local has_unrestricted_standing_anim = false
      for i,anim in ipairs(animations_added) do
        -- Hack: Counting directional standing_anims, because that works for the water serpent.
        -- Theoretically a unit could have a directional standing_anim but not for all directions,
        -- which would break this.
        if (anim[1] == "standing_anim") and (helper.get_child(anim[2], "filter") == nil) then
          has_unrestricted_standing_anim = true
          break
        end
      end
      
      if not has_unrestricted_standing_anim then
        table.insert(animations_added, { "standing_anim", {
          start_time = -50,
          { "frame", default_frame{ duration = 50 } },
        }})
      end
    end
    table.insert(unit_graphics_override_object_contents, { "effect", {
      apply_to = "image_mod",
      replace = EoHS.collapse_image_aggregate(sidebar_image_aggregate, "override_mod"),
    }})
  end

  if unit_has_eohs_special(unit, "can_train_and_cast") and not unit_has_eohs_special(unit, "has_been_transmogrified") then
    local w = EoHS.image_layer_offset(default_unit_graphics.main_layer)
    local casting_graphics = {
      EoHS.unit_graphics(unit, EoHS.wizard_casting_image_base(unit, 1)),
      EoHS.unit_graphics(unit, EoHS.wizard_casting_image_base(unit, 2)),
    }
    local casting_frame_prototypes = {
      EoHS.make_image_aggregate_frame(EoHS.unit_graphics_aggregate(unit, casting_graphics[1])),
      EoHS.make_image_aggregate_frame(EoHS.unit_graphics_aggregate(unit, casting_graphics[2])),
    }
    local casting_frame = function(frame_contents)
      for k,v in pairs(casting_frame_prototypes[frame_number[1]]) do
        frame_contents[k] = v
      end
      frame_contents[1] = nil
      return frame_contents
    end
    table.insert(animations_added, { "animation", { apply_to = "EoHS_start_casting",
      { "frame", default_frame{ duration = 1 } },
      { "frame", casting_frame{ 1, duration = 200 } },
      { "frame", casting_frame{ 2, duration = 1 } },
    }})
    table.insert(animations_added, { "animation", { apply_to = "EoHS_stop_casting",
      { "frame", casting_frame{ 2, duration = 1 } },
      { "frame", casting_frame{ 1, duration = 200 } },
      { "frame", default_frame{ duration = 1 } },
    }})

    local fireball_missile_frame = function(number, duration, min, max)
      return { "missile_frame", {
        offset = ""..min.."~"..max, duration = duration,
        directional_x = ""..math.floor(w.x*(1-min)).."~"..math.floor(w.x*(1-max)),
        y = ""..math.floor(w.y*(1-min)).."~"..math.floor(w.y*(1-max)),
        image = "projectiles/fireball-n"..number..".png", image_diagonal = "projectiles/fireball-nw"..number..".png",
      }}
    end
    local fireball_impact_frame = function(number)
      return { "missile_frame", {
        offset = "1.0", duration = 60,
        halo = "projectiles/fireball-impact-"..number..".png",
        auto_vflip = false,
      }}
    end
    local fireball_fail_frame = function(number)
      return { "missile_frame", {
        duration = 100,
        image = "projectiles/fireball-fail-"..number..".png",
        auto_vflip = false,
      }}
    end
    table.insert(animations_added, { "attack_anim", { start_time = -575, 
      { "filter_attack", { name = "EoHS_evocation_skill_ranged_attack", }},
      
      start_time = -575,
      { "frame", default_frame{    duration =  50,                    } },
      { "frame", casting_frame{ 1, duration = 100, sound = "fire.wav" } },
      { "frame", casting_frame{ 2, duration = 150,                    } },
      { "frame", casting_frame{ 1, duration =  75,                    } },
      { "frame", default_frame{    duration =  75,                    } },

      missile_start_time = -350,
      { "if", { hits = "yes",
        fireball_missile_frame("-1", 40, 0.0, 0.1),
        fireball_missile_frame("-2", 100, 0.1, 0.3),
        fireball_missile_frame("", 125, 0.3, 0.6),
        fireball_missile_frame("-2", 55, 0.7, 0.8),
        fireball_missile_frame("-1", 30, 0.8, 0.9),
        fireball_impact_frame(1),
        fireball_impact_frame(2),
        fireball_impact_frame(3),
        fireball_impact_frame(4),
        fireball_impact_frame(5),
        fireball_impact_frame(6),
        fireball_impact_frame(7),
        fireball_impact_frame(8),
        fireball_impact_frame(9),
        fireball_impact_frame(10),
        fireball_impact_frame(11),
        fireball_impact_frame(12),
        fireball_impact_frame(13),
        fireball_impact_frame(14),
        fireball_impact_frame(15),
        fireball_impact_frame(16),
      }},
      { "else", { hits = "no",
        missile_offset = "0.0~0.20,0.20~0.35,0.35~0.40,0.4~0.45",
        missile_directional_x = ""..(w.x*(1-0.0)).."~"..(w.x*(1-0.20))..","..(w.x*(1-0.20)).."~"..(w.x*(1-0.35))..","..(w.x*(1-0.35)).."~"..(w.x*(1-0.40))..","..(w.x*(1-0.4)).."~"..(w.x*(1-0.45)),
        missile_y = ""..(w.y*(1-0.0)).."~"..(w.y*(1-0.20))..","..(w.y*(1-0.20)).."~"..(w.y*(1-0.35))..","..(w.y*(1-0.35)).."~"..(w.y*(1-0.40))..","..(w.y*(1-0.4)).."~"..(w.y*(1-0.45)),
        fireball_fail_frame(1),
        fireball_fail_frame(2),
        fireball_fail_frame(3),
        fireball_fail_frame(4),
        fireball_fail_frame(5),
        fireball_fail_frame(6),
        fireball_fail_frame(7),
      }}
    }})
    
    cast2_weapon_offs = EoHS.weapon_head_offset(casting_graphics[2])
    local faeriefire_frame = function(halo_number, castframe_number)
      return { "frame", casting_frame{ castframe_number, duration = 75, halo = "halo/elven/faerie-fire-halo"..halo_number..".png", primary = false, auto_vflip = false, halo_x = cast2_weapon_offs.x, halo_y = cast2_weapon_offs.y }}
    end
    table.insert(animations_added, { "attack_anim", { start_time = -450,
      { "filter_attack", { name = "EoHS_nature_magic_skill_ranged_attack", }},
      
      start_time = -450,
      faeriefire_frame(1, 1),
      faeriefire_frame(2, 2),
      faeriefire_frame(3, 2),
      faeriefire_frame(4, 2),
      faeriefire_frame(5, 2),
      faeriefire_frame(6, 2),
      faeriefire_frame(7, 1),
      
      sound_start_time = -450,
      { "if", { hits = "yes", { "sound_frame", { duration = 0, sound = "magic-faeriefire.ogg" }} }},
      { "else", { hits = "no", { "sound_frame", { duration = 0, sound = "magic-faeriefire-miss.ogg" }} }},
      
      missile_start_time = -500,
      missile_directional_x = ""..w.x.."~0",
      missile_y = ""..w.y.."~0",
      missile_halo_start_time = -500,
      missile_halo_layer = 10,
      missile_halo_directional_x = ""..w.x.."~0",
      missile_halo_y = ""..w.y.."~0",
      missile_halo_offset = "0~1",
      { "missile_frame", { duration = 150, image = "projectiles/icemissile-n-1.png", image_diagonal = "projectiles/icemissile-ne-1.png", }},
      { "missile_halo_frame", { duration = 75, image = "halo/elven/ice-halo1.png", }},
      { "missile_halo_frame", { duration = 75, image = "halo/elven/ice-halo2.png", }},
      { "missile_frame", { duration = 150, image = "projectiles/icemissile-n-2.png", image_diagonal = "projectiles/icemissile-ne-2.png", }},
      { "missile_halo_frame", { duration = 75, image = "halo/elven/ice-halo3.png", }},
      { "missile_halo_frame", { duration = 75, image = "halo/elven/ice-halo4.png", }},
      { "missile_frame", { duration = 150, image = "projectiles/icemissile-n-3.png", image_diagonal = "projectiles/icemissile-ne-3.png", }},
      { "missile_halo_frame", { duration = 50, image = "halo/elven/ice-halo5.png", }},
      { "missile_halo_frame", { duration = 50, image = "halo/elven/ice-halo1.png", }},
      { "missile_halo_frame", { duration = 50, image = "halo/elven/ice-halo2.png", }},
      { "missile_frame", { duration =  50, image = "projectiles/icemissile-n-4.png", image_diagonal = "projectiles/icemissile-ne-4.png", }},
      { "missile_halo_frame", { duration = 50, image = "halo/elven/ice-halo6.png", }},
      { "missile_frame", { duration =  75, image = "projectiles/icemissile-n-5.png", image_diagonal = "projectiles/icemissile-ne-5.png", }},
      { "missile_halo_frame", { duration = 75, image = "halo/elven/ice-halo7.png", }},
      { "missile_frame", { duration =  50, image = "projectiles/icemissile-n-6.png", image_diagonal = "projectiles/icemissile-ne-6.png", }},
      { "missile_halo_frame", { duration = 50, image = "halo/elven/ice-halo8.png", }},
      { "missile_frame", { duration =  50, image = "projectiles/icemissile-n-7.png", image_diagonal = "projectiles/icemissile-ne-7.png", }},
      { "missile_halo_frame", { duration = 50, image = "halo/elven/ice-halo9.png", }},
    }})

    table.insert(animations_added, { "attack_anim", { start_time = -300,
      { "filter_attack", { name = "EoHS_necromancy_skill_ranged_attack", }},
      
      start_time = -300,
      { "frame", casting_frame{ 1, duration = 75 } },
      { "frame", casting_frame{ 2, duration = 75 } },
      { "frame", casting_frame{ 2, duration = 75, halo = "halo/undead/black-magic-1.png", halo_x = w.x, halo_y = w.y, }},
      { "frame", casting_frame{ 2, duration = 75, halo = "halo/undead/black-magic-2.png", halo_x = w.x, halo_y = w.y, }},
      { "frame", casting_frame{ 2, duration = 75, halo = "halo/undead/black-magic-3.png", halo_x = w.x, halo_y = w.y, }},
      { "frame", casting_frame{ 2, duration = 75, halo = "halo/undead/black-magic-4.png", halo_x = w.x, halo_y = w.y, }},
      { "frame", casting_frame{ 2, duration = 50, halo = "halo/undead/black-magic-5.png", halo_x = w.x, halo_y = w.y, }},
      { "frame", casting_frame{ 2, duration = 50, }},
      { "frame", casting_frame{ 1, duration = 50, }},
      
      sound_start_time = -75,
      { "if", { hits = "yes", { "sound_frame", { duration = 0, sound = "magic-dark.ogg" }} }},
      { "else", { hits = "no", { "sound_frame", { duration = 0, sound = "magic-dark-miss.ogg" }} }},

      missile_start_time = -100,
      missile_directional_x = ""..w.x.."~0",
      missile_y = ""..w.y.."~0",
      { "missile_frame", {
        duration = 200,
        image = "projectiles/darkmissile-n.png",
        image_diagonal = "projectiles/darkmissile-ne.png",
      }},
    }})
  end

  if animations_added[1] then table.insert(unit_graphics_override_object_contents, { "effect", animations_added }) end
  table.insert(modifications, { "object", unit_graphics_override_object_contents })
end


>>)}


{EOHS_LUA_FILE (<<-- settings.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.default_wizard_settings = {
  can_spend_gold_on_spells = true,
  can_recruit = true,
  starting_level = 2,
  skill_points_per_level = 4,
  skill_points_at_level_0 = 2,
  summon_duration = "infinite",
  summons_disappear_with_summoner = false,
  summon_cost_multiplier = 100,
  summon_experience_transfer = 25,
  mana_income_per_level = 2,
  mana_capacity_per_level = "infinite",
}
EoHS.rpg_wizard_settings = EoHS.deep_copy(EoHS.default_wizard_settings)
EoHS.rpg_wizard_settings.can_spend_gold_on_spells = false
EoHS.rpg_wizard_settings.can_recruit = false
EoHS.rpg_wizard_settings.starting_level = 1
EoHS.rpg_wizard_settings.summon_duration = 3
EoHS.rpg_wizard_settings.summons_disappear_with_summoner = true
EoHS.rpg_wizard_settings.summon_cost_multiplier = 50
EoHS.rpg_wizard_settings.summon_experience_transfer = 100
EoHS.rpg_wizard_settings.mana_income_per_level = 4
EoHS.rpg_wizard_settings.mana_capacity_per_level = 15

EoHS.default_settings = {
  { "wizard_default", EoHS.default_wizard_settings }
}
EoHS.rpg_settings = {
  { "wizard_default", EoHS.rpg_wizard_settings }
}

EoHS.map_specific_default_settings = function()
  return EoHS.default_settings, false
end

EoHS.create_settings_picking_event = function()
  wesnoth.fire("event", { name = "side_turn",
    { "lua", { code = 'EoHS.settings_picking_event()' }}
  })
end

EoHS.settings_dialog_grid = function(dialog_context, settings, mutable)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local gr = function(contents) return g{r(contents)} end
  local rc = function(contents) return r{c(contents)} end
  local rcg = function(contents) return r{c{g(contents)}} end
  local rcgr = function(contents) return rc{gr(contents)} end
  local l = function(label) return {"label",{label=label}} end
  local t = function(setting_id, label)
    local widget_id = "settings_dialog_grid_"..setting_id
    table.insert(customizing_widgets, widget_id)
    dialog_context.preshow(function()
      wesnoth.set_dialog_value(settings[setting_id], widget_id)
      wesnoth.set_dialog_active(false, widget_id)
      wesnoth.set_dialog_callback(function()
        settings[setting_id] = wesnoth.get_dialog_value(widget_id)
      end, widget_id)
    end)
    return {"toggle_button",{id=widget_id,label=label}}
  end
  local x = function(setting_id, optional)
    local widget_id = "settings_dialog_grid_"..setting_id
    table.insert(customizing_widgets, widget_id)
    dialog_context.preshow(function()
      if not (optional and settings[setting_id] == "infinite") then
        wesnoth.set_dialog_value(""..settings[setting_id], widget_id)
      end
      wesnoth.set_dialog_active(false, widget_id)
    end)
    dialog_context.postshow(function()
      local choice = wesnoth.get_dialog_value(widget_id)
      local num = tonumber(choice)
      if num then
        num = math.floor(num)
        if ""..num == choice then
          settings[setting_id] = num
          return
        end
      end
      
    end)
    return { "text_box", { id = widget_id } }
  end
  local presets = {
    {
      image = "attacks/fireball.png",
      name = _"Default settings"
      settings = EoHS.default_settings,
    },
    {
      image = "attacks/fireball.png",
      name = _"RPG settings"
      settings = EoHS.rpg_settings,
    },
    {
      image = "attacks/fireball.png",
      name = _"Custom settings"
      settings = "custom",
    },
  }
  local custom_idx
  local chosen_idx
  local preset_rows = {}
  for i,preset in ipairs(presets) do
    table.insert(preset_rows, rc{{"toggle_panel",{gr{
      c{{"image",{label=preset.image}}},
      c{{"label",{label=preset.name}}}
    }}}})
    if preset.settings == "custom" then
      custom_idx = i
    elseif EoHS.tags_are_identical(settings, preset.settings) then
      chosen_idx = i
    end
  end
  if not chosen_idx then
    chosen_idx = custom_idx
  end
  
  local choose_preset = function(index)
    wesnoth.set_dialog_value(index, "settings_listbox")
    local preset = presets[index]
    if preset then
      settings = preset
      for i,widget_id in ipairs(customizing_widgets) do
        wesnoth.set_dialog_active(false, widget_id)
      end
    else
      settings = EoHS.deep_copy(settings)
      if mutable then
        for i,widget_id in ipairs(customizing_widgets) do
          wesnoth.set_dialog_active(true, widget_id)
        end
      end
    end
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_value(mutable, "settings_listbox")
    wesnoth.set_dialog_callback(function() choose_preset(wesnoth.get_dialog_value("settings_listbox")) end, "settings_listbox")
    choose_preset(chosen_idx)
  end)
  
  g{
    rc{ {"horizontal_listbox",{
      id = "settings_listbox",
      {"list_definition",{
        p()
      }},
      {"list_data",preset_rows},
    }} },
    rcg{
      rc{ t("can_spend_gold_on_spells",_"Wizards can spend gold on spells") },
      rc{ t("can_recruit",_"Wizards can recruit") },
      rcgr{ c{l(_"Wizards start at level ")},c{x("starting_level")} },
      rcgr{ c{l(_"Wizards have ")},c{x("skill_points_per_level")},c{l(_" skill points per level, plus ")},c{x("skill_points_at_level_0")} },
      rcgr{ c{l(_"Wizards earn ")},c{x("mana_income_per_level")},c{l(_" mana per level per turn")} },
      rcgr{ c{t("",_"Wizards have a maximum of ")},c{x("")},c{l(_" mana per level")} },
      rcgr{ c{l(_"Summoned creatures transfer ")},c{x("summon_experience_transfer")},c{l(_" percent of their experience to their summoners")} },
      rcgr{ c{t("",_"Summoned creatures disappear after ")},c{x("")},c{l(_" turns")} },
      rc{ t("summons_disappear_with_summoner",_"Summoned creatures disappear when the summoner dies") },
      rcgr{ c{l(_"Summoning spells cost ")},c{x("summon_cost_multiplier")},c{l(_" percent of their normal cost")} },
    },
  }
end

--[[
  local customize_skillset_func = function(side)
  
  local customize_buttons_rows = {}
  local customize_skillset_button_name
  if mutable then
    local customize_skillset_button = dialog_context.button({label=_"Customize starting skills"}, customize_skillset_func("default"))
    local decustomize_skillset_button = {"spacer",{}}
    if EoHS.get_subtag(settings, "side_default.starting_skillset") then decustomize_skillset_button = dialog_context.button({label=_"Customize starting skills"}, customize_skillset_func("default")) end
    table.insert(customize_buttons_rows, r{c{customize_skillset_button}, r{c{decustomize_skillset_button}}}
  else
    if EoHS.get_subtag(settings, "side_default.starting_skillset") then
      table.insert(customize_buttons_rows, r{c{dialog_context.button({label=_"View starting skills"}, customize_skillset_func("default"))}})
    end
  end
  local ]]

EoHS.current_player_picks_settings = function()
  local map_default_settings, separate_map_default = EoHS.map_specific_default_settings()
  
  local current_settings = map_default_settings
  local show_dialog = function()
    local d = EoHS.make_dialog_context(function() end, show_dialog)
  end
end
--[[
EoHS.settings_picking_event = function()
  local choice = EoHS.synchronize_choice(EoHS.current_player_picks_settings, function() return { ai_chose=true } end)
  
  if choice.ai_chose then
    EoHS.create_settings_picking_event()
  else
    choice.inited = true
    EoHS.set_variable("settings", choice)
    EoHS.init_campaign_with_settings()
  end
end]]

EoHS.get_wizard_settings = function(unit)
  return EoHS.get_unit_variable(unit, "settings")
end
EoHS.get_wizard_setting = function(unit, name)
  return EoHS.get_unit_variable(unit, "settings."..name)
end
EoHS.init_wizard_settings = function(wizard_settings)
  local defaults = EoHS.get_variable("settings.wizard_default")
  for k,v in pairs(defaults) do
    if wizard_settings[k] == nil then wizard_settings[k] = v end
  end
end
--[[
EoHS.get_settings_for_side = function(side)
  local settings = EoHS.get_variable("settings")
  if not settings then EoHS.err("EoHS.get_settings_for_side called, no settings found") end
  if not settings.inited then EoHS.err("EoHS.get_settings_for_side called, settings not inited") end
  local side_specific = EoHS.get_subtag(settings, "side_"..side)
  if side_specific then return side_specific else return EoHS.get_subtag(settings, "side_default") end
end]]

>>)}

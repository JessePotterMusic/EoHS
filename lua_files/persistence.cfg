{EOHS_LUA_FILE (<<-- persistence.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

local get_persistent_variable__network = function(side, name)
  if not EoHS.synchronized then EoHS.err("get_persistent_variable__network used in an unsynchronized context") end
  wesnoth.fire("get_global_variable", {
     namespace = "EoHS_Era_of_High_Sorcery",
     from_global = name,
     to_local = "EoHS.LUA_TEMP",
     side = side })
  local result = wesnoth.get_variable("EoHS.LUA_TEMP")
  wesnoth.set_variable("EoHS.LUA_TEMP")
  return result
end

local set_persistent_variable__network = function(side, name, value)
  if not EoHS.synchronized then EoHS.err("set_persistent_variable__network used in an unsynchronized context") end
  if value == nil then
    wesnoth.fire("clear_global_variable", {
      namespace = "EoHS_Era_of_High_Sorcery",
      global = name,
      immediate = true,
      side = side })
  else
    wesnoth.set_variable("EoHS.LUA_TEMP", value)
    wesnoth.fire("set_global_variable", {
      namespace = "EoHS_Era_of_High_Sorcery",
      to_global = name,
      from_local = "EoHS.LUA_TEMP",
      immediate = true,
      side = side })
    wesnoth.set_variable("EoHS.LUA_TEMP")
  end
end

local get_persistent_variable__stored = function(side, name)
  return EoHS.get_variable("persistent_variables.side["..side.."]."..name)
end

local set_persistent_variable__stored = function(side, name, value)
  EoHS.set_variable("persistent_variables.side["..side.."]."..name, value)
end

local set_persistent_variable__both = function(side, name, value)
  set_persistent_variable__network(side, name, value)
  set_persistent_variable__stored (side, name, value)
end

local update_supporter_status = function(side)
  local found_supporter = false
  local units = EoHS.get_units({ side=side, EoHS.is_on_the_map, EoHS.has_unit_variable("is_wizard") })
  for i,unit in ipairs(units) do
    local modifications = EoHS.force_subtag(unit, "modifications")
    local trait,idx = helper.get_child(modifications, "trait", "EoHS_supporter")
    if string.match(EoHS.get_persistent_variable(side, "supporter_passwords"), EoHS.sha1(unit.name)) then
      found_supporter = true
      if not trait then
        table.insert(modifications, 1, {"trait",{
          id = "EoHS_supporter",
          name = _ "magnanimous",
          description = EoHS.substitute(_"$1| has generously donated to help Eli keep developing Era of High Sorcery. Visit www.elidupree.com/EoHS to donate.", {unit.name}),
        }})
        EoHS.put_unit(unit)
      end
    else
      if trait then
        table.remove(modifications, idx)
        EoHS.put_unit(unit)
      end
    end
  end
  EoHS.set_side_variable(side, "is_supporter", found_supporter)
end

local load_persistent_variables = function(side)
  EoHS.set_variable("persistent_variables.side["..side.."]", {})
  local fetch = function(name)
    local value = get_persistent_variable__network(side, name)
    set_persistent_variable__stored(side, name, value)
    return value
  end
  local attribute_list = fetch("attribute_list")
  
  for i,key in EoHS.comma_separated_values(attribute_list) do
    fetch(key)
  end
  
  if get_persistent_variable__stored(side, "identity") == "" then
    set_persistent_variable__both(side, "identity", EoHS.sha1(EoHS.get_side_variable(side, "original_nick")..
      EoHS.random("0..32767")..EoHS.random("0..32767")..EoHS.random("0..32767")..EoHS.random("0..32767")))
  end
  update_supporter_status(side)
end


EoHS.side_persistent_variables_are_up_to_date = function(side)
  return get_persistent_variable__network(side, "identity") == get_persistent_variable__stored(side, "identity")
end

EoHS.update_persistent_variables = function()
  EoHS.assert(EoHS.synchronized, "EoHS.update_persistent_variables used in an unsynchronized context")
  local persistent_variables = EoHS.get_variable("persistent_variables")
  for i,side in ipairs(wesnoth.sides) do
    if persistent_variables[i] then
      
    else
    end
  end
  EoHS.set_variable("persistent_variables", persistent_variables)
end

EoHS.get_persistent_variable = function(side, name)
  get_persistent_variable__stored(side, name)
end

EoHS.set_persistent_variable = function(side, name, value)
  if not EoHS.side_persistent_variables_are_up_to_date(side) then
    load_persistent_variables(side)
  end
  
  local old = get_persistent_variable__stored(side, name)
  if (old == nil) and (value ~= nil) then
    local new_list = get_persistent_variable__stored(side, "attribute_list")..","..name
    set_persistent_variable__both(side, "attribute_list", new_list)
  end
  if (old ~= nil) and (value == nil) then
    local new_list = string.gsub(get_persistent_variable__stored(side, "attribute_list"), ","..EoHS.lua_pattern_escape(name), "")
    set_persistent_variable__both(side, "attribute_list", new_list)
  end
  
  set_persistent_variable__both(side, name, value)
end


local score_victory = function(side1, side2)
  local id1 = get_persistent_variable__stored(side1, "identity")
  local id2 = get_persistent_variable__stored(side2, "identity")
  local vars1 = EoHS.get_side_variables(side1)
  local vars2 = EoHS.get_side_variables(side2)
  if id1 ~= id2 then
    if (not vars1.was_ever_ai) and (not vars2.was_ever_ai) and (id1 == vars1.original_identity) and (id2 == vars2.original_identity) then
      local defeated_nick = string.gsub(vars2.original_nick, ",", "")
      local nick_list = EoHS.get_persistent_variable(side1, "defeated_nicks")
      local id_list = EoHS.get_persistent_variable(side1, "defeated_identities")
      if nick_list == "" then list="," end
      if (not string.match(nick_list, ","..EoHS.lua_pattern_escape(defeated_nick)..",")) and (not string.match(id_list, id2)) then
        id_list = id_list..id2..","
        nick_list = nick_list..defeated_nick..","
        EoHS.set_persistent_variable(side1, "defeated_nicks", nick_list)
        EoHS.set_persistent_variable(side1, "defeated_identities", id_list)
      end
    end
  end
end

EoHS.score_victories = function()
  if not EoHS.get_variable("debug_mode") then
    local units = EoHS.get_units({ canrecruit=true, EoHS.is_on_the_map })
    local sides_alive = {} 
    for i,unit in ipairs(units) do sides_alive[unit.side] = true end
    for side1 in ipairs(wesnoth.sides) do
      for side2 in ipairs(wesnoth.sides) do
        if sides_alive[side1] and not sides_alive[side2] then
          score_victory(side1, side2)
        end
      end
    end
  end
end

EoHS.num_victories = function(side)
  local nick_list = EoHS.get_persistent_variable(side, "defeated_nicks")
  for victory in EoHS.comma_separated_values(nick_list) do result = result + 1 end
  return result
end

EoHS.enter_supporter_password = function(side, password)
  if EoHS.get_side_variable(side, "original_nick_hash") == password then
    local password_list = EoHS.get_persistent_variable(side, "supporter_passwords")
    password_list = password_list..password..","
  end
  update_supporter_status(side)
end

>>)}

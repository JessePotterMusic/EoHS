this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- targeting.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack,xpcall = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack,xpcall
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local independent = "independent"
local dependent = "dependent"

EoHS.action_specific_stuff = function (kind, parameters, extras)
  local action = EoHS.actions [parameters.action_id]
  local stuff = action["target_"..kind.."_stuff"]
  if stuff then return stuff() end
  return {}
end
EoHS.all_action_stuff = function (kind, parameters, extras)
  local result = {}
  local range = EoHS.action_range (parameters)
  
  if range and not extras.ignore_range then
    if kind == independent then
      table.insert (result, {"aspect", {
        kind: _"Range",
        value: tostring(range),
      }})
    else
      local distance = EoHS.distance_between (
        parameters.src_x, parameters.src_y,
        parameters.target_x, parameters.target_y,
        EoHS.known_passable_only (parameters.side), 100)
      table.insert (result, {"text", {
        text = EoHS.substitute (_"Distance: $1|", {distance}),
        forbidden = distance > range,
      }})
    end
  end
  
  if kind == independent then
    local action = EoHS.actions [parameters.action_id]
    local cost = EoHS.action_cost(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
  
    if cost.action_points then
      table.insert (result, {"aspect", {
        kind=_"AP",
        value=tostring(cost.action_points),
        forbidden = EoHS.get_unit_action_points(actor) < cost.action_points,
        standard_aspect_index = "ap",
      }})
    end
    if cost.once_per_turn then
      if EoHS.get_unit_variable (actor, "used_"..parameters.action_id) then
        table.insert (result, {"text", {
          text=_"You already cast this spell this turn.",
          forbidden = true,
        }})
      end
    end
    local mana = math.max(0, EoHS.get_unit_variable(actor, "mana") or 0)
    local total_mana_available = mana
    if EoHS.get_wizard_setting(actor, "can_spend_gold_on_spells") then
      total_mana_available = total_mana_available + math.max(0, wesnoth.sides[actor.side].gold)
    end
    if (cost.mana or 0) + EoHS.scroll_cost > total_mana_available then
      whole_action_scroll_validity = "impossible"
    end
    if cost.mana then
      local s = {
        kind=_"Mana cost",
        value=""..cost.mana,
        standard_aspect_index = "mana",
      }
      if mana >= cost.mana then
        -- ... 
      elseif EoHS.get_wizard_setting(actor, "can_spend_gold_on_spells") and (mana+wesnoth.sides[actor.side].gold >= cost.mana) then
        s.details = EoHS.substitute(_"You will transmute $1| gold into mana", {cost.mana-mana})
      else
        s.forbidden = true
      end
      table.insert (result, {"aspect", s})
    end
  
    if cost.gold then
      table.insert (result, {"aspect", {
        kind=_"Gold cost",
        value=""..cost.gold,
        forbidden = wesnoth.sides[actor.side].gold < cost.gold,
      }})
    end
    
    if (action.is_spell and not parameters.scroll_id) and (EoHS.get_unit_variable(actor, "spiritform")) or (EoHS.get_unit_variable(actor, "ogre_fury")) then
      table.insert (result, {"text", {
        text=_"You can't cast spells while transformed.",
        forbidden = true,
      }})
    end
    if parameters.given_recently then
      table.insert (result, {"text", {
        text=_"A unit can't use a scroll it was given on the same turn.",
        forbidden = true,
      }})
    end
  end
  
  for index, thing in ipairs (EoHS.action_specific_stuff (dependent, parameters, extras)) do
    table.insert (result, thing)
  end
  return result
end

EoHS.targeting_items = function (kind, parameters, extras)
  local result = {}
  for index, thing in ipairs (EoHS.action_specific_stuff (kind, parameters, extras)) do
    if thing [1] == "item" then
      table.insert (result, thing [2])
    end
  end
  return result
end

EoHS.targeting_elements = function (kind, parameters, extras)
  local result = {}
  for index, thing in ipairs (EoHS.all_action_stuff (kind, parameters, extras)) do
    local text
    if thing [1] == "text" then
      text = thing [2].text
    elseif thing [2] == "aspect" then
      text = EoHS.substitute (_"$kind|:$value|$details|", {
        kind= thing [2].kind and thing [2].kind..":" or "",
        value= thing [2].value and " "..thing [2].value or "",
        details= thing [2].value and " "..thing [2].value or "",
      })
    end
    if text then
      local color = thing [2].color
      if not color then
        color = thing [2].forbidden and "#ff0000" or "#ffffff"
      end
      table.insert (result, {"element", {
        text = '<span color="'..color ..'">'..text..'</span>',
      }})
    end
  end
  return result
end

EoHS.target_is_valid = function (parameters, extras)
  extras = EoHS.deep_copy (extras) or {}
  extras.validity_only = true
  for index, thing in ipairs (EoHS.all_action_stuff (dependent, parameters, extras)) do
    if thing [2].forbidden then
      return false
    end
  end
  return true
end

EoHS.action_is_valid = function (parameters, extras)
  extras = EoHS.deep_copy (extras) or {}
  extras.validity_only = true
  for index, thing in ipairs (EoHS.all_action_stuff (dependent, parameters, extras)) do
    if thing [2].forbidden then
      return false
    end
  end
  return extras.ignore_target or EoHS.target_is_valid (parameters, extras)
end



EoHS.choose_target = function (parameters)
  EoHS.assert (not EoHS.context.unison, "choose_target should only happen for one player")
  local action = EoHS.actions [parameters.action_id]
  local actor = EoHS.get_unit (parameters.actor_id)
  local range = EoHS.action_range (parameters)
  local info = {
    parameters = parameters,
    legal_targets_map = {},
    no_choice = false,
    done = false,
    items = {
      independent = {},
      dependent = {},
    },
    independent_elements = EoHS.targeting_elements (independent, parameters),
  }
  if not range then
    info.no_choice = true
  else
    local legal_targets_array = EoHS.find_reach (parameters.src_x, parameters.src_y, EoHS.known_passable_only (parameters.side), range)
    EoHS.filter (legal_targets_array, function(target)
      parameters.target_x = target.x
      parameters.target_y = target.y
      return EoHS.target_is_valid (parameters, {ignore_range = true})
    end)
    
    for index, target in ipairs (legal_targets_array) do
      info.legal_targets_map [target.x..","..target.y] = target
    end
  end
  
  
  local add_item = function(kind, item)
    EoHS.place_item (item)
    table.insert (info.items [kind], item)
  end
  local clear_items = function (kind)
    for index, item in ipairs (info.items [kind]) do
      EoHS.remove_item (item)
    end
  end
  local change_target = function (x, y)
    clear_items (dependent)
    for index, item in ipairs (EoHS.targeting_items (dependent, parameters)) do
      add_item (dependent, item)
    end
  end
  
  local width, height = wesnoth.get_map_size()
  for something = 1, width do for whatever = 1, height do
    if (not info.no_choice) and (not info.legal_targets_map [something..","..whatever]) then
      add_item (independent, {x= something,y= whatever, halo = "terrain/darken.png"})
    end
  end end
  for index, item in ipairs (EoHS.targeting_items (independent, parameters)) do
    add_item (independent, item)
  end
  
  info.change_target = change_target
  
  EoHS.current_targeting_info = info
  
  wesnoth.fire ("redraw")
  
  while not info.done do
    wesnoth.fire ("delay", {time = 10})
    --wesnoth.fire ("redraw")
  end
  
  clear_items (independent)
end


EoHS.soon (EoHS.on_click (function(x,y)
  local info = EoHS.current_targeting_info
  if info then
    if info.no_choice or info.legal_targets_map [x..","..y] then
      info.parameters.target_x,info.parameters.target_y = x,y
      info.done = true
    else
      --
    end
  end
end))

EoHS.soon (EoHS.on_deselect (function(x,y)
  local info = EoHS.current_targeting_info
  if info then
    info.parameters.target_x,info.parameters.target_y = nil,nil
    info.done = true
  end
end))

EoHS.soon (EoHS.on_mouse_move (function(x,y)
  local info = EoHS.current_targeting_info
  if info then
    info.change_target (x,y)
  end
end))


-->>)}

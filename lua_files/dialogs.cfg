{EOHS_LUA_FILE (<<-- dialogs.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end

EoHS.set_canvas_over_button = function(canvas, id)
  for i,button_state in ipairs({"","-disabled","-pressed","-active"}) do
    local button_canvas = EoHS.shallow_copy(canvas)
    table.insert(button_canvas, 1, {"image",{
      w = "(width)",
      h = "(height)",
      name = "buttons/button"..button_state..".png"
    }})
    wesnoth.set_dialog_canvas(i, button_canvas, id)
  end
end

local fake_listbox_background = {"rectangle",{
  x = 0,
  y = 0,
  w = "(width)",
  h = "(height)",
  fill_color = EoHS.macros.GUI__BACKGROUND_COLOR_ENABLED,
}}
EoHS.fake_listbox_canvas_unselected = {fake_listbox_background}
EoHS.fake_listbox_canvas_selected = EoHS.deep_copy(EoHS.macros.GUI__LISTBOX_SELECTED_CELL)
table.insert(EoHS.fake_listbox_canvas_selected, 1, fake_listbox_background)

EoHS.fake_listbox_entry = function(dialog_context, size_str, canvas_extras, selected, switch_func)
  local canvas
  local contents = {id = dialog_context.make_unique_id(), label=size_str}
  local result = dialog_context.button(contents, switch_func)
  if selected then
    canvas = EoHS.deep_copy(EoHS.fake_listbox_canvas_selected)
  else
    canvas = EoHS.deep_copy(EoHS.fake_listbox_canvas_unselected)
  end
  for i,canvas_extra in ipairs(canvas_extras) do
    table.insert(canvas, canvas_extra)
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, canvas, contents.id)
    wesnoth.set_dialog_canvas(3, canvas, contents.id)
    wesnoth.set_dialog_canvas(4, canvas, contents.id)
  end)
  
  return result
end

EoHS.escape_string_for_formula = function(str)
  -- We can handle a translatable string userdata,
  -- or a string with parentheses but no singlequotes (it's not parsed as a formula expression),
  -- or a string with singlequotes but no parentheses (as a formula string literal),
  -- but as far as I can tell, formula is such a half-baked language that there
  -- isn't even a way to escape quotes in a string literal.
  -- So we hackily "escape" them by fake-translating them so that they become a userdata.
  if type(str) == "string" then
    local parens = string.match(str, "[%(%)]")
    local quotes = string.match(str, "'")
    if parens and quotes then return _(str) --string.gsub(str,"'","`")
    elseif parens then return "('"..str.."')" end
  end
  return str
end

EoHS.unit_info_canvas = function(unit, extra_strings)
  local image_size_str = "(if(height-6 < image_original_width, height-6, image_original_width))"
  local canvas = { {"image",{
    x = "((height - image_width) / 2)",
    y = "((height - image_height) / 2)",
    w = image_size_str,
    h = image_size_str,
    name = EoHS.unit_thumbnail(unit)
  }} }
  local strings = {}
  if unit.name ~= "" then
    table.insert(strings, unit.name)
  else
    table.insert(strings, unit.language_name)
  end
  table.insert(strings, "("..unit.x..","..unit.y..")")
  for i,extra_string in ipairs(extra_strings) do
    table.insert(strings, extra_string)
  end
  for i,str in ipairs(strings) do
    local buffer=5
    local fontgapwanted=2
    local numstr=#strings
    local fontsize=14
    local totalloss = buffer*2 + numstr*fontsize
    local heightwanted = totalloss+(numstr-1)*fontgapwanted
    local fontgapstr="(if(height<"..heightwanted..",(height-"..totalloss..")/"..(numstr-1)..","..fontgapwanted.."))"
    table.insert(canvas, {"text",{
      x = "(height-1)",
      y = "(("..(i-1).."*("..fontsize.."+"..fontgapstr.."))+"..buffer..")",
      w = "(text_width)",
      h = "(text_height)",
      font_size = fontsize,
      color = "221, 221, 221, 255",
      text = EoHS.escape_string_for_formula(str),
      text_markup = true
    }})
  end
  return canvas
end

--[[EoHS.hex_thumbnail = function(x, y, side)
  local result = { EoHS.terrain_symbol_image(wesnoth.get_terrain(x, y)).."~SCALE(58,58)" }
  
  if EoHS.hex_is_unfogged(x, y, side) then
    local unit = EoHS.get_unit(x, y)
    if unit then
      table.insert(result, EoHS.unit_thumbnail(unit).."~O(3)") -- Using the 58x58 default to exaggerate the unit size so it shows up better on the tiny button, and reducing transparency to exaggerate the ellipse
    end
  else
    table.insert(result, "terrain/fog/fog1.png".."~SCALE(58,58)")
  end

  return EoHS.collapse_image_aggregate(result, "image_modded")
end]]

EoHS.add_hex_canvas = function(canvas, x, y, side, image_canvas_element_prototype)
  local make_image = function(name)
    local result = EoHS.shallow_copy(image_canvas_element_prototype) or { x = "0", y = "0", w = "(width)", h = "(height)", }
    result.name = name
    table.insert(canvas, {"image",result})
  end
  
  if EoHS.hex_is_unshrouded(x, y, side) then
    make_image(EoHS.terrain_symbol_image(wesnoth.get_terrain(x, y)))
    
    if EoHS.hex_is_unfogged(x, y, side) then
      local unit = EoHS.get_unit(x, y)
      if unit then
        canvas[1][2].name = canvas[1][2].name
        make_image(EoHS.unit_thumbnail(unit).."~O(3)") -- Using the 58x58 default to exaggerate the unit size so it shows up better on the tiny button, and reducing transparency to exaggerate the ellipse
      end
    else
      make_image("terrain/fog/fog1.png")
    end
  else
    make_image("terrain/void/void.png")
  end
end

EoHS.hex_canvas = function(x, y, side, image_canvas_element_prototype)
  local canvas = {}
  EoHS.add_hex_canvas(canvas, x, y, side, image_canvas_element_prototype)
  return canvas
end

EoHS.canvas_add_hex_border_25x25 = function(canvas, color, thickness)
  table.insert(canvas, {"line",{ x1 =  6, y1 =  0, x2 = 18, y2 =  0, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 18, y1 =  0, x2 = 24, y2 = 12, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 24, y1 = 12, x2 = 18, y2 = 24, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 18, y1 = 24, x2 =  6, y2 = 24, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 =  6, y1 = 24, x2 =  0, y2 = 12, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 =  0, y1 = 12, x2 =  6, y2 =  0, color = color, thickness = thickness }})
end
EoHS.canvas_hex_border_25x25 = function(color, thickness)
  local result = {}
  EoHS.canvas_add_hex_border_25x25(result, color, thickness)
  return result
end

EoHS.target_selection_button = function(dialog_context, x, y, image_mods, canvas_extras, select_func)
  local canvas
  local contents = {id = dialog_context.make_unique_id(), definition="down_arrow"}
  local result = dialog_context.button(contents, select_func or (function() end))
  local canvas = EoHS.hex_canvas(x, y)
  for i,canvas_image in ipairs(canvas) do
    canvas_image[2].name = canvas_image[2].name and canvas_image[2].name..(image_mods or "")
  end
  if canvas_extras then for i,canvas_extra in ipairs(canvas_extras) do
    table.insert(canvas, canvas_extra)
  end end
  local hover_canvas = EoHS.deep_copy(canvas)
  for i,canvas_image in ipairs(hover_canvas) do
    canvas_image[2].name = canvas_image[2].name and canvas_image[2].name.."~CS(50,50,0)"
  end
  EoHS.canvas_add_hex_border_25x25(hover_canvas, "255, 255, 0, 255", 2)
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, canvas, contents.id)
    wesnoth.set_dialog_canvas(3, hover_canvas, contents.id)
    wesnoth.set_dialog_canvas(4, hover_canvas, contents.id)
    -- TODO differentiate?
  end)
  
  return result
end

local function is_even(v) return (v % 2) == 0 end
EoHS.target_selection_grid = function(dialog_context, cx, cy, radius, image_mods_and_canvas_extras_func, select_func, move_center_func)
  local columns = {}
  local w,h = wesnoth.get_map_size()
  local x_min = math.max(1,cx-radius)
  local x_max = math.min(w,cx+radius)
  local x_button_min = is_even(cx-x_min) and x_min+1 or x_min
  local x_button_max = is_even(cx-x_max) and x_max-1 or x_max
  local y_min_even = math.max(1-1,cy-radius)
  local y_max_even = math.min(h+1,cy+radius)
  local y_min_odd = math.max(1-1,cy-radius)
  local y_max_odd = math.min(h+1,cy+radius)
  if is_even(cx) then
    if y_min_odd == 1-1 then y_min_even = y_min_even - 1 else y_min_odd = y_min_odd + 1 end
  else
    if y_max_even == h+1 then y_max_odd = y_max_odd + 1 else y_max_even = y_max_even - 1 end
  end
  for x=x_min,x_max do
    local rows = {}
    local y_min = is_even(x) and y_min_even or y_min_odd
    local y_max = is_even(x) and y_max_even or y_max_odd
    for y=y_min,y_max do
      local make_row = function(widget)
        table.insert(rows, r{c{ border="top,bottom", border_size=3, widget }})
      end
      if (x==x_button_min) and ((y==y_min) or (y==y_max)) then
        make_row(dialog_context.button({definition="left_arrow"}, function() move_center_func(-1,0) end))
      elseif (x==x_button_max) and ((y==y_min) or (y==y_max)) then
        make_row(dialog_context.button({definition="right_arrow"}, function() move_center_func(1,0) end))
      elseif (y==y_min) and ((x==x_button_min+1) or (x==x_button_max-1)) then
        make_row(dialog_context.button({definition="up_arrow"}, function() move_center_func(0,-1) end))
      elseif (y==y_max) and ((x==x_button_min+1) or (x==x_button_max-1)) then
        make_row(dialog_context.button({definition="down_arrow"}, function() move_center_func(0,1) end))
      elseif EoHS.location_is_on_the_map(x, y) and (EoHS.distance_between(cx, cy, x, y) <= radius) then
        local image_mods, canvas_extras = image_mods_and_canvas_extras_func(x, y)
        make_row(EoHS.target_selection_button(dialog_context, x, y, image_mods, canvas_extras, function() select_func(x,y) end))
      else
        make_row({"spacer",{height=25, width=25}})
      end
    end
    table.insert(columns, c{g(rows)})
  end
  return g{r(columns)}
end

EoHS.validity_color = function(validity)
  if validity == "valid" then
    return EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT
  elseif validity == "undesirable" then
    return "200, 200, 0, 255"
  elseif validity == "impossible" then
    return "255, 0, 0, 255"
  else
    EoHS.err("invalid validity")
  end
end

EoHS.label_with_validity = function(dialog_context, validity, wml_table, alignment)
  local result = EoHS.deep_copy(wml_table)
  if not result.id then
    result.id = dialog_context.make_unique_id()
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, { {"text",{
              x = (alignment == "left") and "0" or ((alignment == "right") and "(width-text_width)" or EoHS.macros.GUI__TEXT_HORIZONTALLY_CENTRED),
              y = "0",
              w = "(text_width)",
              h = "(text_height)",
              font_size = 14,
              color = EoHS.validity_color(validity),
              text = result.label,
    }} }, result.id)
  end)
  return {"label",result}
end

EoHS.make_dialog_context = function(enter_callback, cancel_callback)
  local top_level = {
    {"tooltip",{id="tooltip_large"}},
    {"helptip",{id="helptip_large"}},
  }

  local preshow_list = {}
  local preshow = function(func) table.insert(preshow_list, func) end
  local preshow_func = function() for i,func in ipairs(preshow_list) do func() end end
  
  local postshow_list = {}
  local postshow = function(func) table.insert(postshow_list, func) end
  local postshow_func = function() for i,func in ipairs(postshow_list) do func() end end
  
  local button_list = {}
  button_list[-1] = enter_callback
  button_list[-2] = cancel_callback
  local make_button_return_value = function(func)
    table.insert(button_list, func)
    return #button_list
  end
  
  local next_id_number = 0
  local make_unique_id = function()
    next_id_number = next_id_number + 1
    return "dialog_context_fiat_id_"..next_id_number
  end
  return {
    preshow = preshow,
    postshow = postshow,
    make_button_return_value = make_button_return_value,
    make_unique_id = make_unique_id,
    add_top_level = function(wml_tag) table.insert(top_level, wml_tag) end,
    button = function(wml_table, func)
      local result = EoHS.deep_copy(wml_table)
      result.return_value = make_button_return_value(func)
      return {"button",result}
    end,
    show = function(grid)
      --EoHS.err(wesnoth.debug(grid))
      table.insert(top_level, grid)
      button_list[wesnoth.show_dialog(top_level, preshow_func, postshow_func)]()
    end,
  }
end

--[[
EoHS.dialog_grid = function(rows, columns, ...)
  local result = { "grid", {} }
  local arg = {...}
  for r = 1, rows do
    local row = { "row", {} }
    for c = 1, columns do
      local column = { "column", {} }
      local idx = (r-1)*columns + c
      if idx > arg[n] then
      table.insert(column[2], arg[idx])
      table.insert(row[2], column)
    end
    table.insert(result[2], row)
  end
  return result
end
]]

>>)}

{EOHS_LUA_FILE (<<-- dialogs.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end

local fake_listbox_background = {"rectangle",{
  x = 0,
  y = 0,
  w = "(width)",
  h = "(height)",
  fill_color = EoHS.macros.GUI__BACKGROUND_COLOR_ENABLED,
}}
EoHS.fake_listbox_canvas_unselected = {fake_listbox_background}
EoHS.fake_listbox_canvas_selected = EoHS.deep_copy(EoHS.macros.GUI__LISTBOX_SELECTED_CELL)
table.insert(EoHS.fake_listbox_canvas_selected, 1, fake_listbox_background)

EoHS.fake_listbox_entry = function(dialog_context, size_str, canvas_extras, selected, switch_func)
  local canvas
  local contents = {id = dialog_context.make_unique_id(), label=size_str}
  local result
  if selected then
    result = {"label",contents}
    canvas = EoHS.deep_copy(EoHS.fake_listbox_canvas_selected)
  else
    result = dialog_context.button(contents, switch_func)
    canvas = EoHS.deep_copy(EoHS.fake_listbox_canvas_unselected)
  end
  for i,canvas_extra in ipairs(canvas_extras) do
    table.insert(canvas, canvas_extra)
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, canvas, contents.id)
    if not selected then
      wesnoth.set_dialog_canvas(3, canvas, contents.id)
      wesnoth.set_dialog_canvas(4, canvas, contents.id)
    end
  end)
  
  return result
end

EoHS.unit_info_canvas = function(unit, extra_strings)
  local image_size_str = "(if(height-6 < image_original_width, height-6, image_original_width))"
  local canvas = { {"image",{
    x = "((height - image_width) / 2)",
    y = "((height - image_height) / 2)",
    w = image_size_str,
    h = image_size_str,
    name = EoHS.unit_thumbnail(unit)
  }} }
  local strings = {}
  if unit.name ~= "" then
    table.insert(strings, unit.name)
  else
    table.insert(strings, unit.language_name)
  end
  table.insert(strings, "("..unit.x..","..unit.y..")")
  for i,extra_string in ipairs(extra_strings) do
    table.insert(strings, extra_string)
  end
  for i,string in ipairs(strings) do
    local buffer=5
    local fontgapwanted=2
    local numstr=#strings
    local fontsize=14
    local totalloss = buffer*2 + numstr*fontsize
    local heightwanted = totalloss+(numstr-1)*fontgapwanted
    local fontgapstr="(if(height<"..heightwanted..",(height-"..totalloss..")/"..(numstr-1)..","..fontgapwanted.."))"
    table.insert(canvas, {"text",{
      x = "(height-1)",
      y = "(("..(i-1).."*("..fontsize.."+"..fontgapstr.."))+"..buffer..")",
      w = "(text_width)",
      h = "(text_height)",
      font_size = fontsize,
      color = "221, 221, 221, 255",
      text = "('"..string.."')", -- TODO can we handle both singlequotes and parentheses in the source string?
    }})
  end
  return canvas
end

EoHS.hex_canvas = function(x, y)
  local canvas = { {"image",{
    x = "0",
    y = "0",
    w = "(width)",
    h = "(height)",
    name = EoHS.terrain_symbol_image(wesnoth.get_terrain(x, y))
  }} }
  
  local unit = EoHS.get_unit(x, y)
  if unit then
    canvas[1][2].name = canvas[1][2].name
    table.insert(canvas, {"image",{
      x = "0",
      y = "0",
      w = "(width)",
      h = "(height)",
      name = EoHS.unit_thumbnail(unit) -- Using the 58x58 default to exaggerate the unit size so it shows up better on the tiny button
    }})
  end

  return canvas
end

EoHS.canvas_add_hex_border_25x25 = function(canvas, color, thickness)
  table.insert(canvas, {"line",{ x1 =  6, y1 =  0, x2 = 18, y2 =  0, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 18, y1 =  0, x2 = 24, y2 = 12, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 24, y1 = 12, x2 = 18, y2 = 24, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 18, y1 = 24, x2 =  6, y2 = 24, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 =  6, y1 = 24, x2 =  0, y2 = 12, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 =  0, y1 = 12, x2 =  6, y2 =  0, color = color, thickness = thickness }})
end

EoHS.target_selection_button = function(dialog_context, x, y, image_mods, canvas_extras, select_func)
  local on_map = EoHS.location_is_on_the_map(x, y)
  local canvas
  local contents = {id = dialog_context.make_unique_id(), definition="down_arrow"}
  local result = dialog_context.button(contents, on_map and select_func or (function() end))
  local canvas = on_map and EoHS.hex_canvas(x, y) or {}
  for i,canvas_image in ipairs(canvas) do
    canvas_image[2].name = canvas_image[2].name and canvas_image[2].name..image_mods
  end
  for i,canvas_extra in ipairs(canvas_extras) do
    table.insert(canvas, canvas_extra)
  end
  local hover_canvas = EoHS.deep_copy(canvas)
  if on_map then
    for i,canvas_image in ipairs(hover_canvas) do
      canvas_image[2].name = canvas_image[2].name and canvas_image[2].name.."~CS(50,50,0)"
    end
    EoHS.canvas_add_hex_border_25x25(hover_canvas, "255, 255, 0, 255", 2)
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, canvas, contents.id)
    wesnoth.set_dialog_canvas(3, hover_canvas, contents.id)
    wesnoth.set_dialog_canvas(4, hover_canvas, contents.id)
    -- TODO differentiate?
  end)
  
  return result
end

EoHS.target_selection_grid = function(dialog_context, cx, cy, radius, select_func)
  local columns = {}
  for x=cx-radius,cx+radius do
    local rows = {}
    for y=cy-radius,cy+radius do
      if EoHS.distance_between(cx, cy, x, y) <= radius then
        local canvas_extras = {}
        local image_mods = ""
        if (x==cx) and (y==cy) then
          EoHS.canvas_add_hex_border_25x25(canvas_extras, "255, 0, 0, 255", 2)
          image_mods = "~CS(50,0,0)"
        end
        table.insert(rows, r{c{ border="top,bottom", border_size=3,
          EoHS.target_selection_button(dialog_context, x, y, image_mods, canvas_extras, function() select_func(x,y) end)
        }})
      end
    end
    table.insert(columns, c{g(rows)})
  end
  return g{r(columns)}
end

EoHS.string_with_validity = function(validity, string)
  local color
  if validity == "valid" then
    color = "#99FF99"
  elseif validity == "undesirable" then
    color = "#CCCC00"
  elseif validity == "impossible" then
    color = "#CC0000"
  else
    EoHS.err("invalid validity")
  end
  return "<span color='"..color.."'>"..string.."</span>"
end

EoHS.make_dialog_context = function(enter_callback, cancel_callback)
  local top_level = {
    {"tooltip",{id="tooltip_large"}},
    {"helptip",{id="helptip_large"}},
  }

  local preshow_list = {}
  local preshow = function(func) table.insert(preshow_list, func) end
  local preshow_func = function() for i,func in ipairs(preshow_list) do func() end end
  
  local postshow_list = {}
  local postshow = function(func) table.insert(postshow_list, func) end
  local postshow_func = function() for i,func in ipairs(postshow_list) do func() end end
  
  local button_list = {}
  button_list[-1] = enter_callback
  button_list[-2] = cancel_callback
  local make_button_return_value = function(func)
    table.insert(button_list, func)
    return #button_list
  end
  
  local next_id_number = 0
  local make_unique_id = function()
    next_id_number = next_id_number + 1
    return "dialog_context_fiat_id_"..next_id_number
  end
  return {
    preshow = preshow,
    postshow = postshow,
    make_button_return_value = make_button_return_value,
    make_unique_id = make_unique_id,
    add_top_level = function(wml_tag) table.insert(top_level, wml_tag) end,
    button = function(wml_table, func)
      local result = EoHS.deep_copy(wml_table)
      result.return_value = make_button_return_value(func)
      return {"button",result}
    end,
    label_with_validity = function(validity, wml_table)
      local result = EoHS.deep_copy(wml_table)
      if not result.id then
        result.id = make_unique_id()
      end
      
      preshow(function()
        wesnoth.set_dialog_canvas(1, { {"text",{
                  x = "0",
                  y = "0",
                  w = "(text_width)",
                  h = "(text_height)",
                  font_size = 14,
                  --colour = colour,
                  text = EoHS.string_with_validity(validity, result.label),
                  text_markup = true,
        }} }, result.id)
      end)
      return {"label",result}
    end,
    show = function(grid)
      --EoHS.err(wesnoth.debug(grid))
      table.insert(top_level, grid)
      button_list[wesnoth.show_dialog(top_level, preshow_func, postshow_func)]()
    end,
  }
end

--[[
EoHS.dialog_grid = function(rows, columns, ...)
  local result = { "grid", {} }
  for r = 1, rows do
    local row = { "row", {} }
    for c = 1, columns do
      local column = { "column", {} }
      local idx = (r-1)*columns + c
      if idx > arg[n] then
      table.insert(column[2], arg[idx])
      table.insert(row[2], column)
    end
    table.insert(result[2], row)
  end
  return result
end
]]

>>)}

this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- corridor_of_frost.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local get_corridor_attack = function(actor)
  for attack in helper.child_range(actor, "attack") do
    if attack.name == "EoHS_evocation_skill_ranged_attack" then
      local result = EoHS.deep_copy(attack)
      result.type = "cold"
      result.damage = math.floor(0.5+(result.damage * 0.60))
      result.number = math.floor(0.5+(result.number * 0.60))
      table.insert(EoHS.force_subtag(result, "specials"), EoHS.macros.WEAPON_SPECIAL_SLOW[1])
      return result
    end
  end
end

local path_types =
  {{1,1,1,1,1,1},
   {1,1,2,1,1,2},
   {1,2,1,2,1,2},}

EoHS.get_6hex_path_directions = function(x1,y1,x2,y2)
  if EoHS.distance_between(x1,y1,x2,y2) > 5 then return end
  for d,dir1 in ipairs({"n","ne","se","s","sw","nw"}) do
    for d,dir2 in ipairs({EoHS.direction_clockwise_from(dir1),EoHS.direction_counterclockwise_from(dir1)}) do
      for d,path_type in ipairs(path_types) do
        local x,y = x1,y1
        for i=1,5 do
          x,y = EoHS.get_loc_in_direction(x,y,(path_type[i]==1) and dir1 or dir2)
          if (x==x2) and (y==y2) then
            local result = {}
            for j=1,6 do table.insert(result,(path_type[j]==1) and dir1 or dir2) end
            return result
          end
        end
      end
    end
  end
end

local affected_hexes_func = function(parameters, known_or_actual)
  local actor = EoHS.get_unit(parameters.actor_id)
  local dirs = EoHS.get_6hex_path_directions(actor.x,actor.y,parameters.target_x,parameters.target_y)
  if not dirs then return {} end
  local x,y = actor.x,actor.y
  local result = {}
  for i=1,5 do
    x,y = EoHS.get_loc_in_direction(x,y,dirs[i])
    if not ((known_or_actual == "actual") and EoHS.location_is_passable or EoHS.location_is_known_passable)(x,y,actor.side) then break end
    table.insert(result, {x=x,y=y,visual="harm"})
  end
  return result
end

EoHS.make_spell("corridor_of_frost", {
  image = "attacks/iceball.png",
  name = _"Corridor of Frost",
  description = _"You strike each unit in a 5-hex-long path with a magical, cold, slowing attack, like your fireball attack but with 60% the normal strikes and damage. Also, every water or swamp hex in the path (not including fords) freezes into ice.",
  
  base_cost = { action_points = 7, mana = 9 },
  target_type = function(parameters) return {
    short_name = _"direction",
    name = _"Direction",
    details = "",
    validity = "valid"
  } end,
  
  affected_hexes = affected_hexes_func,
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    local actor = EoHS.get_unit(parameters.actor_id)
    local affected_hexes = affected_hexes_func(parameters, "known")
    make_aspect.type_value_and_details(_"Maximum length:", "5", "", (EoHS.distance_between(actor.x,actor.y,parameters.target_x,parameters.target_y) <= 5) and "valid" or "impossible")
    make_aspect.type_value_and_details(_"Length:", #affected_hexes, "", (affected_hexes[1]) and "valid" or "impossible")
    
    -- TODO un-duplicate code with Fireball (and to a lesser extent Energy Blast)
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_seen_unit(hex.x,hex.y,actor.side)
      if unit then
        local value,details="",""
        local validity = "valid"
        local name = EoHS.unit_appellation(unit)
        if EoHS.unit_is_immune_to_direct_spell_damage(unit) then
          value = _"None"
          details = EoHS.unit_is_immune_to_direct_spell_damage_description(unit)
        else
          if unit.side == actor.side then validity = "undesirable" end
          if not list_entry_only then
            local attack_context = EoHS.game_action_simulations.fleshed_out_attack_context({
              attacker={x=actor.x,y=actor.y,attack=get_corridor_attack(actor)},
              defender={x=unit.x,y=unit.y}})
            value = attack_context.attacker.damage.."-"..attack_context.attacker.attacks
          end
        end
        make_aspect.type_value_and_details(EoHS.substitute(_"Damage to $1|", {name}), value, details, validity)
      end
    end
  end,
  
  happen = function(parameters)
    --EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.face_towards(actor, parameters.target_x, parameters.target_y) -- combat will also do this, but the animations need to see the correct facing
    wesnoth.scroll_to_tile(actor.x, actor.y, true)
    local affected_hexes = affected_hexes_func(parameters, "actual")
    for i,hex in ipairs(affected_hexes) do
      EoHS.set_unit_variable(actor, "corridor_of_frost_x"..i, hex.x)
      EoHS.set_unit_variable(actor, "corridor_of_frost_y"..i, hex.y)
    end
    EoHS.update_unit_graphics(actor)
    EoHS.put_unit(actor, {immediate=true})
    for i,hex in ipairs(affected_hexes) do
      --wesnoth.scroll_to_tile(hex.x, hex.y, true)
      EoHS.set_unit_variable_immediate(actor, "corridor_of_frost_hex_number_"..i, true)
      EoHS.add_terrain_change(hex.x,hex.y,{name="freeze_water"})
      local unit = EoHS.get_unit(hex.x, hex.y)
      if unit then
        local attack_context = {
          attacker={x=actor.x,y=actor.y},
          defender={x=unit.x,y=unit.y}
        }
        EoHS.game_action_simulations.attack_unit(attack_context, {is_spell = true, spend_moves_and_attacks = false, update_context_func = function()
          local actor = EoHS.get_unit(parameters.actor_id)
          attack_context.attacker.attack = actor and get_corridor_attack(actor)
        end})
        actor = EoHS.get_unit(parameters.actor_id)
      else
        wesnoth.fire("animate_unit", {
          flag="attack",
          {"filter",{x=actor.x,y=actor.y}},
          hits = true,
          with_bars = true,
        })
      end
      EoHS.set_unit_variable_immediate(actor, "corridor_of_frost_hex_number_"..i)
    end
    
    actor = EoHS.get_unit(parameters.actor_id)
    if actor then
      for i,hex in ipairs(affected_hexes) do
        EoHS.set_unit_variable(actor, "corridor_of_frost_x"..i)
        EoHS.set_unit_variable(actor, "corridor_of_frost_y"..i)
      end
      EoHS.put_unit(actor, {immediate=true})
    end
    --EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.make_conditional_ability("energy_overload", function(unit)
  local energy_overload = EoHS.get_unit_variable(unit, "energy_overload")
  if energy_overload then
    return { "dummy", {
      name = EoHS.substitute(_"energy overload($1|%)", {energy_overload}),
      description = EoHS.substitute(_"This unit is $1|% weaker to arcane damage, but will recover 10% at the beginning of each turn.", {energy_overload}),
    }}
  end
end)

EoHS.update_energy_overload = function(unit)
  EoHS.update_conditional_abilities(unit)
  local energy_overload = EoHS.get_unit_variable(unit, "energy_overload")
  local modifications = EoHS.force_subtag(unit, "modifications")
  EoHS.remove_subtags(modifications, "object", "EoHS_energy_overload")
  if energy_overload then
    table.insert(modifications, {"object",{
      id="EoHS_energy_overload",
      {"effect",{apply_to="resistance",replace=false,{"resistance",{arcane=energy_overload}}}},
    }})
  end
  EoHS.set_subtag_attribute(unit, "resistance.arcane", nil)
end

EoHS.at_side_turn("energy_overload", function(units)
  for i,unit in ipairs(units.with_variable.energy_overload or {}) do
    if unit.side == wesnoth.current.side then
      local current = EoHS.get_unit_variable(unit, "energy_overload")
      current = current - 10
      EoHS.set_unit_variable_immediate(unit, "energy_overload", (current > 0) and current)
    end
  end
end)

-->>)}

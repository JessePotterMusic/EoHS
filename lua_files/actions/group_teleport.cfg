{EOHS_LUA_FILE (<<-- group_teleport.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local motion_list_func = function(parameters, known_or_actual)
  local result = {}
  local actor = EoHS.get_unit(parameters.actor_id)
  local record = function(x,y)
    local unit = (known_or_actual == "actual") and EoHS.get_unit(x,y) or EoHS.get_seen_unit(x,y,actor.side)
    if unit then
      local tx,ty = EoHS.same_relative_location(x,y,actor.x,actor.y,parameters.target_x,parameters.target_y)
      local cant_teleport, wont_teleport
      if EoHS.unit_is_immobile(unit) then
        wont_teleport = _"Group Teleport doesn't move immobile units."
      else
        if not EoHS.location_is_passable(tx,ty) then
          cant_teleport = _"It would be teleported into a wall."
        elseif not EoHS.wunit_can_move_on_hex(wesnoth.create_unit(unit),tx,ty) then
          cant_teleport = _"It can't move on its destination terrain."
        elseif (EoHS.distance_between(actor.x,actor.y,tx,ty) > 1) and ((known_or_actual == "actual") and EoHS.get_unit(tx,ty) or EoHS.get_seen_unit(tx,ty,actor.side)) then
          cant_teleport = _"It would be teleported onto another unit."
        end
      end
      table.insert(result, {x=x, y=y, tx=tx, ty=ty, wont_teleport=wont_teleport, cant_teleport=cant_teleport})
    end
  end
  record(actor.x,actor.y)
  for x,y in helper.adjacent_tiles(actor.x,actor.y) do
    record(x,y)
  end
  return result
end

EoHS.make_spell("group_teleport", {
  image = "halo/teleport-7.png",
  name = _"Group Teleport",
  description = _"Teleports you and every adjacent unit (friend or foe) to the target hex. Units can move after teleporting, but cannot attack or be attacked.",
  
  base_cost = { action_points=7, mana=22 },
  base_range = 6,
  target_type = EoHS.target_types.hex,
  
  affected_hexes = function(parameters, known_or_actual)
    local actor = EoHS.get_unit(parameters.actor_id)
    local motion_list = motion_list_func(parameters, known_or_actual)
    local result = {}
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        table.insert(result, {x=motion.x, y=motion.y, visual="change"})
        if (EoHS.distance_between(actor.x,actor.y,motion.tx,motion.ty) > 1) or not ((known_or_actual == "actual") and EoHS.get_unit(motion.tx,motion.ty) or EoHS.get_seen_unit(motion.tx,motion.ty,actor.side)) then
          table.insert(result, {x=motion.tx, y=motion.ty, visual="change", require_empty=true})
        end
      end
    end
    return result
  end,
  
  make_extra_attributes = function(parameters, make_aspect)
    local motion_list = motion_list_func(parameters, "known")
    for i,motion in ipairs(motion_list) do
      local unit = EoHS.get_unit(motion.x,motion.y)
      local value,details,validity
      validity = "valid"
      local name = (unit.name == "") and unit.language_name or unit.name
      if motion.wont_teleport then
        value = _"nowhere"
        details = motion.wont_teleport
      else
        value = EoHS.substitute(_"to ($1|,$2|)",{motion.tx,motion.ty})
        if motion.cant_teleport then
          details = motion.cant_teleport
          validity = "impossible"
        end
      end
      make_aspect.type_value_and_details(EoHS.substitute(_"$1| teleports...", {name}), value, details, validity)
    end
  end,
  
  happen = function(parameters)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    wesnoth.fire("sound", { name = "fanfare-short.wav" })
    
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

>>)}

this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- change_terrain.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local expansive_change_radius = 12

local change_types_allowed = {
  change_terrain = {default="grow",raise=true,sink=true,flatten=true,heat=true,cool=true,grow=true,rot=true,clear=true},
  earthworks = {default="raise",raise=true,sink=true,clear=true},
  construction = {default="castle",road=true,castle=true},
}
change_types_allowed.expansive_change = change_types_allowed.change_terrain
local change_shapes = {
  construction={},
  earthworks={radius=0},
  expansive_change={radius=12, duration=12},
  [0]     ={cost= 2, min_rank=1, radius= 0, desc = _"Single hex (permanent)"},
  [1]     ={cost= 6, min_rank=2, radius= 1, duration=12, desc = _"Diameter 3 (12 turns)"},
  [2]     ={cost=10, min_rank=3, radius= 2, duration=12, desc = _"Diameter 5 (12 turns)"},
  ne_sw   ={cost= 6, min_rank=3, dirs={"ne","sw"}, desc = _"/ Length 5 ne-sw line (permanent)" },
  nw_se   ={cost= 6, min_rank=3, dirs={"nw","se"}, desc = _"\\ Length 5 nw-se line (permanent)" },
   n_s    ={cost= 6, min_rank=3, dirs={"n" ,"s" }, desc = _"| Length 5 n-s line (permanent)" },
}
local change_shape_list = {
  0,1,2,"n_s","ne_sw","nw_se"
}

local change_type = function(parameters)
  return change_types_allowed[parameters.action_id][parameters.terrain_change_type] and parameters.terrain_change_type or change_types_allowed[parameters.action_id].default
end
local exact_change_type = function(parameters, i, hex, force_base_type)
  local t = force_base_type or change_type(parameters)
  if t == "castle" then
    if hex.x==parameters.src_x and hex.y==parameters.src_y then return "keep" end
  end
  if t == "road" then
    local dirs = EoHS.get_6hex_path_directions(parameters.src_x,parameters.src_y,parameters.target_x,parameters.target_y)
    return t.."_"..dirs[1+((i+5)%6)]
  end
  return t
end

local shape_allowed = function(shape, parameters)
  if parameters.force_shape then return shape == parameters.force_shape, parameters.force_shape end
  if (parameters.action_id ~= "change_terrain") then return shape == parameters.action_id, parameters.action_id end
  local actor = EoHS.get_unit(parameters.actor_id)
  local skillset = EoHS.get_unit_skillset(actor)
  local rank = EoHS.skillset_realm_rank(skillset, "nature_magic") or 1
  EoHS.assert(rank >= 1, "Someone has Change Terrain without having any Nature spells...?")
  if shape and rank >= change_shapes[shape].min_rank then return true end
  return false, math.min(2,rank-1)
end
local get_shape = function(parameters)
  local shape = parameters.shape
  local allowed, max = shape_allowed(shape, parameters)
  if shape and allowed then return shape end
  return max
end

local affected_hexes_func = function(parameters, known_or_actual)
  local t = change_type(parameters)
  local not_near_enemy = function(x, y)
    if (known_or_actual == "known") and not EoHS.hex_is_unfogged(x, y, parameters.side) then return false
    else
      local unit1 = EoHS.get_seen_or_actual_unit(x,y, parameters.side, known_or_actual)
      if unit1 and wesnoth.is_enemy(parameters.side, unit1.side) then return false end
    end
    for x2,y2 in helper.adjacent_tiles(x, y) do
      if (known_or_actual == "known") and not EoHS.hex_is_unfogged(x2, y2, parameters.side) then return false
      else
        local unit = EoHS.get_seen_or_actual_unit(x2,y2, parameters.side, known_or_actual)
        if unit and unit.zoc and wesnoth.is_enemy(parameters.side, unit.side) then return false end
      end
    end
    return true
  end
  if t == "castle" then
    local result = {}
    for i,hex in ipairs(EoHS.find_reach(parameters.src_x, parameters.src_y, EoHS.passable_only(parameters.side), 1)) do
      if not_near_enemy(hex.x, hex.y) then
        table.insert(result, {x=hex.x, y=hex.y, visual="change"})
      end
    end
    return result
  elseif t == "road" then
    return EoHS.get_6hex_path_affected_hexes_func(parameters, known_or_actual, not_near_enemy)
  else
    local result = {}
    local shape = get_shape(parameters)
    local radius = change_shapes[shape].radius
    if radius then
      for i,hex in ipairs(EoHS.find_reach(parameters.target_x, parameters.target_y, EoHS.known_or_actual_passable_only(parameters.side, known_or_actual), radius)) do
        table.insert(result, {x=hex.x, y=hex.y, visual="change", dist=hex.cost})
      end
    else
      local find_hex = function(x,y)
        table.insert(result, {x=x, y=y, visual="change"})
      end
      find_hex(parameters.target_x, parameters.target_y)
      for i,dir in ipairs(change_shapes[shape].dirs) do
        local x,y = parameters.target_x, parameters.target_y
        for i=1,2 do
          x,y = EoHS.get_loc_in_direction(x,y,dir)
          if not EoHS.location_is_known_or_actual_passable(x,y,parameters.side,known_or_actual) then break end
          find_hex(x,y)
        end
      end
    end
    return result
  end
end

EoHS.make_spell("change_terrain", {
  image = "attacks/crush-wose.png",
  name = _"Change Terrain",
  description = _"You change the terrain of one or more hexes. You can affect a diameter-3 circle at Nature rank 2, or a diameter-5 circle or a line at Nature rank 3. The mana cost depends on the shape you choose. With the larger shapes, the terrain will revert to its original state after 12 turns.",
  
  base_cost = function(parameters) return { action_points=6, mana = change_shapes[get_shape(parameters)].cost } end,
  base_range = 4,
  target_type = function(parameters)
    local t = change_type(parameters)
    if t == "castle" then return nil end
    if t == "road" then return EoHS.target_types.direction(parameters) end
    return EoHS.target_types.hex(parameters)
  end,
  
  affected_hexes = affected_hexes_func,
  
  -- TODO: can we have a checkbox "show changed terrains on map"
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    if parameters.action_id == "expansive_change" then return end
    if list_entry_only and (parameters.action_id == "construction") then return end
    if list_entry_only and (parameters.action_id == "change_terrain") then
      local radius = change_shapes[get_shape(parameters)].radius
      if radius and (radius > 0) then return end
    end
      
    -- TODO make this look nicer
    local affected_hexes = affected_hexes_func(parameters, "known")
    local num_changed = 0
    for i,hex in ipairs(affected_hexes) do
      local old_terrain = wesnoth.get_terrain(hex.x, hex.y)
      local new_terrain = EoHS.terrain_after_change(old_terrain, exact_change_type(parameters,i,hex))
        make_aspect.type_value_and_details(
          EoHS.substitute(_"$1|,$2|: $3| ->", {hex.x, hex.y, EoHS.terrain_name(old_terrain)}),
          EoHS.terrain_name(new_terrain),
          "")
      if new_terrain ~= old_terrain then num_changed = num_changed + 1 end
    end
    make_aspect.type_value_and_details(_"Hexes changed:", num_changed, "", (num_changed > 0) and "valid" or "impossible")
  end,
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    
    local rows = {}
    local make_shape_toggle = function(shape_choice, label)
      if shape_allowed(shape_choice, parameters) then
        table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, label, { {"text",{
          x=0,
          y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w="(text_width)",
          h="(text_height)",
          font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
          color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
          text = label,
        }} }, get_shape(parameters) == shape_choice, function() parameters.shape = shape_choice end) }})
      end
    end
    
    if parameters.action_id == "change_terrain" then
      for i,s in ipairs(change_shape_list) do
        make_shape_toggle(s, change_shapes[s].desc)
      end
    end
    
    local type_toggles = {}
    local update_type_toggles = function()
      for i,terrain_change_type in ipairs(type_toggles) do
        local id = "change_terrain_type_"..terrain_change_type
        wesnoth.set_dialog_value(change_type(parameters) == terrain_change_type, id)
      end
    end
    local make_type_toggle = function(terrain_change_type, label)
      if change_types_allowed[parameters.action_id][terrain_change_type] then
        table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, label, { {"text",{
          x=0,
          y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w="(text_width)",
          h="(text_height)",
          font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
          color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
          text = label,
        }} }, change_type(parameters) == terrain_change_type, function() parameters.terrain_change_type = terrain_change_type end) }})
      end
    end
    table.insert(rows, r{c{ {"spacer",{height=15}} }})
    make_type_toggle("raise", _"Raise: Deep water -> shallow water -> ford/swamp -> flat -> hills -> mountains")
    make_type_toggle("sink", _"Sink: Mountains -> hills -> flat -> ford/swamp -> shallow water (no deep water)")
    make_type_toggle("flatten", _"Flatten: Raise or Sink as appropriate")
    make_type_toggle("heat", _"Heat: Snow -> normal -> desert")
    make_type_toggle("cool", _"Cool: Desert -> normal -> snow")
    make_type_toggle("grow", _"Grow: Land (except mountains) -> forest -> great tree, water -> reef")
    make_type_toggle("rot", _"Rot: Land -> mushroom grove, water (except deep) -> swamp")
    make_type_toggle("clear", _"Clear: Remove forest/mushrooms/reef, great tree -> dead great tree -> removed")
    make_type_toggle("castle", _"Castle")
    make_type_toggle("road", _"Road")
    dialog_context.preshow(function()
      update_type_toggles()
    end)
    
    return g(rows)
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local shape = get_shape(parameters)
    local terrain_change_type = parameters.terrain_change_type or change_type(parameters)
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "entangle.wav" }) end)
    local affected_hexes = affected_hexes_func(parameters)
    for i,hex in ipairs(affected_hexes) do
      if (parameters.action_id ~= "expansive_change") or (EoHS.random("0.."..(expansive_change_radius+1)) > hex.dist) then
        EoHS.add_terrain_change(hex.x,hex.y,{ name=exact_change_type(parameters,i,hex,terrain_change_type), duration = change_shapes[shape].duration })
      end
    end
    
    if parameters.action_id == "earthworks" then EoHS.set_unit_attribute_immediate(EoHS.get_unit(parameters.actor_id), "moves", 0) end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.actions.earthworks = EoHS.deep_copy(EoHS.actions.change_terrain)
EoHS.actions.earthworks.name = _"Earthworks"
EoHS.actions.earthworks.is_spell = false
EoHS.actions.earthworks.description = _"You permanently change the terrain of one hex. This uses up your moves."
EoHS.actions.earthworks.base_cost = { action_points=6 }
EoHS.actions.earthworks.base_range = 1

EoHS.actions.construction = EoHS.deep_copy(EoHS.actions.change_terrain)
EoHS.actions.construction.image = "attacks/hammer.png"
EoHS.actions.construction.name = _"Construction"
EoHS.actions.construction.description = _"You build a castle around yourself or a five-hex-long road starting at yourself, except that you cannot alter terrain in an enemy's zone of control."
EoHS.actions.construction.base_cost = { action_points=7, mana=16 }
EoHS.actions.construction.base_range = nil

EoHS.actions.expansive_change = EoHS.deep_copy(EoHS.actions.change_terrain)
EoHS.actions.expansive_change.name = _"Expansive Change"
EoHS.actions.expansive_change.description = _"You change the terrain of a huge area for 12 turns. The change is randomly distributed and is denser near the middle of the area."
EoHS.actions.expansive_change.base_cost = { action_points=6, mana=18 }

EoHS.actions.expansive_change.base_range = 7
-->>)}

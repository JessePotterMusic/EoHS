{EOHS_LUA_FILE (<<-- change_terrain.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, known_or_actual)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(parameters.target_x, parameters.target_y, (known_or_actual == "actual") and EoHS.passable_only or EoHS.known_passable_only(wesnoth.current.side), parameters.radius)) do
    table.insert(result, {x=hex.x, y=hex.y, visual="change"})
  end
  return result
end

EoHS.make_spell("change_terrain", {
  image = "attacks/crush-wose.png",
  name = _"Change Terrain",
  description = _"Changes the terrain of one or more hexes. You can affect a diameter-3 circle at Nature rank 2 and a diameter-5 circle at Nature rank 3. Changing a single hex is permanent, but multiple hexes will revert to their original state after 9 turns.",
  
  base_cost = { action_points=6, mana=9 },
  base_range = 4,
  target_type = EoHS.target_types.hex,
  
  affected_hexes = affected_hexes_func,
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local actor = EoHS.get_unit(parameters.actor_id)
    local rank = EoHS.skillset_realm_rank(EoHS.get_unit_skillset(actor), "nature_magic")
    if not (parameters.radius and (parameters.radius < rank)) then parameters.radius = math.min(2,rank-1) end
    if not parameters.terrain_change_type then parameters.terrain_change_type = "grow" end
    EoHS.assert(rank >= 1, "Someone can cast Change Terrain without having any Nature spells...?")
    
    local rows = {}
    --[[local update_radius_toggles = function()
      for i=0,rank-1 do
        local id = "change_terrain_radius_"..i
        wesnoth.set_dialog_value(parameters.radius == i, id)
      end
    end]]
    local make_radius_toggle = function(radius, label)
      if rank > radius then
        table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, label, { {"text",{
          x=0,
          y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w="(text_width)",
          h="(text_height)",
          font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
          color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
          text = label,
        }} }, parameters.radius == radius, function() parameters.radius = radius end) }})
        --[[local id = "change_terrain_radius_"..radius
        table.insert(rows, r{c{ horizontal_alignment="left", EoHS.toggle_button(dialog_context, {id=id, label=label}) }})
        dialog_context.preshow(function()
          wesnoth.set_dialog_callback(function()
            parameters.radius = radius
            update_radius_toggles()
          end, id)
        end)]]
      end
    end
    
    make_radius_toggle(0, _"Single hex (permanent)")
    make_radius_toggle(1, _"Diameter 3 (9 turns)")
    make_radius_toggle(2, _"Diameter 5 (9 turns)")
    --[[dialog_context.preshow(function()
      update_radius_toggles()
    end)]]
    
    type_toggles = {}
    local update_type_toggles = function()
      for i,terrain_change_type in ipairs(type_toggles) do
        local id = "change_terrain_type_"..terrain_change_type
        wesnoth.set_dialog_value(parameters.terrain_change_type == terrain_change_type, id)
      end
    end
    local make_type_toggle = function(terrain_change_type, label)
      local id = "change_terrain_type_"..terrain_change_type
      table.insert(type_toggles, terrain_change_type)
      table.insert(rows, r{c{ horizontal_alignment="left", EoHS.toggle_button(dialog_context, {id=id, label=label}) }})
      dialog_context.preshow(function()
        wesnoth.set_dialog_callback(function()
          parameters.terrain_change_type = terrain_change_type
          update_type_toggles()
        end, id)
      end)
    end
    table.insert(rows, r{c{ {"spacer",{height=15}} }})
    make_type_toggle("raise", _"Raise: Deep water -> shallow water -> ford/swamp -> flat -> hills -> mountains")
    make_type_toggle("sink", _"Sink: Mountains -> hills -> flat -> ford/swamp -> shallow water (no deep water)")
    make_type_toggle("heat", _"Heat: Snow -> normal -> desert")
    make_type_toggle("cool", _"Cool: Desert -> normal -> snow")
    make_type_toggle("grow", _"Grow: Land (except mountains) -> forest -> great tree, water -> reef")
    make_type_toggle("rot", _"Rot: Land -> mushroom grove, water (except deep) -> swamp")
    make_type_toggle("clear", _"Clear: Remove forest/mushrooms/reef, great tree -> dead great tree -> removed")
    dialog_context.preshow(function()
      update_type_toggles()
    end)
    
    return g(rows)
  end,
  
  happen = function(parameters)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    wesnoth.fire("sound", { name = "entangle.wav" })
    local affected_hexes = affected_hexes_func(parameters)
    for i,hex in ipairs(affected_hexes) do
      EoHS.add_terrain_change(hex.x,hex.y,{ name=parameters.terrain_change_type, duration = (parameters.radius > 0) and 9 or nil })
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

>>)}

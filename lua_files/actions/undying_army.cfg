this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- undying_army.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, already_paid)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  for x,y in helper.adjacent_tiles(actor.x, actor.y) do
    local unit = EoHS.get_unit(x,y)
    if unit and (not wesnoth.is_enemy(unit.side, actor.side)) and (not EoHS.get_unit_variable(unit, "undying")) and (not EoHS.get_unit_variable(unit, "is_wizard")) and (not EoHS.get_unit_variable(unit, "is_crypt")) then table.insert(result, {x=x, y=y, visual="help"}) end
  end
  return result
end

EoHS.make_spell("undying_army", {
  image = "attacks/axe-undead.png",
  name = _"Undying Army",
  description = _"You enchant all adjacent non-wizard allies. They become unkillable undead; if they are reduced to 0 HP, they return with 8 HP at the end of your next turn, or the next time the hex is empty. They become killable again if you die, even if you will respawn as a lich.",
  
  is_enchantment = true,
  
  base_cost = { action_points=6, mana=24 },
  
  affected_hexes = function(parameters) return affected_hexes_func(parameters, false) end,
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    local affected_hexes = affected_hexes_func(parameters)
    make_aspect.type_value_and_details(_"Units affected", #affected_hexes, "", affected_hexes[1] and "valid" or "impossible")
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local affected_hexes = affected_hexes_func(parameters, true)
    local id = EoHS.unit_id(EoHS.get_unit(parameters.actor_id))
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit(hex.x, hex.y)
      EoHS.set_unit_variable(unit, "is_reanimated", true)
      EoHS.set_unit_variable(unit, "undying", true)
      EoHS.set_unit_variable(unit, "undyer_id", id)
      EoHS.update_all_type_adjustments(unit)
      EoHS.put_unit(unit, {immediate=true})
      wesnoth.float_label(unit.x, unit.y, "<span color='#000000'>".._"undying".."</span>")
    end
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "lich-hit-2.ogg" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-- TODO their facing, draw XP bar and overlays
local item_image = function(unit) return "misc/blank-hex.png~BLIT("..EoHS.unit_thumbnail(unit).."~SCALE(58,39),7,33)~BLIT(items/burial.png~CROP(5,0,67,72),0,0)" end
EoHS.at_side_turn_end(function()
  local list = EoHS.get_side_variable(wesnoth.current.side, "undying_units") or {}
  EoHS.remove_subtags(list, "unit", function(unit)
    if unit.respawn_delay > 0 then
      unit.respawn_delay = unit.respawn_delay - 1
    elseif EoHS.location_is_passable(unit.x, unit.y, unit.side) and not EoHS.get_unit(unit.x, unit.y) then
      unit.respawn_delay = nil
      EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
      EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
      return true
    end
    return false
  end)
  EoHS.set_side_variable(wesnoth.current.side, "undying_units", list)
end)
EoHS.unit_undies = function(unit)
  local list = EoHS.get_side_variable(unit.side, "undying_units") or {}
  unit.hitpoints = math.min(8, unit.max_hitpoints)
  unit.respawn_delay = (unit.side == wesnoth.current.side) and 1 or 0
  table.insert(list, {"unit",unit})
  EoHS.set_side_variable(unit.side, "undying_units", list)
  EoHS.remove_unit(unit.x, unit.y)
  EoHS.place_item({x=unit.x, y=unit.y, image=item_image(unit)})
end
EoHS.at_die(function(maybe_undyer)
  local id = EoHS.unit_id(maybe_undyer)
  if id then
    local list = EoHS.get_side_variable(maybe_undyer.side, "undying_units") or {}
    EoHS.remove_subtags(list, "unit", function(unit)
      if EoHS.get_unit_variable(unit, "undyer_id") == id then
        EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
        return true
      end
      return false
    end)
    EoHS.set_side_variable(maybe_undyer.side, "undying_units", list)
    local undyings_lost = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("undyer_id", id) })
    for i,unit in ipairs(undyings_lost) do
      EoHS.set_unit_variable(unit, "undying")
      EoHS.update_all_type_adjustments(unit)
      EoHS.put_unit(unit)
    end
  end
end)

-->>)}

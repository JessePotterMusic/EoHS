this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- zombie_swarm.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, known_or_actual)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  for x,y in helper.adjacent_tiles(actor.x, actor.y) do
    if not EoHS.get_unit(x,y) then -- TODO "or get_swarm", update handling of swarms everywhere
      table.insert(result, {x=x,y=y,visual="help"})
    end
  end
  return result
end

EoHS.make_spell("zombie_swarm", {
  image = "attacks/wail.png", -- TODO
  name = _"Zombie Swarm",
  -- TODO separate out swarm description
  description = _"You summon Walking Corpse onto each adjacent hex. They choose a random variation, depending on the terrain where they appear. These 'swarm' units are AI controlled and move at the end of your turn. Also, during your own turn, they are partially nonexistent, so that they don't get in the way of moving your regular units.",
  
  is_summon = true,
  
  base_cost = { action_points=7, mana=24 },
  
  affected_hexes = affected_hexes_func,
  
  make_extra_attributes = function(parameters, make_aspect)
    local actor = EoHS.get_unit(parameters.actor_id)
    local affected_hexes = affected_hexes_func(parameters, "known")
    make_aspect.type_value_and_details(_"Number summoned:", #affected_hexes, "", affected_hexes[1] and "valid" or "impossible")
  end,
  
  happen = function(parameters)
    EoHS.begin_casting(parameters.actor_id)
    local affected_hexes = affected_hexes_func(parameters, "actual")
    local actor = EoHS.get_unit(parameters.actor_id)
    for i,hex in ipairs(affected_hexes) do
      EoHS.create_swarm({x=hex.x,y=hex.y,side=actor.side,type="Walking Corpse"})
    end
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}

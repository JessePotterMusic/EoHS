this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- renounce_life.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_ritual("renounce_life", {
  image = "scenery/mausoleum01.png",
  name = _"Renounce Life",
  description = _"You die and return as a Lich. When you complete the ritual, an immobile Crypt unit appears in your place, and as long as the crypt survives, you will reappear next to it at the beginning of your turn after any time you die. As a lich, doing a normal attack costs only 3 AP. When you become a lich, your living alliances (if any) abandon you, although you may keep any units you have already recruited, and you regain any skill points you spent on them. If your crypt is on a keep, it can recruit undead on your behalf. You can cast Renounce Life again to move or replace your crypt.",
  
  turns = 3,
  
  affected_hexes = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    return {{x=actor.x,y=actor.y,visual="change"}}
  end,
  
  conclude = function(parameters, extras)
    local actor = EoHS.get_unit(parameters.actor_id)

    EoHS.animate_unit({ {"filter",{x=actor.x,y=actor.y}}, flag="death" })
    EoHS.remove_unit(actor.x, actor.y)
    
    local skillset = EoHS.get_unit_skillset(actor)
    if not EoHS.replace_alliances_with_era then
      for i,alliance in ipairs(EoHS.skills.alliances) do
        skillset[alliance.id] = (alliance.id == "petty_necromancer")
      end
    end
    EoHS.set_unit_variable(actor, "is_casting_a_spell")
    EoHS.set_unit_variable(actor, "is_lich", true)
    EoHS.update_all_type_adjustments(actor)
    EoHS.put_unit({
      x=actor.x, y=actor.y, side=actor.side,
      type = "Revenant",
      description = _"The crypt of a Lich. As long as this crypt exists, the lich cannot truly die.",
      canrecruit = true, extra_recruit = actor.extra_recruit,
      upkeep = "loyal",
    }, {allow_unknown_id = true, allow_new_location = true})
    local crypt = EoHS.get_unit(actor.x, actor.y)
    EoHS.set_unit_variable(crypt, "is_crypt", true)
    EoHS.set_unit_variable(crypt, "lich_id", EoHS.unit_id(actor))
    EoHS.set_variable("dead_lich_"..EoHS.unit_id(actor), actor)
    EoHS.update_all_type_adjustments(crypt)
  end,
})

EoHS.at_die(function(unit)
  if EoHS.get_unit_variable(unit, "is_lich") then
    EoHS.set_mount(unit)
    EoHS.set_unit_variable(unit, "is_mounted")
    EoHS.set_variable("dead_lich_"..EoHS.unit_id(unit), unit)
  end
end)

EoHS.at_side_turn("is_crypt", function(units)
  for i,unit in ipairs(units.with_variable.is_crypt or {}) do
    if unit.side == wesnoth.current.side then
      local lich_id = EoHS.get_unit_variable(unit, "lich_id")
      local dead_lich = EoHS.get_variable("dead_lich_"..lich_id)
      if dead_lich then
        dead_lich.type = "Lich"
        EoHS.set_unit_variable(dead_lich, "original_type", "Lich")
        EoHS.update_all_type_adjustments(dead_lich)
        local wunit = EoHS.create_wunit(dead_lich)
        local best_defense = 100
        local best_tiles = {}
        for x,y in helper.adjacent_tiles(unit.x,unit.y) do
          if EoHS.location_is_passable(x,y,unit.side) and EoHS.wunit_can_move_on_hex(wunit,x,y) and not wesnoth.get_unit(x,y) then
            local defense = wesnoth.unit_defense(wunit, wesnoth.get_terrain(x,y))
            if defense == best_defense then table.insert(best_tiles, {x=x,y=y}) end
            if defense < best_defense then
              best_defense = defense
              best_tiles = {{x=x,y=y}}
            end
          end
        end
        if best_tiles[1] then
          EoHS.set_variable("dead_lich_"..lich_id)
          local tile = best_tiles[EoHS.random(#best_tiles)]
          dead_lich.x = tile.x
          dead_lich.y = tile.y
          dead_lich.hitpoints = math.floor(dead_lich.max_hitpoints / 2)
          EoHS.put_unit(dead_lich, {allow_unknown_id = true, allow_new_location = true})
          EoHS.animate_unit({ {"filter",{x=dead_lich.x,y=dead_lich.y}}, flag="recruited" })
        end
      end
    end
  end
end)

-->>)}

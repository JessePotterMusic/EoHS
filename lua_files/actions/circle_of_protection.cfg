this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- circle_of_protection.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

-- Circle of Protection stuff has to be checked very frequently, so we make extra structures to optimize it.

local circle_of_protection_overlay = function(side)
  -- The circle has too many colors to TC the regular way, and I'm not sure I like its colors anyway...
  return "scenery/circle-magic-glow.png~GS()"..EoHS.TC_like_CS(side, function(c) return c-127 end).."~O(2.5)~SCALE(120,144)"
end
local circle_of_protection_table = {}
EoHS.get_circle_of_protection = function(x, y)
  local idx = x..","..y
  local cached = circle_of_protection_table[idx]
  if cached then return (cached ~= 0) and cached end
  local gotten = EoHS.get_hex_variable(x, y, "circle_of_protection")
  circle_of_protection_table[idx] = gotten or 0
  return gotten
end
EoHS.set_circle_of_protection = function(x, y, val)
  local old_val = EoHS.get_circle_of_protection(x, y)
  if old_val ~= val then
    EoHS.set_hex_variable(x, y, "circle_of_protection", val)
    circle_of_protection_table[x..","..y] = val or 0
    local list = EoHS.get_scenario_variable("circle_of_protection_list") or ""
    if old_val then
      list = string.gsub(list, "%["..x..","..y..","..old_val.."%]", "")
      EoHS.remove_item({x=x,y=y,halo=circle_of_protection_overlay(old_val)})
    end
    if val then
      list = list.."["..x..","..y..","..val.."]"
      -- TODO use seven items so that it can be layered under units
      EoHS.place_item ({x=x,y=y,halo=circle_of_protection_overlay(    val)})
    end
    EoHS.set_scenario_variable("circle_of_protection_list", list)
    local ally_x_lists,ally_y_lists,enemy_x_lists,enemy_y_lists = {},{},{},{}
    for side in ipairs(wesnoth.sides) do ally_x_lists[side]={}; ally_y_lists[side]={}; enemy_x_lists[side]={}; enemy_y_lists[side]={} end
    for cx,cy,cside in string.gmatch(list,"%[([^,]+),([^,]+),([^%]]+)%]") do
      cside=tonumber(cside)
      for side in ipairs(wesnoth.sides) do
        if wesnoth.is_enemy(side, cside) then
          table.insert(enemy_x_lists[side], cx)
          table.insert(enemy_y_lists[side], cy)
        else
          table.insert(ally_x_lists[side], cx)
          table.insert(ally_y_lists[side], cy)
        end
      end
    end
    for side in ipairs(wesnoth.sides) do
      EoHS.set_scenario_variable("allied_circle_of_protection_x_list_"..side, table.concat(ally_x_lists[side],","))
      EoHS.set_scenario_variable("allied_circle_of_protection_y_list_"..side, table.concat(ally_y_lists[side],","))
      EoHS.set_scenario_variable("enemy_circle_of_protection_x_list_"..side, table.concat(enemy_x_lists[side],","))
      EoHS.set_scenario_variable("enemy_circle_of_protection_y_list_"..side, table.concat(enemy_y_lists[side],","))
    end
  end
end
EoHS.location_is_enemy_circle_of_protection = function(x, y, side)
  local circle = EoHS.get_circle_of_protection(x, y)
  return (circle and wesnoth.is_enemy(circle, side))
end
--[=[
EoHS.update_circle_of_protection_ability = function(unit)
  local abilities = EoHS.force_subtag(unit, "abilities")
  EoHS.remove_subtags(abilities, "resistance", "EoHS_circle_of_protection")
  for k,v in pairs(EoHS.get_subtag(unit, "resistance")) do
    if type(v) == "number" then -- WotG compatibility hack
      table.insert(abilities, {"resistance",{
        id = "EoHS_circle_of_protection",
        apply_to = k,
        affect_self = true,
        active_on = "defense",
            value = 100-math.ceil(v/3),
        max_value = 100-math.ceil(v/3),
        {"filter",{
          x="$EoHS.scenario_vars.allied_circle_of_protection_x_list_"..unit.side,
          y="$EoHS.scenario_vars.allied_circle_of_protection_y_list_"..unit.side,
        }}
      }})
    end
  end
end

table.insert(EoHS.events, {
  name = "moveto",
  first_time_only = "no",
  { "filter", {
    --lua_function = "EoHS_wunit_is_in_enemy_circle_of_protection",
    x="$EoHS.scenario_vars.enemy_circle_of_protection_x_list_$this_unit.side||",
    y="$EoHS.scenario_vars.enemy_circle_of_protection_y_list_$this_unit.side||",
  }},
  { "lua", {
    code = [[--circle_of_protection destruction event
EoHS.begin_event(true, true)
EoHS.set_circle_of_protection(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
EoHS.end_event()]] -- TODO cooler animation?
  }},
})
]=]


-- TODO their facing, draw XP bar and overlays
local item_image = function(unit) return "misc/blank-hex.png~BLIT("..EoHS.unit_thumbnail(unit)..",7,7)" end
EoHS.hide_unit_in_circle_of_protection = function(unit)
  EoHS.set_hex_variable(unit.x, unit.y, "circle_of_protection_hidden_unit", unit)
  EoHS.remove_unit(unit.x, unit.y)
  EoHS.place_item({x=unit.x, y=unit.y, image=item_image(unit), visible_in_fog=false})
end
EoHS.return_unit_in_circle_of_protection = function(unit)
  if EoHS.location_is_passable(unit.x, unit.y) and not wesnoth.get_unit(unit.x, unit.y) then
    EoHS.set_hex_variable(unit.x, unit.y, "circle_of_protection_hidden_unit")
    EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
  end
end
EoHS.hide_circle_of_protection_unit = function(unit)
  EoHS.set_hex_variable(unit.x, unit.y, "circle_of_protection_unit", unit)
  EoHS.remove_unit(unit.x, unit.y)
end
EoHS.grab_circle_of_protection_unit = function(x, y, side)
  local unit = EoHS.get_hex_variable(x, y, "circle_of_protection_unit")
  if unit then
    EoHS.set_hex_variable(x, y, "circle_of_protection_unit")
  else
    unit = {
      x=x,
      y=y,
      side=side,
      type="Fire Guardian",
    }
    EoHS.set_unit_variable(unit, "is_circle_of_protection", true)
    EoHS.set_unit_variable(unit, "not_a_real_leader", true)
    EoHS.update_all_type_adjustments(unit)
  end
  unit.canrecruit = EoHS.get_hex_variable(x, y, "circle_of_protection_hidden_unit.canrecruit")
  return unit
end

EoHS.update_circle_of_protection_units = function()
  local w,h = wesnoth.get_map_size()
  for x=1,w do for y=1,h do
    local c = EoHS.get_circle_of_protection(x,y)
    if c then
      local unit = EoHS.get_unit(x,y)
      if wesnoth.is_enemy(c, wesnoth.current.side) then
        if unit and not EoHS.get_unit_variable(unit, "is_circle_of_protection") then
          EoHS.hide_unit_in_circle_of_protection(unit)
        end
        if not (unit and EoHS.get_unit_variable(unit, "is_circle_of_protection")) then
          EoHS.put_unit(EoHS.grab_circle_of_protection_unit(x,y,c), {allow_unknown_id = true, allow_new_location = true})
        end
      else
        if unit and EoHS.get_unit_variable(unit, "is_circle_of_protection") then
          EoHS.hide_circle_of_protection_unit(unit)
        end
        local return_unit = EoHS.get_hex_variable(x, y, "circle_of_protection_hidden_unit")
        if return_unit then
          EoHS.return_unit_in_circle_of_protection(return_unit)
        end
        if c == wesnoth.current.side then
          local circle_unit = EoHS.get_hex_variable(x, y, "circle_of_protection_unit")
          if circle_unit and circle_unit.hitpoints < circle_unit.max_hitpoints then
            EoHS.set_hex_variable(x, y, "circle_of_protection_unit.hitpoints", math.min(circle_unit.max_hitpoints, circle_unit.hitpoints + 12))
          end
        end
      end
    end
  end end
end
EoHS.destroy_circle_of_protection = function(unit)
  EoHS.set_circle_of_protection(unit.x, unit.y)
  EoHS.remove_unit(unit.x,unit.y)
  local return_unit = EoHS.get_hex_variable(unit.x, unit.y, "circle_of_protection_hidden_unit")
  if return_unit then
    EoHS.return_unit_in_circle_of_protection(return_unit)
  end
end

EoHS.make_spell("circle_of_protection", {
  image = "icons/stone_ring.png",
  name = _"Circle of Protection",
  description = _"You enchant a hex with a circle of protection. The circle blocks enemy wizards' magic as if it was a solid wall, and also blocks the harmful effects of your own and allies' spells. On enemy turns, the circle acts as a unit with 50 HP, 50% defense and regenerates +12. You can leave a real unit in the circle, and the enemy will have to destroy the circle before they can engage the real unit.",
  
  is_enchantment = true,
  
  base_cost = { action_points=7, mana=4 },
  base_range = 1,
  target_type = function(parameters)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,parameters.side)
    local circle = EoHS.get_circle_of_protection(parameters.target_x,parameters.target_y)
    local details,validity = "","valid"
    if circle and not wesnoth.is_enemy(parameters.side, circle) then
      validity = "impossible"
      details = _"There is already an allied circle of protection there."
    elseif not EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y) then
      validity = "impossible"
      details = _"You can't tell if there's an enemy there."
    elseif unit and wesnoth.is_enemy(unit.side, parameters.side) then
      validity = "impossible"
    end
    return {
      short_name = _"ally or hex",
      name = _"Ally or empty hex",
      details = details,
      validity = validity
    }
  end,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help",require_no_invisible_enemy=true}}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "magic-holy-miss-2.ogg" }) end)
    EoHS.set_circle_of_protection(parameters.target_x, parameters.target_y, parameters.side)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}

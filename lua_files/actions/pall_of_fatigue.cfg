this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- pall_of_fatigue.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local radius = function(parameters)
  return EoHS.apply_farseer(9, parameters)
end
local relevant_hexes = function(parameters, known_or_actual)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(parameters.src_x, parameters.src_y, EoHS.known_or_actual_passable_only(parameters.side, known_or_actual), radius(parameters))) do
    local unit = EoHS.get_seen_or_actual_unit(hex.x, hex.y, parameters.side, known_or_actual)
    table.insert(result, {
      x=hex.x, y=hex.y,
      dist=hex.cost,
    })
  end
  return result
end
local get_fatigue_attack = function(att, dist, max_dist)
  local attack = EoHS.deep_copy(att)
  attack.description = _"pall of fatigue"
  local rel = max_dist*max_dist*3
  attack.damage = math.floor(
    (
      (40+attack.damage*attack.number)*(rel-(dist*dist*2))
    +(rel*5)) / (rel*10)
  )
  attack.number = 2
  table.insert(EoHS.force_subtag(attack, "specials"), {"dummy",{ id="EoHS_cant_kill" }})
  return attack
end

EoHS.make_spell("pall_of_fatigue", {
  image = "attacks/staff-necromantic.png",
  name = _"Pall of Fatigue",
  description = _"Every enemy unit within nine hexes of you is subject to a cold magic attack, like your normal chill wave attack but weaker, and it can't kill units (like poison). The damage is highest near the middle and lower at the edges. You can't move on the same turn you cast Pall of Fatigue.",
  
  base_cost = { action_points=6, mana=6 },
  is_attack_spell = true,
  
  no_target_but_show_UI = true,
  
  commit = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = EoHS.skill_attack(actor, "necromancy")
    if attack then table.insert(parameters, {"attack", attack}) end
  end,
  
  target_dependent_stuff = function(parameters, extras)
    local result = {}
    local actor = EoHS.get_unit(parameters.actor_id)
    if actor.moves < actor.max_moves then
      table.insert (result, {"text", {forbidden = true, doesnt_affect_scribing = true, text =_"You already moved to this turn, so you can't cast Pall of Fatigue."}})
    end
        
    if not (extras and extras.targeting_UI_unneeded) then
      local attack = EoHS.get_subtag(parameters, "attack")
      for i,hex in ipairs(relevant_hexes(parameters, "known")) do
        local unit = EoHS.get_seen_unit (hex.x, hex.y)
        if not (unit and not wesnoth.is_enemy (unit.side, parameters.side)) then
          EoHS.add_attack_stuff (result, parameters, hex.x, hex.y, get_fatigue_attack(attack, hex.dist, radius(parameters)))
        end
      end
      for i,hex in ipairs(affected_hexes (parameters, "actual")) do
        table.insert (result, {"visible_effect", {
          x= hex.x, y= hex.y,
        }})
      end
    end
    return result
  end,
  
  happen = function(parameters)
    local affected_hexes = relevant_hexes(parameters, "actual")
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = EoHS.get_subtag(parameters, "attack")
    actor.moves = 0
    
    local casting_image_1 = EoHS.unit_casting_image_stuff(actor, 1)
    local casting_image_2 = EoHS.unit_casting_image_stuff(actor, 2)
    local dx, dy = EoHS.pixels_to_hex(actor.x, actor.y, parameters.target_x, parameters.target_y)
    local animation = {
      base_score = 10,
      offset=0,
      start_time = -600,
      { "frame", { image=casting_image_1, duration=200, }},
      { "frame", { image=casting_image_2, duration=800, sound = "wail-long.wav", }},
      { "frame", { image=casting_image_1, duration=200, }},
      fatigue_start_time = -600,
      { "fatigue_frame", { image="halo/fire-aura.png~CS(-255,-255,-255)~SCALE(1400,1400)", duration=1200, alpha="0~1,1~0" }},
    }
    EoHS.add_temporary_anims(actor, { {"attack_anim", animation} })
    EoHS.put_unit(actor, {immediate=true})
    
    local attacks = {}
    EoHS.shuffle(affected_hexes)
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit (hex.x, hex.y)
      if unit and wesnoth.is_enemy(unit.side, parameters.side) then
        local info = EoHS.spell_attack_info(actor, hex.x, hex.y, get_fatigue_attack(attack, hex.dist, radius(parameters)))
        if info then table.insert(attacks, info) end
      end
    end
    
    EoHS.parallel_attacks_or_animate_once(parameters, attacks)
    
    actor = EoHS.get_unit(parameters.actor_id)
    if actor then
      EoHS.remove_temporary_anims(actor)
      EoHS.put_unit(actor, {immediate=true})
    end
  end,
})

-->>)}

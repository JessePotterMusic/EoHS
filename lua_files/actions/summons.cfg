this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- summons.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

EoHS.give_random_traits = function(unit, trait_list, num_traits)
  local modifications = EoHS.force_subtag(unit, "modifications")
  EoHS.assert(#trait_list >= num_traits, "trying to give more traits than are available")
  local remaining_traits = EoHS.deep_copy(trait_list)
  while num_traits > 0 do
    local idx = EoHS.random("1.."..#remaining_traits)
    table.insert(modifications, EoHS.macros["TRAIT_"..remaining_traits[idx]][1])
    table.remove(remaining_traits, idx)
    num_traits = num_traits - 1
  end
end

EoHS.update_summon_trability_info = function(unit, is_after_turn_end_event, summoner_died)
  local summoner = (not summoner_died) and EoHS.get_unit(EoHS.get_unit_variable(unit, "summoner_id"))
  local transfer = summoner and EoHS.get_wizard_setting(summoner, "summon_experience_transfer")
  if transfer == 0 then transfer = nil end
  local set_name_and_desc = function(trability)
    if trability.id == "EoHS_summon" then
      local disappears_after_turns = EoHS.get_unit_variable(unit, "disappears_after_turns")
      disappears_after_turns = disappears_after_turns and (disappears_after_turns + (is_after_turn_end_event and 1 or 0))
      local disappears_turn = disappears_after_turns and (wesnoth.current.turn+disappears_after_turns)
      if transfer and disappears_after_turns then
        trability.name = EoHS.substitute(_"summoned($1|)", {disappears_after_turns})
        trability.description = EoHS.substitute(_"Gives summoner $1|% of its XP, disappears at the end of your turn $2|", {transfer, disappears_turn})
      elseif disappears_after_turns then
        trability.name = EoHS.substitute(_"summoned($1|)", {disappears_after_turns})
        trability.description = EoHS.substitute(_"Disappears at the end of your turn $1|", {disappears_turn})
      elseif transfer then
        trability.name = _"summoned"
        trability.description = EoHS.substitute(_"Gives summoner $1|% of its XP", {transfer})
      else
        trability.name = _"summoned"
        trability.description = ""
      end
    end
  end
  for i,subtag in ipairs(EoHS.get_subtags(unit, "modifications.trait"                         )) do set_name_and_desc(subtag) end
  for i,subtag in ipairs(EoHS.get_subtags(unit, "modifications.advance.effect.abilities.dummy")) do set_name_and_desc(subtag) end
  for i,subtag in ipairs(EoHS.get_subtags(unit, "abilities.dummy"                             )) do set_name_and_desc(subtag) end
end
EoHS.at_die(function(maybe_summoner)
  local id = EoHS.unit_id(maybe_summoner)
  if id then
    local summons = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("summoner_id", id) })
    for i,unit in ipairs(summons) do
      EoHS.update_summon_trability_info(unit, false, true)
      EoHS.put_unit(unit)
    end
  end
end)

EoHS.max_summon_duration_overlays = 7
EoHS.summon_overlay = "misc/loyal-icon.png~CS(-50,80,100)"

EoHS.summon_unit = function(parameters, summon_specification, x, y, cost_paid, summoner, just_return)
  local unit = EoHS.deep_copy(summon_specification)

  unit.x = x
  unit.y = y
  unit.side = summoner.side
  unit.moves = 0
  unit.attacks_left = 0
  
  EoHS.set_unit_variable(unit, "is_summon", true)
  EoHS.set_unit_variable(unit, "summoner_id", EoHS.unit_id(summoner))
  if parameters.forceful then EoHS.set_unit_variable(unit, "forceful_summon", true) end
  
  local duration = EoHS.get_wizard_setting(summoner, "summon_duration")
  if type(duration) == "number" then EoHS.set_unit_variable(unit, "disappears_after_turns", duration) end
  
  local type_cfg = EoHS.get_unit_type(unit.type)
  local num_traits = type_cfg.num_traits or wesnoth.races[type_cfg.race].num_traits or 0
  -- Monsters should have traits anyway...
  if EoHS.get_unit_type(unit.type).race == "monster" then
    if unit.type == "Fire Guardian" then
      EoHS.give_random_traits(unit, {"DIM","SLOW"}, 1)
      num_traits = 2 -- Special case, also covers "elemental"
    elseif unit.type == "Fire Dragon" then
      -- No traits - they're already entirely variation!
    elseif EoHS.get_unit_variable(unit, "is_swarm_nest") then
      -- No traits
    else
      EoHS.give_random_traits(unit, {"STRONG","INTELLIGENT","QUICK","RESILIENT"}, 2)
      num_traits = 2
    end
  end
  
  local modifications = EoHS.force_subtag(unit, "modifications")
  if num_traits == 0 then
    table.insert(modifications, {"trait",{
      id = "EoHS_summon",
    }})
  else
    table.insert(modifications, {"advance",{ {"effect",{ apply_to = "new_ability", {"abilities",{ {"dummy",{
      id = "EoHS_summon",
    }} }} }} }})
  end
  EoHS.update_summon_trability_info(unit)
  
  if cost_paid and cost_paid.gold then
    EoHS.set_unit_variable(unit, "gold_paid", cost_paid.gold)
  end
  if cost_paid and cost_paid.mana then
    EoHS.set_unit_variable(unit, "mana_paid", cost_paid.mana)
  end
  --local wizard_symbol = helper.get_child(circumstances.caster, "variables").wizard_symbol
  --local image_width, image_height = image_dimensions(wizard_symbol)
  --add_overlay(summon, "misc/blank-hex.png~BLIT("..wizard_symbol..","..math.floor(20 - (image_width / 2))..",12)")
  
  if just_return then return unit end
  return EoHS.fake_recruit({unit})[1]
end

EoHS.tick_down_summon_duration = function(unit, do_on_map)
  local disappears_after_turns = EoHS.get_unit_variable(unit, "disappears_after_turns")
  if disappears_after_turns then
    if disappears_after_turns <= 0 then
      return true
    else
      EoHS.set_unit_variable(unit, "disappears_after_turns", disappears_after_turns - 1)
      EoHS.update_summon_trability_info(unit, true)
      EoHS.update_unit_overlays(unit)
      if do_on_map then EoHS.put_unit(unit) end
    end
  end
end

EoHS.fake_recruit = function(units)
  for i,unit in ipairs(units) do
    unit = EoHS.create_wunit(unit).__cfg
    units[i] = unit
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = nil
    EoHS.assert(not wesnoth.get_unit(unit.x,unit.y), "EoHS.fake_recruit overwriting an existing unit")
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
  end
  for i,unit in ipairs(units) do
    EoHS.fire_event("prerecruit", unit.x, unit.y)
  end
  local animation_tag
  for i,unit in ipairs(units) do
    unit = EoHS.get_unit(unit.x, unit.y)
    if unit then
      local anim = { flag = "recruited", { "filter", { x=unit.x, y=unit.y }} }
      if animation_tag then table.insert(animation_tag, {"animate",anim}) else animation_tag = anim end
    end
  end
  local result_units = {}
  if animation_tag then
    EoHS.animate_unit(animation_tag, {dont_redraw_first=true})
    for i,unit in ipairs(units) do
      unit = EoHS.get_unit(unit.x, unit.y)
      if unit then
        EoHS.fire_event("recruit", unit.x, unit.y)

        unit = EoHS.get_unit(unit.x, unit.y)
        if unit then
          wesnoth.fire("redraw", { side = unit.side })
          table.insert(result_units, unit)
        end
      end
    end
  end
  return result_units
end

EoHS.fake_recall = function(units)
  for i,unit in ipairs(units) do
    EoHS.assert(not wesnoth.get_unit(unit.x,unit.y), "EoHS.fake_recall overwriting an existing unit")
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
  end
  for i,unit in ipairs(units) do
    EoHS.fire_event("prerecall", unit.x, unit.y)
  end
  local animation_tag
  for i,unit in ipairs(units) do
    unit = EoHS.get_unit(unit.x, unit.y)
    if unit then
      local anim = { flag = "recruited", { "filter", { x=unit.x, y=unit.y }} }
      if animation_tag then table.insert(animation_tag, {"animate",anim}) else animation_tag = anim end
    end
  end
  if animation_tag then
    EoHS.animate_unit(animation_tag, {dont_redraw_first=true})
    for i,unit in ipairs(units) do
      unit = EoHS.get_unit(unit.x, unit.y)
      if unit then
        EoHS.fire_event("recall", unit.x, unit.y)

        unit = EoHS.get_unit(unit.x, unit.y)
        if unit then
          EoHS.standardize_unit(unit)
          wesnoth.fire("redraw", { side = unit.side })
          return unit
        end
      end
    end
  end
end

EoHS.summoning_spell_description = function(typename)
  return EoHS.substitute(_"You summon a $1| onto the target hex.", {typename})
end

EoHS.make_summoning_spell_extra_attributes = function(parameters, make_aspect)
  local actor = EoHS.get_unit(parameters.actor_id)
  
  local summon_transfer_desc = ""
  local summon_experience_transfer = EoHS.get_wizard_setting(actor, "summon_experience_transfer")
  if summon_experience_transfer ~= 0 then
    local needs_rounding = (summon_experience_transfer % 100) ~= 0
    if needs_rounding then summon_transfer_desc = EoHS.substitute(_" Whenever your summon earns experience, $1|% of it (rounded down) is transferred to you.", {summon_experience_transfer})
    else                   summon_transfer_desc = EoHS.substitute(_" Whenever your summon earns experience, $1|% of it is transferred to you."               , {summon_experience_transfer}) end
  end
  local summon_duration = EoHS.get_wizard_setting(actor, "summon_duration")
  local summon_duration_desc = ""
  if summon_duration ~= "infinite" then
    summon_duration_desc = EoHS.substitute(_" Summoned creatures can act for $1| turns, and disappear at the end of the last turn.", {summon_duration})
  end
  make_aspect.type_and_details(_"Summon:", EoHS.substitute(_"Summoning is like recruiting, but you don't have to be in a castle.$1|$2|",{summon_transfer_desc,summon_duration_desc}))
end

local set_summoning_shared = function(id, specification, action)
  action.is_summon = true
  local prototype_spec = EoHS.deep_copy(specification)
  prototype_spec.random_traits = false
  prototype_spec.random_gender = false
  prototype_spec.generate_name = false
  local wprototype = EoHS.create_wunit(prototype_spec)
  local prototype = wprototype.__cfg
  EoHS.set_unit_variable(prototype, "is_summon", true)
  EoHS.update_all_type_adjustments(prototype)
  prototype.moves = prototype.max_moves
  prototype.hitpoints = prototype.max_hitpoints
  
  action.summon_prototype_image = EoHS.unit_thumbnail(prototype, true)
  if not action.image then
    action.image = action.summon_prototype_image
  elseif (type(action.image) == "table") and not action.image.image_modded then
    action.image.image_modded = action.summon_prototype_image
  end
  local typename = EoHS.substitute("$1|", {EoHS.unit_typename(prototype)}) -- can't examine tstrings, so convert them
  if not action.name        then action.name        = string.match(typename, " ") and typename or EoHS.substitute(_"Summon $1|", {typename}) end
  if not action.description then action.description = EoHS.summoning_spell_description(typename) end
  if action.description_addendum then action.description = action.description.." "..action.description_addendum end
  if not action.base_range  then action.base_range  = 1 end
  -- No default AP cost - I want to have to specify those
  if (type(action.base_cost) == "table") and not action.base_cost.mana then action.base_cost.mana = prototype.cost end
  if not action.make_extra_attributes then action.make_extra_attributes = EoHS.make_summoning_spell_extra_attributes end
  
  if not action.left_column_grid then action.left_column_grid = function(dialog_context, parameters, extras)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    return EoHS.unit_preview_pane(dialog_context, prototype, {image_override=extras.action_image})
  end end
  return prototype, wprototype
end

EoHS.make_summoning_spell = function(id, specification, action)
  local prototype, wprototype = set_summoning_shared(id, specification, action)
  if not action.target_type then action.target_type = function(parameters)
    local details,validity = "","valid"
    if (not EoHS.wunit_can_move_on_hex(wprototype, parameters.target_x, parameters.target_y)) and not EoHS.unit_is_immobile(prototype) then
      details = _"You can only summon a unit onto a hex where it can move."
      validity = "impossible"
    elseif not EoHS.hex_is_unfogged(parameters.target_x, parameters.target_y) then
      details = _"You can't tell if that hex is occupied."
      validity = "impossible"
    elseif EoHS.get_seen_unit(parameters.target_x, parameters.target_y, parameters.side) then
      validity = "impossible"
    end
    return {
      short_name = _"empty hex",
      name = _"Empty hex",
      details = details,
      validity = validity
    }
  end end
  if not action.affected_hexes then action.affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help",require_no_invisible_enemy=true}}
  end end
  
  if not action.happen then action.happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    EoHS.summon_unit(parameters, specification, parameters.target_x, parameters.target_y, extras.cost_paid, EoHS.get_unit(parameters.actor_id))
    
    EoHS.finish_casting(parameters.actor_id)
  end end
  
  EoHS.make_spell(id, action)
end

EoHS.space_making_path = function(src_x, src_y, unit_pushing_cost_func)
  local best_endpoints = {}
  local best_cost
  local frontier = EoHS.priority_queue(function(hex) return -hex.cost end)
  local found_hexes = {}
  local find_hex = function(x,y,prev,cost)
    local idx = x..","..y
    local f = found_hexes[idx]
    local replace
    if f then
      if cost == f.cost then table.insert(f.prev, prev) end
      if cost < f.cost then replace = true end
    else replace = true end
    if replace then
      f = {x=x,y=y,prev={prev},cost=cost}
      found_hexes[idx] = f
      frontier.insert(f)
    end
  end
  find_hex(src_x, src_y, nil, 0)
  while frontier.top() do
    local start = frontier.pop()
    local unit = EoHS.get_unit(start.x, start.y)
    if best_cost then
      EoHS.assert(start.cost >= best_cost, "algorithm is wrong")
      if (start.cost == best_cost) and not unit then 
        table.insert(best_endpoints, start)
      end
      if start.cost > best_cost then break end
    else
      local f = found_hexes[start.x..","..start.y]
      if f == start then
        if unit then
          local wunit = wesnoth.get_unit(start.x, start.y)
          for x,y in helper.adjacent_tiles(start.x, start.y) do
            local step_cost = unit_pushing_cost_func(unit, x, y, wunit)
            if step_cost then
              find_hex(x,y,start,start.cost+step_cost)
            end
          end
        else
          best_cost = start.cost
          best_endpoints = {start}
        end
      end
    end
  end

  if best_cost then
    local result = {}
    local endpoint = best_endpoints[EoHS.random("1.."..#best_endpoints)]
    while endpoint.prev[1] do
      table.insert(result, endpoint)
      local prev = endpoint.prev[EoHS.random("1.."..#endpoint.prev)]
      endpoint = prev
    end
    table.insert(result, endpoint)
    return result
  end
end

EoHS.make_summoning_ritual = function(id, specification, action)
  local prototype, wprototype = set_summoning_shared(id, specification, action)
  
  if not action.target_type then action.target_type = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local details,validity = "","valid"
    local unit = EoHS.get_seen_unit(parameters.target_x, parameters.target_y, parameters.side)
    if (not EoHS.wunit_can_move_on_hex(wprototype, parameters.target_x, parameters.target_y)) and not EoHS.unit_is_immobile(prototype) then
      details = _"You can only summon a unit onto a hex where it can move."
      validity = "impossible"
    elseif (parameters.target_x == actor.x) and (parameters.target_y == actor.y) then
      details = _"You can't summon a unit at your own location."
      validity = "impossible"
    elseif unit and EoHS.unit_is_immobile(unit) then
      details = _"You can't push an immobile unit out of the way."
      validity = "impossible"
    end
    return {
      short_name = _"hex",
      name = _"Hex",
      details = details,
      validity = validity
    }
  end end
  if not action.affected_hexes then action.affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help"}}
  end end
  local old_make_extra_attributes = action.make_extra_attributes
  action.make_extra_attributes = function(parameters, make_aspect)
    make_aspect.type_and_details(_"Summoning ritual:", _"The summoned creature can move on the turn it appears, and if there is a unit on the target hex, that unit is pushed out of the way.")
    if old_make_extra_attributes then old_make_extra_attributes(parameters, make_aspect) end
  end
  
  if not action.conclude then action.conclude = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local path = EoHS.space_making_path(parameters.target_x, parameters.target_y, function(unit, x, y, wunit)
      if EoHS.location_is_passable(x,y,parameters.side) and not EoHS.unit_is_immobile(unit) then
        local step_cost = 10000 -- cost of moving a unit
        if EoHS.wunit_can_move_on_hex(wunit,x,y) then
          -- very slightly prefer easier moves
          step_cost = step_cost + math.floor(100 * wesnoth.unit_movement_cost(wunit, wesnoth.get_terrain(x,y)) / unit.max_moves)
        else
          -- don't make an illegal move unless you absolutely have to
          step_cost = step_cost + 1000000
        end
        -- pushing this or any other wizard is also fairly undesirable
        if (x==actor.x) and (y==actor.y) then
          step_cost = step_cost + 100000
        elseif EoHS.get_unit_variable(unit, "wizard") then
          step_cost = step_cost + 200000
        end
        return step_cost
      end
    end)
    if path then
      for i,h in ipairs(path) do
        local prev = path[i+1]
        if prev then
          local unit = EoHS.get_unit(prev.x,prev.y)
          EoHS.remove_unit(unit.x,unit.y)
          unit.x,unit.y = h.x,h.y
          EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
        end
      end
      local unit = EoHS.summon_unit(parameters, specification, parameters.target_x, parameters.target_y, nil, actor, true)
      unit = EoHS.create_wunit(unit).__cfg
      if action.finish_unit then action.finish_unit(unit) end
      EoHS.update_all_type_adjustments(unit)
      unit.hitpoints = unit.max_hitpoints
      unit.moves = unit.max_moves
      EoHS.assert(not wesnoth.get_unit(unit.x,unit.y), "summoning ritual overwriting an existing unit")
      EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
      EoHS.fire_event("prerecruit", unit.x, unit.y)
      unit = EoHS.get_unit(unit.x, unit.y)
      if unit then
        EoHS.set_unit_action_points_immediate(unit, EoHS.unit_base_action_points(unit))
        EoHS.animate_unit({ flag = "recruited", { "filter", { x=unit.x, y=unit.y }} })
        EoHS.fire_event("recruit", unit.x, unit.y)
        unit = EoHS.get_unit(unit.x, unit.y)
        if unit then
          wesnoth.fire("redraw", { side = unit.side })
        end
      end
    else
      EoHS.message(_"The summoning failed because there was no room to place the unit.")
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end end
  
  EoHS.make_ritual(id, action)
end

EoHS.make_summoning_spell("summon_fire_guardian", {type="Fire Guardian"}, {
  base_cost = { action_points = 6 },
})

EoHS.make_summoning_spell("summon_arctic_drake", {type="Drake Fighter"}, {
  base_cost = { action_points = 6 },
  description_addendum = _"Arctic Drakes are Drake Fighters with 20% cold resistance, 10% arcane resistance, and 1 move/40% defense on snow and ice.",
})

EoHS.make_summoning_spell("summon_sea_serpent", {type="Sea Serpent"}, {
  image = { offset={x=-3,y=2} },
  base_cost = { action_points = 7 },
  description_addendum = _"These Sea Serpents start at level 2 with 76 hitpoints.",
})

EoHS.make_summoning_spell("summon_wolf", {type="Wolf"}, {
  image = { offset={x=-6,y=-5} },
  base_cost = { action_points = 5 },
})

EoHS.make_summoning_spell("summon_giant_scorpion", {type="Giant Scorpion"}, {
  name = _"Summon Scorpion",
  image = { offset={x=-1,y=-4} },
  base_cost = { action_points = 6 },
})

local wose_spec = {type="Wose", {"status",{ uncovered=false }} }
local wose_starts_invisible = function(parameters)
  for x,y in helper.adjacent_tiles(parameters.target_x,parameters.target_y) do
    local unit = EoHS.get_unit(x,y)
    if unit and wesnoth.is_enemy(unit.side, wesnoth.current.side) then
      return false
    end
  end
  return true
end
EoHS.make_summoning_spell("summon_wose", wose_spec, {
  image = { offset={x=0,y=2} },
  base_cost = { action_points = 6 },
  base_range = 4,
  target_type = function(parameters)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,wesnoth.current.side)
    local unfogged = EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y)
    local forest = string.match(wesnoth.get_terrain(parameters.target_x,parameters.target_y), "%^F")
    return {
      short_name = _"empty forest",
      name = _"Empty forest",
      details = (forest and (not unfogged) and _"You can't tell if that hex is occupied" or ""),
      validity = (forest and unfogged and not unit) and "valid" or "impossible"
    }
  end,
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help",require_no_invisible_enemy=true,hidden_from_enemies=wose_starts_invisible(parameters)}}
  end,
  description_addendum = _"This spell doesn't indicate its target to your enemies, and the wose is invisible when it appears (if it is not adjacent to an enemy unit).",
  use_message = function(parameters)
    local hidden_message = _"$actor.name| ($actor.x|,$actor.y|) casts Summon Wose. Where could it be...?"
    if wose_starts_invisible(parameters) then
      return hidden_message
    end
    -- Also show the hidden message for clients that can't see the wose in the fog,
    -- because otherwise we would be revealing the secret information of whether the wose was
    -- invisible *as well as* being in the fog
    local knows_where_wose_is = false
    for side in ipairs(wesnoth.sides) do
      EoHS.do_only_on_client_controlling_human_side(side, function()
        if EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y,side) then
          knows_where_wose_is = true
        end
      end)
      if knows_where_wose_is then return nil end
    end
    return hidden_message
  end,
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id)
    
    EoHS.summon_unit(parameters, wose_spec, parameters.target_x, parameters.target_y, extras.cost_paid, EoHS.get_unit(parameters.actor_id))
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.make_summoning_spell("summon_water_serpent", {type="Water Serpent"}, {
  image = { offset={x=-8,y=1} },
  base_cost = { action_points = 6 },
})

EoHS.make_summoning_spell("summon_gryphon", {type="Gryphon"}, {
  image = { offset={x=-3,y=-6} },
  base_cost = { action_points = 7 },
})

EoHS.make_summoning_spell("summon_vampire_bat", {type="Vampire Bat"}, {
  base_cost = { action_points = 4 },
  description_addendum = _" You can also absorb these bats later to recover their cost."
})

EoHS.make_summoning_spell("black_cat", {
  type="Rogue",
  {"variables",{EoHS_is_black_cat=true}},
}, {
  description_addendum = _"Black Cats are weak units that can teleport to any of your other units.",
  base_cost = { action_points = 6 },
})

EoHS.make_summoning_spell("summon_ghost", {type="Ghost",{"variables",{EoHS_ghost_protection=true}}}, {
  base_cost = { action_points = 6 },
  description_addendum = _"Ghosts are immune to direct damage from spells."
})

EoHS.make_conditional_ability("ghost_protection", function(unit)
  if EoHS.get_unit_variable(unit, "ghost_protection") then
    return { "dummy", {
      name = _"ethereal",
      description = _"Ghosts are immune to direct damage from spells.",
    }}
  end
end)

EoHS.make_summoning_spell("summon_skeleton", {type="Skeleton"}, {
  image = { offset={x=5,y=0} },
  base_cost = { action_points = 5 },
})
EoHS.make_summoning_spell("summon_skeleton_archer", {type="Skeleton Archer"}, {
  image = { offset={x=-3,y=0} },
  base_cost = { action_points = 5 },
})

EoHS.make_summoning_spell("summon_chocobone", {type="Chocobone"}, {
  image = { offset={x=-4,y=8} },
  base_cost = { action_points = 6 },
})

EoHS.get_resummonable_wunits = function(actor)
  return wesnoth.get_recall_units({ side=actor.side, EoHS.has_unit_variable("is_summon") })
end
local which_resummon = function(parameters, resummonable_wunits)
  if not parameters.which_resummon then return 1 end
  if parameters.which_resummon > #resummonable_wunits then return 1 end
  return parameters.which_resummon
end
EoHS.make_spell("resummon", {
  image = { image_modded="scenery/well.png", offset={x=-2,y=4} },
  name = _"Re-summon",
  description = _"You re-summon a summoned unit from your recall list.",
  
  is_summon = true,
  forbid_scrolls = true,
  
  base_cost = { action_points=6, mana=20 },
  base_range = 1,
  
  target_type = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local details,validity = "","valid"
    local resummonable_wunits = EoHS.get_resummonable_wunits(actor)
    local wunit = resummonable_wunits[which_resummon(parameters, resummonable_wunits)]
    if not EoHS.wunit_can_move_on_hex(wunit, parameters.target_x, parameters.target_y) then
      details = _"You can only summon a unit onto a hex where it can move."
      validity = "impossible"
    elseif not EoHS.hex_is_unfogged(parameters.target_x, parameters.target_y) then
      details = _"You can't tell if that hex is occupied."
      validity = "impossible"
    elseif EoHS.get_seen_unit(parameters.target_x, parameters.target_y, actor.side) then
      validity = "impossible"
    end
    return {
      short_name = _"empty hex",
      name = _"Empty hex",
      details = details,
      validity = validity
    }
  end,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help",require_no_invisible_enemy=true}}
  end,
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local actor = EoHS.get_unit(parameters.actor_id)
    
    local resummonable_wunits = EoHS.get_resummonable_wunits(actor)
    local rows = {}
    for i,wunit in ipairs(resummonable_wunits) do
      local unit = wunit.__cfg -- TODO cached
      local label = EoHS.unit_typename(unit)
      local image = EoHS.unit_thumbnail(unit, true)
      table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, "m\nm\nm\nm\nmmmmmmmmm"..label, {
      {"image",{
        x = 0,
        y = "((height/2)-(image_height/2))",
        w = "(if(height<72,height,72))",
        h = "(if(height<72,height,72))",
        name = image
      }},
      {"text",{
        x=72,
        y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
        w="(text_width)",
        h="(text_height)",
        font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
        color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
        text = label
      }} }, which_resummon(parameters, resummonable_wunits) == i, function() parameters.which_resummon = i end) }})
    end
    return g{r{
      c{vertical_alignment="top",EoHS.unit_preview_pane(dialog_context, resummonable_wunits[which_resummon(parameters, resummonable_wunits)].__cfg)},
      c{vertical_alignment="top",g(rows)}
    }}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local actor = EoHS.get_unit(parameters.actor_id)
    local resummonable_wunits = EoHS.get_resummonable_wunits(actor)
    local wunit = resummonable_wunits[which_resummon(parameters, resummonable_wunits)]
    wesnoth.extract_unit(wunit)
    wunit.moves = 0
    wunit.attacks_left = 0
    wunit.variables.EoHS_extra_action_points = 0
    wunit.x = parameters.target_x
    wunit.y = parameters.target_y
    wesnoth.put_unit(wunit)
    EoHS.fire_event("prerecall", wunit.x, wunit.y)
    if wunit.valid then
      EoHS.animate_unit({ flag = "recruited", { "filter", { x=wunit.x, y=wunit.y }} }, {dont_redraw_first=true})
      EoHS.fire_event("recall", wunit.x, wunit.y)
      if wunit.valid then
        wesnoth.fire("redraw", { side = wunit.side })
      end
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

local generic_dragon = {
  alignment = "chaotic",
  type = "fire",
  ability = "leadership",
  breath_cth = "marksman",
  breath_swings = 4,
  breath_damage = 14,
  breath_length = 6,
  breath_spread = 30,
  breath_mana   = 30,
  movetype = "drake",
  moves = 8,
  hitpoints = 101,
}
local dragon_movement_power = function(dragon)
  local movement_power = dragon.moves
  if dragon.movetype ~= "walk" then movement_power = movement_power * 7 / 5 end
  return movement_power
end
local dragon_breath_attack_power = function(dragon)
  local breath_attack_power = dragon.breath_swings * dragon.breath_damage
  if dragon.alignment == "liminal" then breath_attack_power = breath_attack_power * 5 / 6 end
  if dragon.breath_cth ~= "normal" then breath_attack_power = breath_attack_power * 4 / 3 end
  if dragon.type == "acid" then breath_attack_power = breath_attack_power + 10 end
  if dragon.type == "lightning" then breath_attack_power = breath_attack_power + 20 end
  if dragon.type == "spirit" then breath_attack_power = breath_attack_power + 4 end
  return breath_attack_power
end
local dragon_breath_usage_power = function(dragon)
  local breath_attack_power = dragon_breath_attack_power(dragon)
  local breath_footprint = dragon.breath_length * (dragon.breath_spread * (2*math.pi / 360) / 2) * (10 / dragon.breath_mana)
  local breath_usage_power = breath_attack_power +
    (breath_attack_power*breath_footprint/10) *
    ((dragon_movement_power(dragon)+dragon_movement_power(generic_dragon))/(2*dragon_movement_power(generic_dragon)))
  return breath_usage_power
end
local dragon_ability_usage_power = function(dragon)
  return dragon_movement_power(dragon)
end
local dragon_toughness_power = function(dragon)
  local result = dragon.hitpoints
  if dragon.movetype == "fly" then result = result * 7 / 5 end
  return result
end
local dragon_power = function(dragon)
  local  breath_usage_power_proportional =  dragon_breath_usage_power(dragon) /  dragon_breath_usage_power(generic_dragon)
  local ability_usage_power_proportional = dragon_ability_usage_power(dragon) / dragon_ability_usage_power(generic_dragon)
  local     toughness_power_proportional =     dragon_toughness_power(dragon) /     dragon_toughness_power(generic_dragon)
  return breath_usage_power_proportional*3 + ability_usage_power_proportional*2 + toughness_power_proportional
end
local generic_dragon_power = dragon_power(generic_dragon)
local generic_dragon_breath_attack_power = dragon_breath_attack_power(generic_dragon)
local alignments = {"lawful","lawful","lawful","chaotic","chaotic","chaotic","neutral","neutral","liminal"}
local types = {"fire","ice","water","acid","spirit","lightning"}
local abilities = {"leadership","despair","protection","light_control"}
local breath_cths = {"magical","marksman","marksman","normal","normal"}
local movetypes = {"fly","drake","walk"}
local function random_dragon()
  local dragon = {
    alignment = alignments[math.random(#alignments)],
    type = types[math.random(#types)],
    ability = abilities[math.random(#abilities)],
    breath_cth = breath_cths[math.random(#breath_cths)],
    breath_swings = math.random(2,7),
    breath_damage = math.random(2,40),
    breath_length = math.random(3,9),
    breath_spread = math.random(15,45),
    breath_mana   = math.random(15,80),
    movetype = movetypes[math.random(#movetypes)],
    moves = math.random(5,13),
    hitpoints = math.random(66,300)
  }
  if (dragon.ability == "light_control") and (dragon.alignment == "neutral") then dragon.alignment = "liminal" end
  local power = dragon_power(dragon)
  if (power < 0.9*generic_dragon_power) or (power > 1.1*generic_dragon_power) then return random_dragon() end
  local breath_attack_power = dragon_breath_attack_power(dragon)
  if (breath_attack_power < 0.6*generic_dragon_breath_attack_power) or
     (breath_attack_power > 1.6*generic_dragon_breath_attack_power) then return random_dragon() end
  return dragon
end
EoHS.make_summoning_ritual("call_dragon", {type="Fire Dragon"}, {
  name=_"Call Dragon",
  description=_"You summon a mighty dragon with an area breath attack. You can never be sure what kind of dragon will answer your summons - different dragons have different abilities.",
  turns = 5,
  base_cost = { mana=50 },
  image = { offset={x=-45,y=18} },
  finish_unit = function(unit)
    local variables = EoHS.get_fake_subtag(EoHS.force_unit_variables(unit), "dragon")
    local stats = EoHS.synchronize_choice(random_dragon)
    for k,v in pairs(stats) do variables[k] = v end
    EoHS.set_unit_variable(unit, "mana", stats.breath_mana)
  end,
})

EoHS.make_summoning_ritual("summon_yeti", {type="Yeti"}, {
  turns = 3,
  base_cost = { mana=32 },
  image = { offset={x=-6,y=8} },
})

EoHS.make_summoning_ritual("vex_dragon_bones", {type="Skeletal Dragon",{"variables",{EoHS_is_skeletal_dragon=true,EoHS_is_active_skeletal_dragon=true}}}, {
  name=_"Vex Dragon Bones",
  description=_"You twist the bones of a long-dead dragon into a semblance of life. It is so powerful that you must continually spend your energy to keep it active; on any turn when you do not cast Command Dragon Bones for 5 AP, it loses its moves, attacks, retaliation, zone of control, and upkeep until your next turn.",
  turns = 4,
  base_cost = { mana=31 },
  image = { offset={x=w111 and -54 or -6,y=w111 and 5 or 8} },
})

EoHS.deactivate_skeletal_dragon = function(unit)
  EoHS.set_unit_variable(unit, "is_active_skeletal_dragon", false)
  table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{
    id="EoHS_deactivate_skeletal_dragon",
    { "effect", {
      apply_to="zoc",
      value=false,
    }},
    { "effect", {
      apply_to="remove_attacks",
    }},
    { "effect", {
      apply_to = "image_mod",
      add = "~GS()",
    }},
  }})
  unit.zoc = false
  unit.upkeep = 0
  EoHS.remove_subtags(unit, "attack")
  EoHS.update_unit_graphics(unit)
end
EoHS.activate_skeletal_dragon = function(unit)
  EoHS.set_unit_variable(unit, "is_active_skeletal_dragon", true)
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_deactivate_skeletal_dragon")
  unit.zoc = nil
  unit.upkeep = nil
end

EoHS.at_turn_refresh("is_skeletal_dragon", function(units)
  for i,unit in ipairs(units.with_variable.is_skeletal_dragon or {}) do
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
        EoHS.deactivate_skeletal_dragon(unit)
      end
      unit.moves = 0
      EoHS.set_unit_action_points_immediate(unit, 0)
      EoHS.put_unit(unit)
    end
  end
end)
  -- hack: deal with the case of mounts
EoHS.at_turn_refresh("is_mounted", function(units)
  for i,unit in ipairs(units.with_variable.is_mounted or {}) do
    if unit.side == wesnoth.current.side then
      local mount = EoHS.get_mount(unit)
      if EoHS.get_unit_variable(mount, "is_skeletal_dragon") then
        EoHS.set_unit_action_points_immediate(unit, EoHS.get_unit_action_points(unit) - EoHS.actions.command_dragon_bones.base_cost.action_points)
      end
    end
  end
end)

EoHS.make_spell("command_dragon_bones", {
  image = EoHS.actions.vex_dragon_bones.image,
  name = _"Command Dragon Bones",
  description = _"You activate a Skeletal Dragon for one turn.",
  
  base_cost = { action_points=5 },
  base_range = 9,
  target_type = function(parameters)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,parameters.side)
    local cant = nil
    if unit then
      if not EoHS.get_unit_variable(unit, "is_skeletal_dragon") then
        cant = ""
      elseif unit.side ~= parameters.side then
        cant = _"You can only command your own unit."
      elseif EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
        cant = _"That dragon is already active."
      end
    end
    return {
      short_name = _"bones",
      name = _"Your Skeletal Dragon",
      details = cant or "",
      validity = (unit and not cant) and "valid" or "impossible"
    }
  end,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help"}}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    EoHS.activate_skeletal_dragon(unit)
    unit.moves = nil
    EoHS.set_unit_action_points_immediate(unit, EoHS.unit_base_action_points(unit))
    EoHS.put_unit(unit, {immediate=true})
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "skeleton-big-hit-2.ogg" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-- EoHS.make_conditional_ability("is_active_skeletal_dragon", function(unit)
--   if not EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
--     return { "dummy", {
--       name = _"dormant",
--       description = _".",
--     }}
--   end
-- end)

EoHS.make_summoning_ritual("swarm_nest", {type="Giant Spider",{"variables",{EoHS_is_swarm_nest=true}}}, {
  name=_"Swarm Nest",
  -- TODO not duplicating the swarm description.
  description=_"You summon an immobile nest that spawns an AI-controlled unit onto each adjacent empty hex every turn. The units are Giant Rats if on land, and Tentacles of the Deep if in water. They fight if they see a good opportunity; otherwise, they wander randomly unless they can capture a village or go for healing in one turn. These 'swarm' units move at the end of your turn, and during your turn, they are partially nonexistent, so that they don't get in the way of moving your regular units.",
  turns = 4,
  base_cost = { mana=43 },
  image = { offset={x=0,y=-10} },
})

EoHS.at_side_turn_end("is_swarm_nest", function(units)
  for i,unit in ipairs(units.with_variable.is_swarm_nest or {}) do
    if unit.side == wesnoth.current.side then
      local swarms = {}
      for x,y in helper.adjacent_tiles(unit.x, unit.y) do
        if EoHS.location_is_passable(x,y,unit.side) and not (EoHS.get_unit(x,y) or EoHS.swarm_is_present(x,y)) then
          local terrain = wesnoth.get_terrain(x,y)
          if not string.match(terrain, "^Q") then
            local swarm = {
              x=x, y=y,
              side = unit.side,
            }
            if string.match(terrain, "^[WS]") then
              swarm.type = "Tentacle of the Deep"
              EoHS.give_random_traits(swarm, {"QUICK"}, 1)
            else
              swarm.type = "Giant Rat"
              EoHS.give_random_traits(swarm, {"STRONG","QUICK","RESILIENT"}, 2)
            end
            local swarm_vars = EoHS.force_unit_variables(swarm)
            local nest_vars = EoHS.force_unit_variables(unit)
            swarm_vars.is_swarm = true
            swarm_vars.is_reanimated = nest_vars.is_reanimated -- hee hee hee
            swarm_vars.disappears_after_turns = nest_vars.disappears_after_turns and (nest_vars.disappears_after_turns + 1) -- correct for ordering issue
            EoHS.update_unit_overlays(swarm)
            table.insert(swarms, swarm)
          end
        end
      end
      EoHS.fake_recruit(swarms)
      --EoHS.flatten_swarms(wesnoth.current.side)
    end
  end
end)

EoHS.make_summoning_spell("create_portal", {
  type="Transport Galleon",
  {"variables",{EoHS_is_portal=true}},
}, {
  name=_"Create Portal",
  description=_"You summon an immobile portal that allows all allied units to travel instantly to any other portal.",
  image = { offset={x=0,y=7} },
  base_cost = { action_points = 6 },
})

EoHS.update_portal_tunnels = function()
  local portals = EoHS.get_units({EoHS.has_unit_variable("is_portal")})
  for side in ipairs(wesnoth.sides) do
    local in_xs = {}
    local in_ys = {}
    local out_xs = {}
    local out_ys = {}
    for i,portal in ipairs(portals) do
      if not wesnoth.is_enemy(side, portal.side) then
        table.insert(in_xs,portal.x)
        table.insert(in_ys,portal.y)
        for x,y in helper.adjacent_tiles(portal.x,portal.y) do
          table.insert(out_xs,x)
          table.insert(out_ys,y)
        end
      end
    end
    local tunnel_id = "EoHS_portal_tunnel_"..side
    wesnoth.fire("tunnel", {
      id = tunnel_id,
      remove = true,
    })
    wesnoth.fire("tunnel", {
      id = tunnel_id,
      bidirectional=false,
      {"filter",{ side=side }},
      {"source",{ x=table.concat(in_xs, ","), y=table.concat(in_ys, ",") }},
      {"target",{
        x=table.concat(out_xs, ","), y=table.concat(out_ys, ","),
        {"not",{ {"filter",{}} }} -- Moving onto units is disallowed anyway, but we need this to stop the pathfinding from choosing bogus routes.
      }},
    })
  end
end

EoHS.at_turn_refresh(EoHS.update_portal_tunnels)
EoHS.at_die(function(unit)
  if EoHS.get_unit_variable(unit, "is_portal") then
    EoHS.update_portal_tunnels()
  end
end)

-->>)}

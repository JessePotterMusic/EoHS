{EOHS_LUA_FILE (<<-- actions.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery


EoHS.action_dialog_grid = function(dialog_context, action, parameters)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  
  local rows = {
    r{c{ {"label",{label=action.name}} }},
    r{c{ {"label",{label=action.description}} }},
  }
  
  if action.parameters_dialog_grid then
    table.insert(rows, r{c{action.parameters_dialog_grid(dialog_context, parameters)}})
  end
  return g(rows)
end

EoHS.do_action = function(action, parameters)
  --local actor = EoHS.get_unit(actor_id)
  EoHS.pay_for_action(action, parameters)
  action.happen(parameters)
end

EoHS.pay_for_action = function(action, parameters)
  if cost.mana then
    EoHS.deduct_mana_andor_gold(parameters.actor_id, cost.mana)
  end
  if cost.action_points then
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.modify_action_points(actor, -cost.action_points)
    -- and if it uses action points then it's tiring
    actor.resting = false
    EoHS.put_unit(actor)
  end
end

EoHS.modify_action_points = function(unit, amount)
  local extra_action_points = EoHS.get_unit_variable(unit, "extra_action_points")
  extra_action_points = extra_action_points + amount
  while extra_action_points < 0 do
    unit.attacks_left = unit.attacks_left - 1
    extra_action_points = extra_action_points + 6
  end
  while extra_action_points >= 6 do
    unit.attacks_left = unit.attacks_left + 1
    extra_action_points = extra_action_points - 6
  end
  EoHS.set_unit_variable(unit, "extra_action_points", extra_action_points)
end

EoHS.deduct_mana_andor_gold = function(unit_id, amount)
  local unit = EoHS.get_unit(unit_id)
  local mana = EoHS.get_unit_variable(unit, "mana")
  if mana < amount then
    EoHS.set_unit_variable(unit, "mana", 0)
    wesnoth.sides[unit.side].gold = wesnoth.sides[unit.side].gold + mana - amount
  else
    EoHS.set_unit_variable(unit, "mana", mana - amount)
  end
  EoHS.put_unit(unit)
end

EoHS.action_cost = function(action, parameters)
  local cost
  if type(action.base_cost) == "function" then
    cost = action.base_cost(parameters)
  else
    cost = EoHS.deep_copy(action.base_cost)
  end
  
  local actor = EoHS.get_unit(actor_id)
  if cost.mana and EoHS.get_unit_skill(actor, "archmage") then
    cost.mana = math.ceil(cost.mana * 0.8)
  end
  if cost.action_points and EoHS.get_unit_skill(actor, "enchanter") and action.is_enchantment then
    cost.action_points = math.ceil(cost.action_points * 0.6)
  end
  if cost.action_points and EoHS.get_unit_skill(actor, "summoner") and action.is_summon then
    cost.action_points = math.ceil(cost.action_points * 0.6)
  end
  return cost
end

EoHS.begin_casting = function(actor_id, target_x, target_y)
  local actor = EoHS.get_unit(actor_id)
  wesnoth.scroll_to_tile(actor.x, actor.y, true)

  if target_x then
    if target_x > actor.x then actor.facing = "se" end
    if target_x < actor.x then actor.facing = "sw" end
  end

  wesnoth.fire("redraw")
  EoHS.set_unit_variable(actor, "is_casting_a_spell", true)
  EoHS.regenerate_unit_graphics(actor)
  EoHS.put_unit(actor)

  wesnoth.fire("animate_unit", {
    flag = "EoHS_start_casting",
    with_bars = true,
    { "filter", { x=actor.x, y=actor.y, }},
  })
  if target_x then
    wesnoth.scroll_to_tile(target_x, target_y, true)
  end
end

EoHS.finish_casting = function(actor_id)
  local actor = EoHS.get_unit(actor_id)
  -- In rare cases, the spell might have killed the caster, so only proceed if they can be found:
  if actor then
    wesnoth.fire("redraw")
    EoHS.set_unit_variable(actor, "is_casting_a_spell")
    EoHS.regenerate_unit_graphics(actor)
    EoHS.put_unit(actor)
    wesnoth.fire("animate_unit", {
      flag = "EoHS_stop_casting",
      with_bars = true,
      { "filter", { x=actor.x, y=actor.y, }},
    })
  end
end


>>)}

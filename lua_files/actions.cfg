{EOHS_LUA_FILE (<<-- actions.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.unit_has_actions = function(unit)
  return EoHS.get_unit_variable(unit, "is_wizard")
end

EoHS.action_dialog_grid = function(dialog_context, action, parameters)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  
  local cost = EoHS.action_cost(action, parameters)
  local range = EoHS.action_range(action, parameters)
  local whole_action_validity = "valid"
  local actor
  if parameters.actor_id then
    actor = EoHS.get_unit(parameters.actor_id)
  end
  
  local aspect_rows = {
  }
  local make_aspect_row = function(label1, label2, validity)
    table.insert(aspect_rows, r{c{ dialog_context.label_with_validity(validity, {label=label1}) },c{ dialog_context.label_with_validity(validity, {label=label2}) }})
    if validity == "impossible" then whole_action_validity = "impossible" end
    if validity == "undesirable" and whole_action_validity == "valid" then whole_action_validity = "undesirable" end
  end
  if cost.action_points then
    make_aspect_row(_"AP:", ""..cost.action_points, EoHS.unit_action_points(actor) < cost.action_points)
  end
  if cost.mana then
    local mana = math.max(0, EoHS.get_unit_variable(actor, "mana"))
    local validity = "valid"
    local label
    if mana >= cost.mana then
      label = ""..cost.mana
    else
      local gold = math.max(0, wesnoth.sides[actor.side].gold)
      if EoHS.get_wizard_setting(actor, "can_spend_gold_on_spells") and (gold+mana >= cost.mana) then
        --if mana == 0 then
        --  label = EoHS.substitute(_"$1| (You pay $1| gold)", {cost.mana})
        --else
          label = EoHS.substitute(_"$1| (You pay $2| mana, $3| gold)", {cost.mana,mana,cost.mana-mana})
        --end
      else
        validity = "impossible"
        label = ""..cost.mana
      end
    end
    make_aspect_row(_"Mana cost:", label, validity)
  end
  if action.target_type then
    local target_type = action.target_type(parameters)
    make_aspect_row(_"Target:", target_type.name, target_type.validity)
    
    if range then
      local dist = EoHS.distance_between(
             actor.       x,      actor.       y,
        parameters.target_x, parameters.target_y,
        EoHS.passable_only, range)
      make_aspect_row(_"Range:", ""..range, (dist and (dist <= range)) and "valid" or "impossible")
    end
  end
  if action.extra_restrictions then
    action.extra_restrictions(make_aspect_row, parameters)
  end
  
  local rows = {
    r{c{ {"label",{label=action.name}} }},
    r{c{ {"label",{label=action.description}} }},
    r{c{g(aspect_rows)}},
  }
  
  if action.parameters_dialog_grid then
    table.insert(rows, r{c{action.parameters_dialog_grid(dialog_context, parameters)}})
  end
  return g(rows)
end

EoHS.do_action = function(action, parameters)
  --local actor = EoHS.get_unit(actor_id)
  action.happen(parameters, EoHS.pay_for_action(action, parameters))
end

EoHS.pay_for_action = function(action, parameters)
  local cost = EoHS.action_cost(action, parameters)
  if cost.mana then
    EoHS.deduct_mana_andor_gold(parameters.actor_id, cost.mana)
  end
  if cost.action_points then
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.modify_action_points(actor, -cost.action_points)
    -- and if it uses action points then it's tiring
    actor.resting = false
    EoHS.put_unit(actor)
  end
  return cost
end

EoHS.unit_action_points = function(unit)
  return (6*unit.attacks_left) + EoHS.get_unit_variable(unit, "extra_action_points")
end

EoHS.modify_action_points = function(unit, amount)
  local extra_action_points = EoHS.get_unit_variable(unit, "extra_action_points")
  extra_action_points = extra_action_points + amount
  while extra_action_points < 0 do
    unit.attacks_left = unit.attacks_left - 1
    extra_action_points = extra_action_points + 6
  end
  while extra_action_points >= 6 do
    unit.attacks_left = unit.attacks_left + 1
    extra_action_points = extra_action_points - 6
  end
  EoHS.set_unit_variable(unit, "extra_action_points", extra_action_points)
end

EoHS.deduct_mana_andor_gold = function(unit_id, amount)
  local unit = EoHS.get_unit(unit_id)
  local mana = EoHS.get_unit_variable(unit, "mana")
  if mana <= 0 then
    wesnoth.sides[unit.side].gold = wesnoth.sides[unit.side].gold - amount
  elseif mana < amount then
    EoHS.set_unit_variable(unit, "mana", 0)
    wesnoth.sides[unit.side].gold = wesnoth.sides[unit.side].gold + mana - amount
  else
    EoHS.set_unit_variable(unit, "mana", mana - amount)
  end
  EoHS.put_unit(unit)
end

EoHS.action_cost = function(action, parameters)
  local cost
  if type(action.base_cost) == "function" then
    cost = action.base_cost(parameters)
  else
    cost = EoHS.deep_copy(action.base_cost)
  end
  
  local actor = EoHS.get_unit(parameters.actor_id)
  if action.is_summon then
    if cost.action_points and EoHS.get_unit_skill(actor, "summoner") then
      cost.action_points = math.ceil(cost.action_points * 0.6)
    end
    local multiplier = EoHS.get_wizard_setting(actor, "summon_cost_multiplier")
    if cost.mana and multiplier then
      cost.mana = math.ceil(cost.mana * multiplier)
    end
  end
  if cost.mana and EoHS.get_unit_skill(actor, "efficieny") then
    cost.mana = math.ceil(cost.mana * 0.8)
  end
  if cost.action_points and EoHS.get_unit_skill(actor, "enchanter") and action.is_enchantment then
    cost.action_points = math.ceil(cost.action_points * 0.6)
  end
  return cost
end

EoHS.action_range = function(action, parameters)
  local range
  if type(action.base_range) == "function" then
    range = action.base_range(parameters)
  else
    range = action.base_range
  end
  if not range then return nil end
  
  local actor = EoHS.get_unit(parameters.actor_id)
  if EoHS.get_unit_skill(actor, "farseer") then
    range = range * 2
  end
  return range
end

EoHS.target_types = {
  location = function(parameters) return {
    name = _"Any location",
    validity = EoHS.location_is_on_the_map(parameters.target_x,parameters.target_y) and "valid" or "impossible"
  } end,
  unit = function(parameters)
    local unit = EoHS.get_unit(parameters.target_x,parameters.target_y)
    return {
      name = _"Any unit",
      validity = (unit and EoHS.unit_is_visible(unit.underlying_id)) and "valid" or "impossible"
    }
  end,
  unit_probably_enemy = function(parameters)
    local unit = EoHS.get_unit(parameters.target_x,parameters.target_y)
    return {
      name = _"Any unit (normally an enemy)",
      validity = ((unit and EoHS.unit_is_visible(unit.underlying_id))
        and (wesnoth.is_enemy(unit.side, wesnoth.current.side) and "valid" or "undesirable")
        or "impossible")
    }
  end,
  unit_probably_ally = function(parameters)
    local unit = EoHS.get_unit(parameters.target_x,parameters.target_y)
    return {
      name = _"Any unit (normally an ally)",
      validity = ((unit and EoHS.unit_is_visible(unit.underlying_id))
        and (wesnoth.is_enemy(unit.side, wesnoth.current.side) and "undesirable" or "valid")
        or "impossible")
    }
  end,
}

EoHS.action_message = function(parameters, string)
  local values = EoHS.deep_copy(parameters)
  values.action = EoHS.actions[parameters.action_id]
  if parameters.actor_id then
    values.actor = EoHS.get_unit(parameters.actor_id)
    if values.actor and (values.actor.name == "") then
      values.actor.name = values.actor.language_name
    end
  end
  if parameters.target_x then
    values.target = EoHS.get_unit(parameters.target_x, parameters.target_y)
    if values.target and (values.target.name == "") then
      values.target.name = values.target.language_name
    end
  end
  EoHS.message(EoHS.substitute(string, parameters), parameters.actor_id)
end
EoHS.cast_message_no_target = function(parameters)
  EoHS.action_message(parameters,
    _"$actor.name| ($actor.x|,$actor.y|) casts $action.name|.")
end
EoHS.cast_message_location_target = function(parameters)
  EoHS.action_message(parameters,
    _"$actor.name| ($actor.x|,$actor.y|) casts $action.name| at ($target_x|,$target_y|).")
end
EoHS.cast_message_unit_target = function(parameters)
  EoHS.action_message(parameters,
    _"$actor.name| ($actor.x|,$actor.y|) casts $action.name| at $target.name| ($target.x|,$target.y|).")
end

EoHS.begin_casting = function(actor_id, target_x, target_y)
  local actor = EoHS.get_unit(actor_id)
  wesnoth.scroll_to_tile(actor.x, actor.y, true)

  if target_x then
    if target_x > actor.x then actor.facing = "se" end
    if target_x < actor.x then actor.facing = "sw" end
  end

  wesnoth.fire("redraw")
  EoHS.set_unit_variable(actor, "is_casting_a_spell", true)
  EoHS.regenerate_unit_graphics(actor)
  EoHS.put_unit(actor)

  wesnoth.fire("animate_unit", {
    flag = "EoHS_start_casting",
    with_bars = true,
    { "filter", { x=actor.x, y=actor.y, }},
  })
  if target_x then
    wesnoth.scroll_to_tile(target_x, target_y, true)
  end
end

EoHS.finish_casting = function(actor_id)
  local actor = EoHS.get_unit(actor_id)
  -- In rare cases, the spell might have killed the caster, so only proceed if they can be found:
  if actor then
    wesnoth.fire("redraw")
    EoHS.set_unit_variable(actor, "is_casting_a_spell")
    EoHS.regenerate_unit_graphics(actor)
    EoHS.put_unit(actor)
    wesnoth.fire("animate_unit", {
      flag = "EoHS_stop_casting",
      with_bars = true,
      { "filter", { x=actor.x, y=actor.y, }},
    })
  end
end

EoHS.summon_unit = function()

end

>>)}

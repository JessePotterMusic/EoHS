{EOHS_LUA_FILE (<<-- unit_types.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.update_all_type_adjustments = function(unit)
  if EoHS.get_unit_variable(unit, "is_summon") and (unit.type == "Death Knight") then EoHS.set_unit_variable(unit, "is_chocobone_knight", true) end -- TODO: better place for this?
  EoHS.update_type_adjustment_effects(unit)
  EoHS.transform_unit(unit)
  EoHS.update_noneffect_type_adjustments(unit)
  EoHS.update_unit_graphics(unit)
end

EoHS.adjusted_level = function(unit)
  return wesnoth.unit_types[unit.type].level + (EoHS.get_unit_variable(unit, "level_adjustment") or 0)
end

EoHS.should_adjust_level_next = function(unit)
  return (unit.advances_to == unit.type) and (EoHS.get_unit_variable(unit, "is_wizard") or EoHS.get_unit_variable(unit, "is_summon"))
end

local wizard_max_experience_table = {
  wesnoth.unit_types[     "Mage"].max_experience,
  wesnoth.unit_types[ "Red Mage"].max_experience,
  wesnoth.unit_types["Arch Mage"].max_experience,
}
EoHS.wizard_max_experience = function(level)
  if level < 1 then return math.ceil(wizard_max_experience_table[1] / (2-level)) end
  if level > 3 then return wizard_max_experience_table[3] + (120*(level - 3)) end
  return wizard_max_experience_table[level]
end

EoHS.type_adjustment_effects = function(unit)
  local effects = { id="EoHS_type_adjustment_effects" }
  local make_effect = function(apply_to, contents)
    contents.apply_to = apply_to
    table.insert(effects, { "effect", contents })
  end
  local level = EoHS.adjusted_level(unit)
  local type_in = function(list) for t in EoHS.comma_separated_values(list) do if unit.type == t then return true end end; return false end
  
  if EoHS.get_unit_variable(unit, "is_summon") then
    if (unit.type == "Chocobone") then
      make_effect("max_experience", { increase = -10 })
    end
    if (unit.type ==       "Wolf") then
      make_effect("max_experience", { increase = -20 })
    end
    if (unit.type == "Great Wolf") then
      make_effect("max_experience", { increase = -35 })
      make_effect("attack", { increase_damage = 2 })
    end
    if (unit.type ==   "Direwolf") then
      make_effect("attack", { increase_damage = 2 })
    end
    if (unit.type == "Gryphon") and (level == 2) then
      make_effect("max_experience", { increase = -26 })
    end
    if (unit.type == "Gryphon") and (level == 3) then
      make_effect("attack", { name = "claws", increase_damage = 4 })
      make_effect("hitpoints", { increase_total = 18 })
      make_effect("movement", { increase = 1 })
      make_effect("image_mod", { add = "~CS(0,-20,-60)" })
    end
    if (unit.type == "Water Serpent") and (level == 2) then
      make_effect("max_experience", { increase = -32 })
    end
    if (unit.type == "Water Serpent") and (level == 3) then
      make_effect("attack", { name = "fangs", increase_attacks = 1, increase_damage = 1 })
      make_effect("hitpoints", { increase_total = 12 })
      make_effect("movement", { increase = 1 })
      make_effect("image_mod", { add = "~CS(-60,-60,0)" })
    end
    if (unit.type == "Sea Serpent") and (level == 2) then
      make_effect("hitpoints", { increase_total = -9 })
      make_effect("max_experience", { increase = -62 })
    end
    if (unit.type == "Sea Serpent") and (level == 3) then
      make_effect("attack", { name = "fangs", increase_damage = 7 })
      make_effect("hitpoints", { increase_total = 9 })
      make_effect("movement", { increase = 2 })
      make_effect("image_mod", { add = "~CS(-60,-60,0)" })
      local name = _"water only"
      local description = _"This attack can be used in deep water, shallow water, and coastal reefs, but not in river ford, swamp, or land terrains."
      make_effect("new_attack", {
        name = "gigantic splash",
        description = _"gigantic splash",
        icon = "attacks/waterspray.png",
        type = "impact",
        range = "ranged",
        damage = 8,
        number = 3,
        {"specials",{
          {"attacks",{
            name = name,
            description = description,
            name_inactive = name,
            description_inactive = description,
            multiply = 0,
            {"filter_self",{
              {"not",{
                {"filter_location",{
                  terrain="Ww*,Wo*",
                  {"not",{ terrain="Wwf" }}
                }}
              }}
            }}
          }}
        }}
      })
    end
    if (unit.type == "Death Knight") then
      make_effect("movement", { set = 9 })
      make_effect("attack", { name = "battle axe", increase_damage = -2 })
      make_effect("new_attack", {
        name = "spear",
        description = _"spear",
        type = "pierce",
        range = "melee",
        damage = 14,
        number = 2,
        { "specials", EoHS.macros.WEAPON_SPECIAL_CHARGE },
      })
    end
    if type_in("Drake Fighter,Drake Warrior,Drake Blademaster") then
      make_effect("image_mod", {
        { "color_palette", {
          drake_fighter_palette = "86ac53,fde9f1,fde6ef,fadb85,f7df8e,f6db84,dfc799,c7d95e,c3d355,c1d553,c19057,a2c157,9dba50,99b94e,7ca448,679345,5e8d44,57624d,573d2d,53844a,4c5742,4a5640,487a3f,3c513e,324634,2d4331,242e12,1c250d,151f06,100506",
        }},
        { "color_range", {
          id = "blue_drake_range",
          rgb = "8888ff,ffffff,000000",
        }},
        add = "~RC(drake_fighter_palette>blue_drake_range)",
      })
      make_effect("resistance", { replace = true, { "resistance", { cold = 80, arcane = 80, }}, })
      -- I didn't originally intend to change its snow movement/defense, but the "arctic" theme requires me to (and I have nothing against it)
      make_effect("movement_costs", { replace = true, { "movement_costs", { frozen = 1, }}, })
      make_effect("defense",        { replace = true, { "defense",        { frozen = 60, }}, })
    end
  end
  
  if EoHS.get_unit_variable(unit, "is_wizard") then
    local skills = EoHS.get_unit_skillset(unit)
    make_effect("max_experience", { increase = "-100%" }) -- sets to 1 (hard-coded minimum)
    make_effect("max_experience", { increase = EoHS.wizard_max_experience(level) - 1 })
    if (unit.type == "Mage") then
      table.insert(effects, { "effect", { apply_to="remove_attacks", name="missile", }})
    end
    if type_in("Red Mage,Arch Mage,Great Mage") then
      table.insert(effects, { "effect", { apply_to="remove_attacks", name="fireball", }})
    end
    if type_in("Mage,Red Mage,Arch Mage,Great Mage") then
      table.insert(effects, { "effect", {
        apply_to = "hitpoints",
        increase_total = 10 + math.max(level-4, 0)*11,
      }})
      table.insert(effects, { "effect", { apply_to="resistance", replace=true, { "resistance", {
        fire   = math.min(100, 110 - math.min(EoHS.skillset_realm_rank(skills, "evocation"   ), level, 4) * 10),
        cold   = math.min(100, 110 - math.min(EoHS.skillset_realm_rank(skills, "necromancy"  ), level, 4) * 10),
        arcane = math.min(100, 110 - math.min(EoHS.skillset_realm_rank(skills, "nature_magic"), level, 4) * 10),
        blade  = 100,
        impact = 100,
        pierce = 100,
      }} }})
      table.insert(effects, { "effect", {
        apply_to = "attack",
        name = "staff",
        increase_attacks = 1,
        increase_damage  = -1 + math.max(level-4, 0),
      }})
      local make_attack = function(skill_name, upgrade_array, bonus, attack)
        local skill = EoHS.skillset_realm_rank(skills, skill_name)
        if skill > 0 then
          local upgrade_total = math.max(0, math.min(skill, level)) + 1
          local upgrade_array_index = math.min(#upgrade_array, upgrade_total)
          local excess = math.max(0, upgrade_total - upgrade_array_index)
          
          attack.apply_to = "new_attack"
          attack.range = "ranged"
          attack.damage = upgrade_array[upgrade_array_index][1] + math.floor(excess * bonus)
          attack.number = upgrade_array[upgrade_array_index][2]
          table.insert(attack, { "specials", EoHS.macros.WEAPON_SPECIAL_MAGICAL })
          table.insert(effects, { "effect", attack })

          --[[if skill_name == "necromancy" and skills.petty_necromancer then
            local attack2 = EoHS.deep_copy(attack)
            attack2.name = attack2.name.."_2"
            attack2.description = wesnoth.textdomain("wesnoth-units")("shadow wave")
            attack2.type = "arcane"
            attack2.damage = math.floor(attack2.damage * 0.75)
            table.insert(effects, { "effect", attack2 })
          end]]
        end
      end
      make_attack("evocation",
        {{ 6,2},{ 7,3},{ 8,4}}, 4,
        {
          name = "EoHS_evocation_skill_ranged_attack",
          description = wesnoth.textdomain("wesnoth-units")("fireball"),
          icon = "attacks/fireball.png",
          type = "fire",
        }
      )
      make_attack("nature_magic",
        {{ 4,3},{ 5,4},{ 7,4},{9,4},{10,5}}, 2,
        {
          name = "EoHS_nature_magic_skill_ranged_attack",
          description = wesnoth.textdomain("wesnoth-units")("faerie fire"),
          icon = "attacks/faerie-fire.png",
          type = "arcane",
        }
      )
      make_attack("necromancy",
        {{ 6,2},{10,2},{10,3}}, 4,
        {
          name = "EoHS_necromancy_skill_ranged_attack",
          description = wesnoth.textdomain("wesnoth-units")("chill wave"),
          icon = "attacks/iceball.png",
          type = "cold",
        }
      )
    end
    if (unit.type == "Lich") then
      -- Invisibility undercuts the drama of a wizard, and this usually-irrelevant ability clutters the ability list.
      table.insert(effects, { "effect", { 
        apply_to="remove_ability",
        { "abilities", EoHS.macros.ABILITY_SUBMERGE },
      }})
      table.insert(effects, { "effect", {
        apply_to = "hitpoints",
        increase_total = 4 + math.min(level-3, 0)*11,
      }})
      table.insert(effects, { "effect", {
        apply_to = "attack",
        name = "touch",
        increase_damage = math.min(level-3, 0),
      }})
      do
        local upgrade_array = {{1,1},{4,1},{4,2}}
        local bonus = 3
        local upgrade_total = math.min(0, level - 3)
        local upgrade_array_index = math.min(#upgrade_array, upgrade_total)
        local excess = math.max(0, upgrade_total - upgrade_array_index)
        
        if level > 3 then
          table.insert(effects, { "effect", {
            apply_to = "attack",
            name = "chill tempest",
            increase_damage = upgrade_array[upgrade_array_index][1] + math.floor(excess * bonus),
            increase_attacks = upgrade_array[upgrade_array_index][2],
          }})
          table.insert(effects, { "effect", {
            apply_to = "attack",
            name = "shadow wave",
            increase_damage = math.floor((upgrade_array[upgrade_array_index][1] + excess * bonus) * 0.75),
            increase_attacks = upgrade_array[upgrade_array_index][2],
          }})
        end
      end
    end
    if skills.traveler then
      table.insert(effects, { "effect", { apply_to="movement", increase=1 }})
    end
    if type_in("Mage,Red Mage,Arch Mage,Great Mage,Lich") then
      if skills.archmage then
        table.insert(effects, { "effect", { apply_to="resistance", replace=false, { "resistance", {
          arcane = -40,
          fire   = -40,
          cold   = -40,
        }} }})
      end
      if skills.dwarvish_alliance then
        table.insert(effects, { "effect", { apply_to="resistance", replace=false, { "resistance", {
          blade  = -20,
          impact = -20,
          pierce = -20,
        }} }})
      end
      if skills.traveler then
        table.insert(effects, { "effect", { apply_to="defense", replace=false, { "defense", {
          deep_water = -10,
          shallow_water = -10,
          reef = -10,
          swamp_water = -20,
          sand = -10,
          frozen = -10,
        }} }})
        table.insert(effects, { "effect", { apply_to="movement_costs", replace=false, { "movement_costs", {
          shallow_water = -1,
          swamp_water = -1,
          sand = -1,
          hills = -1,
          mountains = -1,
          cave = -1,
          frozen = -1,
        }} }})
      end
      if skills.military_commander then
        table.insert(effects, { "effect", { apply_to="new_ability", { "abilities", EoHS.leadership_abilities(level) }}})
      end
      if skills.rascally_friends then
        table.insert(effects, { "effect", { apply_to="new_ability", { "abilities", EoHS.macros.ABILITY_SKIRMISHER } }})
      end
      if skills.elvish_alliance then
        table.insert(effects, { "effect", { apply_to="new_ability", { "abilities", (level>2) and EoHS.macros.ABILITY_CURES or EoHS.macros.ABILITY_HEALS } }})
        table.insert(effects, { "effect", { apply_to="defense", replace=false, { "defense", {
          forest = -20,
        }} }})
        table.insert(effects, { "effect", { apply_to="movement_costs", replace=false, { "movement_costs", {
          forest = -1,
        }} }})
      end
      if skills.orcish_mercenaries then 
        table.insert(effects, { "effect", {
          apply_to = "attack",
          increase_damage = 1,
        }})
        table.insert(effects, { "effect", {
          apply_to = "attack",
          range = "melee",
          increase_damage = 1,
        }})
      end
      if skills.petty_necromancer then 
        table.insert(effects, { "effect", {
          apply_to = "attack",
          name = "staff",
          set_description = wesnoth.textdomain("wesnoth-units")("plague staff"),
          set_icon = "attacks/staff-plague.png", -- Won't work until 1.11
          { "set_specials", {
            mode = "append",
            EoHS.macros.WEAPON_SPECIAL_PLAGUE[1],
          }},
        }})
      end
    end
  end
  
  return effects
end

EoHS.update_type_adjustment_effects = function(unit)
  local effects = EoHS.type_adjustment_effects(unit)
  local modifications = EoHS.force_subtag(unit, "modifications")
  local i = 1
  -- This loop is too clever. Maybe rewrite it so it's easier to tell what it's doing.
  while modifications[i] do
    if modifications[i][2].id == "EoHS_type_adjustment_effects" then
      if (i==1) and effects[1] then
        modifications[1][2] = effects
        return
      else
        table.remove(i)
        break
      end
    else
      i=i+1
    end
  end
  if effects[1] then
    table.insert(modifications, 1, { "advance", effects }) -- advance comes before trait or object - it's fitting for type modifications
  end
end

EoHS.update_noneffect_type_adjustments = function(unit)
  local did_anything = EoHS.standardize_unit(unit)
  local level = EoHS.adjusted_level(unit)
  local type_in = function(list) for t in EoHS.comma_separated_values(list) do if unit.type == t then return true end end; return false end
  local set = function(attr,val)
    if unit[attr] ~= val then unit[attr] = val; did_anything = true end
  end
  set("level", level)
  if EoHS.get_unit_variable(unit, "is_summon") then
    if unit.type == "Fire Guardian" then set("cost", 16) end
    if unit.type == "Drake Fighter" then set("cost", 20); set("language_name", _"Arctic Drake") end -- TODO: If this hasn't yet been added to 1.11, submit a FR
    if unit.type == "Sea Serpent" then set("cost", (level == 2) and 41 or 60) end
    if unit.type == "Wolf" then set("cost", 15); set("advances_to", "Great Wolf") end
    if unit.type == "Great Wolf" then set("advances_to", "Direwolf") end
    if unit.type == "Giant Scorpion" then set("cost", 19) end
    if unit.type == "Wose" then set("cost", 18) end
    if unit.type == "Water Serpent" then set("cost", (level == 2) and 24 or 42) end
    if unit.type == "Gryphon" then set("cost", (level == 2) and 28 or 48) end
    if unit.type == "Ghost" then set("cost", 16) end
    if unit.type == "Chocobone" then set("cost", 28); set("advances_to", "Death Knight") end
    if type_in("Water Serpent,Sea Serpent,Gryphon") and (level == 2) then set("advances_to", unit.type) end
  end
  if EoHS.get_unit_variable(unit, "is_wizard") then
    set("profile", "unit_image")
    
    local skills = EoHS.get_unit_skillset(unit)
        if (unit.type ==           "Lich") then set("advances_to",       "Lich")
    elseif (unit.type ==           "Mage") then
          if level < 1                     then set("advances_to",       "Mage")
          else                                  set("advances_to",   "Red Mage") end
    elseif (unit.type ==       "Red Mage") then set("advances_to",  "Arch Mage")
    elseif type_in("Arch Mage,Great Mage") then set("advances_to", "Great Mage")
    end
    -- We'd remove AMLA here, but we can't; fortunately it's overridden by the valid advances_to
    
    if type_in("Mage,Red Mage,Arch Mage,Great Mage") then
      local alignment = "neutral"
      if skills.military_commander and not skills.petty_necromancer  then alignment = "lawful"  end
      if skills.petty_necromancer  and not skills.military_commander then alignment = "chaotic" end
      set("alignment", alignment)
    end
    
    if EoHS.get_wizard_setting(unit, "can_recruit") then
      local current_recruits = {}
      for recruit in EoHS.comma_separated_values(unit.extra_recruit) do
        current_recruits[recruit] = true
      end
      local needed_recruits = {}
      local need = function(list)
        for recruit in EoHS.comma_separated_values(list) do
          table.insert(needed_recruits, recruit)
        end
      end
      if skills.military_commander then need("Cavalryman,Horseman,Spearman,Fencer,Heavy Infantryman,Bowman,Sergeant,Merman Fighter") end
      if skills.rascally_friends then need("Thief,Thug,Poacher,Footpad,Ruffian") end
      if skills.elvish_alliance then need("Elvish Fighter,Elvish Archer,Elvish Scout,Elvish Shaman,Merman Hunter,Mermaid Initiate") end
      if skills.dwarvish_alliance then need("Dwarvish Fighter,Dwarvish Thunderer,Dwarvish Guardsman,Dwarvish Ulfserker,Dwarvish Scout") end
      if skills.orcish_mercenaries then need("Orcish Grunt,Troll Whelp,Wolf Rider,Orcish Archer,Orcish Assassin,Naga Fighter,Goblin Spearman") end
      if skills.traveler then need("Saurian Skirmisher,Saurian Augur,Woodsman,Peasant") end
      if skills.petty_necromancer then need("Skeleton,Skeleton Archer,Walking Corpse,Vampire Bat,Dark Adept,Ghoul") end
      if skills.dwarvish_alliance and skills.summon_gryphon then need("Gryphon Rider") end
      for i,recruit in ipairs(needed_recruits) do
        if not current_recruits[recruit] then
          if unit.extra_recruit == "" then
            unit.extra_recruit = recruit
          else
            unit.extra_recruit = unit.extra_recruit..","..recruit
          end
          did_anything = true
        end
      end
    end
  end
  return did_anything
end

EoHS.leadership_abilities = function(level)
  local result = {}
  for level2 = level-1,0,-1 do
    table.insert(result, { "leadership", {
      id = "leadership",
      cumulative = false,
      value = 25*(level-level2),
      affect_self = false,
      { "affect_adjacent", {
        adjacent = "n,ne,se,s,sw,nw",
        { "filter", {
          level = level2,
        }},
      }},
             name = (level2==level-1) and wesnoth.textdomain("wesnoth-help")("leadership") or nil,
      female_name = (level2==level-1) and wesnoth.textdomain("wesnoth-help")("female^leadership") or nil,
      description = (level2==level-1) and wesnoth.textdomain("wesnoth-help")("Leadership:\nThis unit can lead our own units that are next to it, making them fight better.\n\nAdjacent own units of lower level will do more damage in battle. When a unit adjacent to, of a lower level than, and on the same side as a unit with Leadership engages in combat, its attacks do 25% more damage times the difference in their levels.") or nil,
    }})
  end
  return result
end

>>)}

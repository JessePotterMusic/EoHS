{EOHS_LUA_FILE (<<-- unit_types.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.update_all_type_adjustments = function(unit)
  EoHS.update_type_adjustment_effects(unit)
  EoHS.transform_unit(unit)
  EoHS.update_noneffect_type_adjustments(unit)
  EoHS.update_unit_graphics(unit)
end

EoHS.adjusted_level = function(unit)
  return wesnoth.unit_types[unit.type].level + (EoHS.get_unit_variable(unit, "level_adjustment") or 0)
end

EoHS.should_adjust_level_next = function(unit)
  return (unit.advances_to == unit.type) and (EoHS.get_unit_variable(unit, "is_wizard") or EoHS.get_unit_variable(unit, "is_summon"))
end

local wizard_max_experience_table = {
  wesnoth.unit_types[     "Mage"].max_experience,
  wesnoth.unit_types[ "Red Mage"].max_experience,
  wesnoth.unit_types["Arch Mage"].max_experience,
}
EoHS.wizard_max_experience = function(level)
  if level < 1 then return math.ceil(wizard_max_experience_table[1] / (2-level)) end
  if level > 3 then return wizard_max_experience_table[3] + (120*(level - 3)) end
  return wizard_max_experience_table[level]
end

EoHS.type_adjustment_effects = function(unit)
  local effects = { id="EoHS_type_adjustment_effects" }
  local level = EoHS.adjusted_level(unit)
  if EoHS.get_unit_variable(unit, "is_wizard") then
    local skills = EoHS.get_unit_skillset(unit)
    table.insert(effects, { "effect", {
      apply_to = "max_experience",
      increase = "-100%", -- sets to 1 (hard-coded minimum)
    }})
    table.insert(effects, { "effect", {
      apply_to = "max_experience",
      increase = EoHS.wizard_max_experience(level) - 1,
    }})
    if (unit.type == "Mage") then
      table.insert(effects, { "effect", { apply_to="remove_attacks", name="missile", }})
    end
    if (unit.type == "Red Mage") or (unit.type == "Arch Mage") or (unit.type == "Great Mage") then
      table.insert(effects, { "effect", { apply_to="remove_attacks", name="fireball", }})
    end
    if (unit.type == "Mage") or (unit.type == "Red Mage") or (unit.type == "Arch Mage") or (unit.type == "Great Mage") then
      table.insert(effects, { "effect", {
        apply_to = "hitpoints",
        increase_total = 10 + math.max(level-4, 0)*11,
      }})
      table.insert(effects, { "effect", { apply_to="resistance", replace=true, { "resistance", {
        fire   = math.min(100, 110 - math.min(EoHS.skillset_realm_rank(skills, "evocation"   ), level, 4) * 10),
        cold   = math.min(100, 110 - math.min(EoHS.skillset_realm_rank(skills, "necromancy"  ), level, 4) * 10),
        arcane = math.min(100, 110 - math.min(EoHS.skillset_realm_rank(skills, "nature_magic"), level, 4) * 10),
        blade  = 100,
        impact = 100,
        pierce = 100,
      }} }})
      table.insert(effects, { "effect", {
        apply_to = "attack",
        name = "staff",
        increase_attacks = 1,
        increase_damage  = -1 + math.max(level-4, 0),
      }})
      local make_attack = function(skill_name, upgrade_array, bonus, attack)
        local skill = EoHS.skillset_realm_rank(skills, skill_name)
        if skill > 0 then
          local upgrade_total = math.max(0, math.min(skill, level)) + 1
          local upgrade_array_index = math.min(#upgrade_array, upgrade_total)
          local excess = math.max(0, upgrade_total - upgrade_array_index)
          
          attack.apply_to = "new_attack"
          attack.range = "ranged"
          attack.damage = upgrade_array[upgrade_array_index][1] + math.floor(excess * bonus)
          attack.number = upgrade_array[upgrade_array_index][2]
          table.insert(attack, { "specials", EoHS.macros.WEAPON_SPECIAL_MAGICAL })
          table.insert(effects, { "effect", attack })

          --[[if skill_name == "necromancy" and skills.petty_necromancer then
            local attack2 = EoHS.deep_copy(attack)
            attack2.name = attack2.name.."_2"
            attack2.description = wesnoth.textdomain("wesnoth-units")("shadow wave")
            attack2.type = "arcane"
            attack2.damage = math.floor(attack2.damage * 0.75)
            table.insert(effects, { "effect", attack2 })
          end]]
        end
      end
      make_attack("evocation",
        {{ 6,2},{ 7,3},{ 8,4}}, 4,
        {
          name = "EoHS_evocation_skill_ranged_attack",
          description = wesnoth.textdomain("wesnoth-units")("fireball"),
          icon = "attacks/fireball.png",
          type = "fire",
        }
      )
      make_attack("nature_magic",
        {{ 4,3},{ 5,4},{ 7,4},{9,4},{10,5}}, 2,
        {
          name = "EoHS_nature_magic_skill_ranged_attack",
          description = wesnoth.textdomain("wesnoth-units")("faerie fire"),
          icon = "attacks/faerie-fire.png",
          type = "arcane",
        }
      )
      make_attack("necromancy",
        {{ 6,2},{10,2},{10,3}}, 4,
        {
          name = "EoHS_necromancy_skill_ranged_attack",
          description = wesnoth.textdomain("wesnoth-units")("chill wave"),
          icon = "attacks/iceball.png",
          type = "cold",
        }
      )
    end
    if (unit.type == "Lich") then
      -- Invisibility undercuts the drama of a wizard, and this usually-irrelevant ability clutters the ability list.
      table.insert(effects, { "effect", { 
        apply_to="remove_ability",
        { "abilities", EoHS.macros.ABILITY_SUBMERGE },
      }})
      table.insert(effects, { "effect", {
        apply_to = "hitpoints",
        increase_total = 4 + math.min(level-3, 0)*11,
      }})
      table.insert(effects, { "effect", {
        apply_to = "attack",
        name = "touch",
        increase_damage = math.min(level-3, 0),
      }})
      do
        local upgrade_array = {{1,1},{4,1},{4,2}}
        local bonus = 3
        local upgrade_total = math.min(0, level - 3)
        local upgrade_array_index = math.min(#upgrade_array, upgrade_total)
        local excess = math.max(0, upgrade_total - upgrade_array_index)
        
        if level > 3 then
          table.insert(effects, { "effect", {
            apply_to = "attack",
            name = "chill tempest",
            increase_damage = upgrade_array[upgrade_array_index][1] + math.floor(excess * bonus),
            increase_attacks = upgrade_array[upgrade_array_index][2],
          }})
          table.insert(effects, { "effect", {
            apply_to = "attack",
            name = "shadow wave",
            increase_damage = math.floor((upgrade_array[upgrade_array_index][1] + excess * bonus) * 0.75),
            increase_attacks = upgrade_array[upgrade_array_index][2],
          }})
        end
      end
    end
    if skills.traveler then
      table.insert(effects, { "effect", { apply_to="movement", increase=1 }})
    end
    if (unit.type == "Mage") or (unit.type == "Red Mage") or (unit.type == "Arch Mage") or (unit.type == "Great Mage") or (unit.type == "Lich") then
      if skills.archmage then
        table.insert(effects, { "effect", { apply_to="resistance", replace=false, { "resistance", {
          arcane = -40,
          fire   = -40,
          cold   = -40,
        }} }})
      end
      if skills.dwarvish_alliance then
        table.insert(effects, { "effect", { apply_to="resistance", replace=false, { "resistance", {
          blade  = -20,
          impact = -20,
          pierce = -20,
        }} }})
      end
      if skills.traveler then
        table.insert(effects, { "effect", { apply_to="defense", replace=false, { "defense", {
          deep_water = -10,
          shallow_water = -10,
          reef = -10,
          swamp_water = -20,
          sand = -10,
          frozen = -10,
        }} }})
        table.insert(effects, { "effect", { apply_to="movement_costs", replace=false, { "movement_costs", {
          shallow_water = -1,
          swamp_water = -1,
          sand = -1,
          hills = -1,
          mountains = -1,
          cave = -1,
          frozen = -1,
        }} }})
      end
      if skills.military_commander then
        table.insert(effects, { "effect", { apply_to="new_ability", { "abilities", EoHS.leadership_abilities(level) }}})
      end
      if skills.rascally_friends then
        table.insert(effects, { "effect", { apply_to="new_ability", { "abilities", EoHS.macros.ABILITY_SKIRMISHER } }})
      end
      if skills.elvish_alliance then
        table.insert(effects, { "effect", { apply_to="new_ability", { "abilities", (level>2) and EoHS.macros.ABILITY_CURES or EoHS.macros.ABILITY_HEALS } }})
        table.insert(effects, { "effect", { apply_to="defense", replace=false, { "defense", {
          forest = -20,
        }} }})
        table.insert(effects, { "effect", { apply_to="movement_costs", replace=false, { "movement_costs", {
          forest = -1,
        }} }})
      end
      if skills.orcish_mercenaries then 
        table.insert(effects, { "effect", {
          apply_to = "attack",
          increase_damage = 1,
        }})
        table.insert(effects, { "effect", {
          apply_to = "attack",
          range = "melee",
          increase_damage = 1,
        }})
      end
      if skills.petty_necromancer then 
        table.insert(effects, { "effect", {
          apply_to = "attack",
          name = "staff",
          set_description = wesnoth.textdomain("wesnoth-units")("plague staff"),
          set_icon = "attacks/staff-plague.png", -- Won't work until 1.11
          { "set_specials", {
            mode = "append",
            EoHS.macros.WEAPON_SPECIAL_PLAGUE[1],
          }},
        }})
      end
    end
  end
  
  return effects
end

EoHS.update_type_adjustment_effects = function(unit)
  local effects = EoHS.type_adjustment_effects(unit)
  local modifications = EoHS.force_subtag(unit, "modifications")
  local i = 1
  -- This loop is too clever. Maybe rewrite it so it's easier to tell what it's doing.
  while modifications[i] do
    if modifications[i][2].id == "EoHS_type_adjustment_effects" then
      if (i==1) and effects[1] then
        modifications[1][2] = effects
        return
      else
        table.remove(i)
        break
      end
    else
      i=i+1
    end
  end
  if effects[1] then
    table.insert(modifications, 1, { "advance", effects }) -- advance comes before trait or object - it's fitting for type modifications
  end
end

EoHS.update_noneffect_type_adjustments = function(unit)
  local did_anything = EoHS.standardize_unit(unit)
  local level = EoHS.adjusted_level(unit)
  if unit.level ~= level then
    unit.level = level
    did_anything = true
  end
  if EoHS.get_unit_variable(unit, "is_wizard") then
    local skills = EoHS.get_unit_skillset(unit)
    local advances_to
    if (unit.type == "Lich") then advances_to = "Lich"
    elseif (unit.type == "Mage") then advances_to = "Red Mage"
    elseif (unit.type == "Red Mage") then advances_to = "Arch Mage"
    elseif (unit.type == "Arch Mage") or (unit.type == "Great Mage") then advances_to = "Great Mage"
    end
    if advances_to and (unit.advances_to ~= advances_to) then
      unit.advances_to = advances_to
      did_anything = true
    end
    local i = 1
    while unit[i] do
      if unit[i][1] == "advancement" then
        table.remove(unit, i)
        did_anything = true
      else i = i + 1 end
    end
    
    if (unit.type == "Mage") or (unit.type == "Red Mage") or (unit.type == "Arch Mage") or (unit.type == "Great Mage") then
      local alignment = "neutral"
      if skills.military_commander and not skills.petty_necromancer  then alignment = "lawful"  end
      if skills.petty_necromancer  and not skills.military_commander then alignment = "chaotic" end
      if unit.alignment ~= alignment then
        unit.alignment = alignment
        did_anything = true
      end
    end
    
    if EoHS.get_wizard_setting(unit, "can_recruit") then
      local current_recruits = {}
      for recruit in EoHS.comma_separated_values(unit.extra_recruit) do
        current_recruits[recruit] = true
      end
      local needed_recruits = {}
      local need = function(list)
        for recruit in EoHS.comma_separated_values(list) do
          table.insert(needed_recruits, recruit)
        end
      end
      if skills.military_commander then need("Cavalryman,Horseman,Spearman,Fencer,Heavy Infantryman,Bowman,Sergeant,Merman Fighter") end
      if skills.rascally_friends then need("Thief,Thug,Poacher,Footpad,Ruffian") end
      if skills.elvish_alliance then need("Elvish Fighter,Elvish Archer,Elvish Scout,Elvish Shaman,Merman Hunter,Mermaid Initiate") end
      if skills.dwarvish_alliance then need("Dwarvish Fighter,Dwarvish Thunderer,Dwarvish Guardsman,Dwarvish Ulfserker,Dwarvish Scout") end
      if skills.orcish_mercenaries then need("Orcish Grunt,Troll Whelp,Wolf Rider,Orcish Archer,Orcish Assassin,Naga Fighter,Goblin Spearman") end
      if skills.traveler then need("Saurian Skirmisher,Saurian Augur,Woodsman,Peasant") end
      if skills.petty_necromancer then need("Skeleton,Skeleton Archer,Walking Corpse,Vampire Bat,Dark Adept,Ghoul") end
      if skills.dwarvish_alliance and skills.summon_gryphon then need("Gryphon Rider") end
      for i,recruit in ipairs(needed_recruits) do
        if not current_recruits[recruit] then
          if unit.extra_recruit == "" then
            unit.extra_recruit = recruit
          else
            unit.extra_recruit = unit.extra_recruit..","..recruit
          end
          did_anything = true
        end
      end
    end
    
    if unit.profile ~= "unit_image" then
      unit.profile = "unit_image"
      did_anything = true
    end
  end
  return did_anything
end

EoHS.leadership_abilities = function(level)
  local result = {}
  for level2 = level-1,0,-1 do
    table.insert(result, { "leadership", {
      id = "leadership",
      cumulative = false,
      value = 25*(level-level2),
      affect_self = false,
      { "affect_adjacent", {
        adjacent = "n,ne,se,s,sw,nw",
        { "filter", {
          level = level2,
        }},
      }},
             name = (level2==level-1) and wesnoth.textdomain("wesnoth-help")("leadership") or nil,
      female_name = (level2==level-1) and wesnoth.textdomain("wesnoth-help")("female^leadership") or nil,
      description = (level2==level-1) and wesnoth.textdomain("wesnoth-help")("Leadership:\nThis unit can lead our own units that are next to it, making them fight better.\n\nAdjacent own units of lower level will do more damage in battle. When a unit adjacent to, of a lower level than, and on the same side as a unit with Leadership engages in combat, its attacks do 25% more damage times the difference in their levels.") or nil,
    }})
  end
  return result
end

>>)}

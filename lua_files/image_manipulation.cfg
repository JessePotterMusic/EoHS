{EOHS_LUA_FILE (<<-- image_manipulation.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

--[[

A "image_base" is an image string without mods.
A "image_modded" is an image string, possibly with mods.
A "image_layer" is an image_modded or {
  image_modded = image_modded
  offset = {x=,y=}
  character_center_offset = {x=,y=} (cumulative with offsx)
  weapon_head_offset = {x=,y=} (cumulative with offsx)
}
A "image_aggregate" is an image_layer or a list of image_layers, bottom to top.

]]

local is_layer_list = function(image_aggregate)
  return (type(image_aggregate) == "table") and not image_aggregate.image_modded
end
local is_empty_list = function(image_aggregate)
  return is_layer_list(image_aggregate) and not image_aggregate[1]
end
local layers = function(image_aggregate)
  if is_layer_list(image_aggregate) then return ipairs(image_aggregate) end
  local done = false
  return function()
    if done then return nil end
    done = true
    return 1,image_aggregate
  end
end

EoHS.offset_negated = function(offset)
  return { x = offset.x and -offset.x, y = offset.y and -offset.y }
end
EoHS.offset_translated = function(offset, offset_offset)
  return { x = offset.x and offset.x + (offset_offset.x or 0), y = offset.y and offset.y + (offset_offset.y or 0) }
end
EoHS.offset_relative_to_base_image = function(offset, image_layer)
  local result = EoHS.deep_copy(offset)
  local width, height = wesnoth.get_image_size(EoHS.get_image_base(image_layer))
  for mod in string.gmatch(EoHS.get_image_modded(image_layer), "~%a*%b()") do
    local crop_x, crop_y, crop_width, crop_height = string.match(mod, "^~CROP%((%d*),(%d*),(%d*),(%d*)%)")
    if crop_x then
      result = EoHS.offset_translated(result, { x=-crop_x, y=-crop_y })
      width = crop_width
      height = crop_height
    end
    local scale_width, scale_height = string.match(mod, "^~SCALE%((%d*),(%d*)%)")
    if scale_width then
      result.x = result.x and (result.x * scale_width  / width)
      result.y = result.y and (result.y * scale_height / height)
      width = scale_width
      height = scale_height
    end
  end
  result = EoHS.offset_translated(result, { x=-math.floor(width/2), y=-math.floor(height/2) })
  result.x = result.x and math.floor(result.x)
  result.y = result.y and math.floor(result.y)
  result = EoHS.offset_translated(result, EoHS.image_layer_offset(image_layer))
  return result
end

EoHS.image_rect = function(partial_image_rect)
  local result = EoHS.deep_copy(partial_image_rect)
  if not result.min then result.min = {} end
  if not result.max then result.max = {} end
  if not result.size then result.size = {} end
  if not result.offset then result.offset = {} end
    
  --convenience names
  if result.x1 then result.min.x = result.x1 end
  if result.x2 then result.max.x = result.x2 end
  if result.y1 then result.min.y = result.y1 end
  if result.y2 then result.max.y = result.y2 end
  if result.x then
    result.min.x = result.x
    result.max.x = result.x
  end
  if result.y then
    result.min.y = result.y
    result.max.y = result.y
  end
    
  local image_width, image_height
  if result.relative_to_base_image then image_width, image_height = wesnoth.get_image_size(result.relative_to_base_image) end
  if result.relative_to_base_image and result.min.x then result.min.x = result.min.x - math.floor(image_width /2) end
  if result.relative_to_base_image and result.max.x then result.max.x = result.max.x - math.floor(image_width /2) end
  if result.relative_to_base_image and result.min.y then result.min.y = result.min.y - math.floor(image_height/2) end
  if result.relative_to_base_image and result.max.y then result.max.y = result.max.y - math.floor(image_height/2) end
  for i,dim in ipairs{"x","y"} do
    if (result.min[dim] and 1 or 0) + (result.max[dim] and 1 or 0) + (result.size[dim] and 1 or 0) + (result.offset[dim] and 1 or 0) > 2 then EoHS.err("EoHS.image_rect overdefined") end
    if result.offset[dim] then
      if result.min[dim] then
        EoHS.err("EoHS.image_rect whyyyyy1")
      elseif result.max[dim] then
        EoHS.err("EoHS.image_rect whyyyyy2")
      elseif result.size[dim] then
        result.min[dim] = result.offset[dim] - math.floor(result.size[dim]/2)
        result.max[dim] = result.offset[dim] + math.ceil (result.size[dim]/2) - 1
      else
        EoHS.err("EoHS.image_rect whyyyyy3")
      end
    else
      if result.min[dim] then
        if result.max[dim] then
          result.size[dim] = 1 + result.max[dim]-result.min[dim]
        elseif result.size[dim] then
          result.max[dim] = result.min[dim]+result.size[dim] - 1
        else
          result.max[dim] = math.huge
          result.size[dim] = math.huge
        end
      elseif result.max[dim] then
        if result.size[dim] then
          result.min[dim] = 1 + result.max[dim]-result.size[dim]
        else
          result.min[dim] = -math.huge
          result.size[dim] = math.huge
        end
      elseif result.size[dim] and (result.size[dim] ~= math.huge) then
        EoHS.err("EoHS.image_rect Can't generate from size with neither max or min!")
      else
        result.min[dim] = -math.huge
        result.max[dim] = math.huge
        result.size[dim] = math.huge
      end
      
      result.offset[dim] = result.min[dim] + math.floor(result.size[dim]/2)
    end
    if result.max[dim]<result.min[dim] then return EoHS.image_rect_nowhere() end
  end
  
  return result
end

EoHS.image_rect_nowhere = function() return nil end
EoHS.image_rect_is_anywhere = function(image_rect) return image_rect~=nil end
EoHS.image_rect_balanced = function(image_rect)
  local result = EoHS.deep_copy(image_rect)
  for i,dim in ipairs{"x","y"} do
    local d = math.max(result.max[dim]+1, -result.min[dim])
    result.min[dim] = -d
    result.max[dim] = d-1
    result.size[dim] = d*2
    result.offset[dim] = 0
  end
  return result
end
EoHS.image_rect_intersection = function(image_rect1, image_rect2)
  if not (EoHS.image_rect_is_anywhere(image_rect1) and EoHS.image_rect_is_anywhere(image_rect2)) then return EoHS.image_rect_nowhere() end
    
  local result = { max={}, min={} }
  for i,dim in ipairs{"x","y"} do
    result.min[dim] = math.max(image_rect1.min[dim], image_rect2.min[dim])
    result.max[dim] = math.min(image_rect1.max[dim], image_rect2.max[dim])
  end
  return EoHS.image_rect(result)
end
EoHS.image_rect_superunion = function(image_rect1, image_rect2)
  if not EoHS.image_rect_is_anywhere(image_rect1) then return EoHS.deep_copy(image_rect2) end
  if not EoHS.image_rect_is_anywhere(image_rect2) then return EoHS.deep_copy(image_rect1) end
    
  local result = { max={}, min={} }
  for i,dim in ipairs{"x","y"} do
    result.min[dim] = math.min(image_rect1.min[dim], image_rect2.min[dim])
    result.max[dim] = math.max(image_rect1.max[dim], image_rect2.max[dim])
  end
  return EoHS.image_rect(result)
end
EoHS.image_rects_are_equal = function(image_rect1, image_rect2)
  for i,dim in ipairs{"x","y"} do
    if not (image_rect1.min[dim] == image_rect2.min[dim]) then return false end
    if not (image_rect1.max[dim] == image_rect2.max[dim]) then return false end
  end
  return true
end

EoHS.get_image_base = function(image_layer)
  -- EoHS.err("bar.."..EoHS.inspect(image_layer))
  if type(image_layer) == "string" then
    -- Hack to appease the macro TEAM_COLOR_OVERRIDE, which currently (1.10.6) uses "RC()" when it should use "~RC()"
    if string.match(image_layer, "pngRC") then return string.match(image_layer, "^(.-)RC") end
    return string.match(image_layer, "[^~]*")
  end
  return EoHS.get_image_base(image_layer.image_modded)
end

EoHS.get_image_modded = function(image_layer)
  if type(image_layer) == "string" then return image_layer end
  return image_layer.image_modded
end

EoHS.image_layer_offset = function(image_layer)
  if type(image_layer) == "string" then return {x=0,y=0} end
  return image_layer.offset
end

EoHS.full_image_layer_reference = function(image_layer)
  if type(image_layer) == "string" then return { image_modded=image_layer, offset={x=0,y=0}} end
  return image_layer
end
EoHS.full_image_layer_copy = function(image_layer)
  if type(image_layer) == "string" then return { image_modded=image_layer, offset={x=0,y=0}} end
  return EoHS.deep_copy(image_layer)
end

EoHS.image_aggregate_extents = function(image_aggregate)
  -- EoHS.err("foo.."..EoHS.inspect(image_aggregate))
  if is_layer_list(image_aggregate) then
  -- EoHS.err("bluh")
    local result = EoHS.image_rect_nowhere()
    for i,layer in ipairs(image_aggregate) do
      result = EoHS.image_rect_superunion(result, EoHS.image_aggregate_extents(layer))
    end
    return result
  else
  -- EoHS.err("blaaaa")
    local width, height = wesnoth.get_image_size(EoHS.get_image_base(image_aggregate))

    for mod in string.gmatch(EoHS.get_image_modded(image_aggregate), "~%a*%b()") do
      local crop_width, crop_height = string.match(mod, "^~CROP%(%d*,%d*,(%d*),(%d*)%)")
      if crop_width then
        width = crop_width
        height = crop_height
      end
      local scale_width, scale_height = string.match(mod, "^~SCALE%((%d*),(%d*)%)")
      if scale_width then
        width = scale_width
        height = scale_height
      end
    end
    -- EoHS.err(EoHS.inspect(width).."wh"..EoHS.inspect(height))
    return EoHS.image_rect{ size={x=width,y=height}, offset=EoHS.full_image_layer_reference(image_aggregate).offset }
  end
end

EoHS.image_aggregate_translated = function(image_aggregate, offset)
  if is_layer_list(image_aggregate) then
    local result = {}
    for i,layer in ipairs(image_aggregate) do
      table.insert(result, EoHS.image_aggregate_translated(layer, offset))
    end
    return result
  else
    local result = EoHS.full_image_layer_copy(image_aggregate)
    result.offset = EoHS.offset_translated(result.offset, offset)
    return result
  end
end

local function image_aggregate_cropped_or_masked(image_aggregate, crop_extents, mask_layer, negate)
  --EoHS.err(EoHS.inspect(crop_extents))
  if is_layer_list(image_aggregate) then
    local result = {}
    for i,layer in ipairs(image_aggregate) do
      local layer_result = image_aggregate_cropped_or_masked(layer, crop_extents, mask_layer, negate)
      for i,layer2 in layers(layer_result) do
        table.insert(result, layer2)
      end
    end
    return result
  else
    local extents = EoHS.image_aggregate_extents(image_aggregate)
    local cropped_extents = EoHS.image_rect_intersection(extents, crop_extents)
    if negate then
      if mask_layer then EoHS.err("image_aggregate_cropped_or_masked can't negate a mask") end
      if not EoHS.image_rect_is_anywhere(cropped_extents) then
        return EoHS.full_image_layer_copy(image_aggregate)
      elseif EoHS.image_rects_are_equal(extents, cropped_extents) then
        return {}
      else
        local result = {}
        local do_rect = function(rect)
          local cropped_image_aggregate = image_aggregate_cropped_or_masked(image_aggregate, EoHS.image_rect(rect))
          EoHS.assert(not is_layer_list(cropped_image_aggregate), "image_aggregate_cropped_or_masked unexpected behavior, "..EoHS.inspect(image_aggregate).."\n,\n"..EoHS.inspect(cropped_image_aggregate))
          for i,layer in layers(cropped_image_aggregate) do
            table.insert(result, layer)
          end
        end
        if cropped_extents.min.x > extents.min.x then
          do_rect{ min=extents.min, max={x=cropped_extents.min.x-1,y=extents.max.y} }
        end
        if cropped_extents.max.x < extents.max.x then
          do_rect{ min={x=cropped_extents.max.x+1,y=extents.min.y}, max=extents.max }
        end
        if cropped_extents.min.y > extents.min.y then
          do_rect{ min={x=cropped_extents.min.x,y=extents.min.y}, max={x=cropped_extents.max.x,y=cropped_extents.min.y-1} }
        end
        if cropped_extents.max.y < extents.max.y then
          do_rect{ min={x=cropped_extents.min.x,y=cropped_extents.max.y+1}, max={x=cropped_extents.max.x,y=extents.max.y} }
        end
        return result
      end
    else
      if not EoHS.image_rect_is_anywhere(cropped_extents) then
        return {}
      elseif EoHS.image_rects_are_equal(extents, cropped_extents) then
        return EoHS.full_image_layer_copy(image_aggregate)
      else
        local result = EoHS.full_image_layer_copy(image_aggregate)
        --[[local before_ending_crop = string.match(result.image_modded, "^(.*)~CROP%(%d*,%d*,%d*,%d*%)$")
        if before_ending_crop then
          result.image_modded = before_ending_crop
          extents = EoHS.image_aggregate_extents(result)
        end]]
        result.image_modded = (result.image_modded.."~CROP("..
          (cropped_extents.min.x-extents.min.x)..","..
          (cropped_extents.min.y-extents.min.y)..","..
          (cropped_extents.size.x)..","..
          (cropped_extents.size.y)..")")
        result.offset = EoHS.offset_translated(result.offset, {
          x = cropped_extents.offset.x-extents.offset.x,
          y = cropped_extents.offset.y-extents.offset.y,
        })
        if mask_layer then
          if (crop_extents.min.x < cropped_extents.min.x) or (crop_extents.min.y < cropped_extents.min.y) then
            -- Annoying: Have to crop the mask because negative coordinates don't work.
            mask_layer = image_aggregate_cropped_or_masked(mask_layer, cropped_extents)
          end
          result.image_modded = (result.image_modded.."~MASK("..mask_layer.image_modded..",0,0)")
        end
        return result
      end
    end
  end
end

EoHS.image_aggregate_cropped = function(image_aggregate, crop_params)
  return image_aggregate_cropped_or_masked(image_aggregate, EoHS.image_rect(crop_params))
end
EoHS.image_aggregate_split = function(image_aggregate, ...)
  local result = {image_aggregate}
  for i,crop_params in ipairs(arg) do
  --EoHS.err(EoHS.inspect(crop_params))
    local rect = EoHS.image_rect(crop_params)
    table.insert(result, image_aggregate_cropped_or_masked(result[1], rect))
    result[1] = image_aggregate_cropped_or_masked(result[1], rect, nil, true)
  end
  return unpack(result)
end

EoHS.image_aggregate_masked = function(image_aggregate, mask_layer)
  return image_aggregate_cropped_or_masked(image_aggregate, EoHS.image_aggregate_extents(mask_layer), mask_layer)
end

EoHS.image_aggregate_combine = function(image_aggregate1, ...)
  local result
  if is_layer_list(image_aggregate1) then
    result = EoHS.deep_copy(image_aggregate1)
  else
    result = {EoHS.deep_copy(image_aggregate1)}
  end
  for i,image_aggregate2 in ipairs(arg) do
    for i,layer in layers(image_aggregate2) do
      table.insert(result, layer)
    end
  end
  return result
end

local naive_blit_onto = function(image_modded1, extents1, image_layer2)
  local extents2 = EoHS.image_aggregate_extents(image_layer2)
  return (image_modded1.."~BLIT("..
    (EoHS.get_image_modded(image_layer2))--[[.."~CS("..math.random(255)..","..math.random(255)..","..math.random(255)..")"]]..","..
    (extents2.min.x-extents1.min.x)..","..
    (extents2.min.y-extents1.min.y)..")")
end

EoHS.collapse_image_aggregate = function(image_aggregate, to)
  -- EoHS.err("baz.."..EoHS.inspect(image_aggregate))
  if is_empty_list(image_aggregate) then EoHS.err("Can't collapse an empty image_aggregate") end
  if (to == "image_layer") and not is_layer_list(image_aggregate) then return image_aggregate end
  local extents = EoHS.image_aggregate_extents(image_aggregate)
  local result
  local use_first_layer = false
  if (to == "image_layer") or ((extents.offset.x == 0) and (extents.offset.y == 0)) then
    if to ~= "override_mod" then
      if not is_layer_list(image_aggregate) then
        use_first_layer = true
      else
        local first_layer_extents = EoHS.image_aggregate_extents(image_aggregate[1])
        if EoHS.image_rects_are_equal(first_layer_extents, extents) then
          use_first_layer = true
        end
      end
    end
  else
    extents = EoHS.image_rect_balanced(extents)
  end
  
  result = ""
  for i,layer in layers(image_aggregate) do
    if (i==1) and use_first_layer then result = EoHS.get_image_modded(layer) else result = naive_blit_onto(result, extents, layer) end
  end
  
  if to == "override_mod" then
    return "~O(0)~SCALE("..(extents.size.x)..","..(extents.size.y)..")"..result
  else
    if string.match(result, "^~") then result = "misc/blank-hex.png~SCALE("..(extents.size.x)..","..(extents.size.y)..")"..result end
    
    if to == "image_layer" then return { image_modded = result, offset = extents.offset } end
    if to == "image_modded" then return result end
  end
end

EoHS.make_image_aggregate_frame = function(image_aggregate, frame)
  if not frame then frame = {} end
  if is_empty_list(image_aggregate) then
    EoHS.err("Why are you making a frame from an empty list?")
    return frame
  end
  local image_layer = EoHS.full_image_layer_reference(EoHS.collapse_image_aggregate(image_aggregate, "image_layer"))
  frame.primary = false
  frame.auto_vflip = false
  frame.image         = image_layer.image_modded
  frame.directional_x = image_layer.offset.x
  frame.y             = image_layer.offset.y
  return frame
end

>>)}

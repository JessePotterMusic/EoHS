{EOHS_LUA_FILE (<<-- game_action_simulations.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.game_action_simulations = {
  --unit get_advanced_unit(const unit &u, const std::string& advance_to)
  --{
  advance_unit_internal = function(unit, advance_to)
    if type(advance_to) == "table" then
      --support AMLA here?
      EoHS.err("TODO")
    end
    --const unit_type *new_type = unit_types.find(advance_to);
    local new_type = wesnoth.unit_types[advance_to]
    
    --if (!new_type) {
    if not new_type then
      --throw game::game_error("Could not find the unit being advanced"
      --  " to: " + advance_to);
      EoHS.err("Could not find the unit being advanced to: "..advance_to)
    --}
    end
    --unit new_unit(u);
    --new_unit.set_experience(new_unit.experience() - new_unit.max_experience());
    unit.experience = unit.experience - unit.max_experience
    --new_unit.advance_to(new_type);
    EoHS.transform_unit(unit, advance_to)
    unit.hitpoints = unit.max_hitpoints
    --new_unit.set_state(unit::STATE_POISONED, false);
    EoHS.set_subtag_attribute(unit, "status.poisoned", false)
    --new_unit.set_state(unit::STATE_SLOWED, false);
    EoHS.set_subtag_attribute(unit, "status.slowed", false)
    --new_unit.set_state(unit::STATE_PETRIFIED, false);e
    EoHS.set_subtag_attribute(unit, "status.petrified", false)
    --new_unit.set_user_end_turn(false);
    --new_unit.set_hidden(false);
    EoHS.set_subtag_attribute(unit, "status.uncovered", true)
    --return new_unit;
  --}
  end,
  
  advance_unit_on_map = function(x, y, advance_to, animate, fire_event)
    EoHS.assert(EoHS.location_is_on_the_map(x,y), "EoHS.game_action_simulations.advance_unit_on_map with off-map unit")
    local unit = EoHS.get_unit(x, y)
    EoHS.assert(unit, "EoHS.game_action_simulations.advance_unit_on_map no unit")
    EoHS.assert(unit.experience >= unit.max_experience, "EoHS.game_action_simulations.advance_unit_on_map with unit that shouldn't advance")
    
    if animate then
      wesnoth.fire("animate_unit", {
        { "filter", { x=x, y=y }},
        flag="levelout"
      })
    end
    
    if fire_event then
      local original_type = unit.type
      wesnoth.fire_event("advance", x, y)
      -- Note: In 1.10.7 there appears to be a bug where AMLA (and only AMLA) overwrites the results of an advance event.
      -- I have no desire to faithfully replicate this bug, since no scenario should rightly rely on it.
      unit = EoHS.get_unit(x, y)
      if not (unit and (unit.experience >= unit.max_experience) and (unit.type == original_type)) then return end
    end
    
    EoHS.game_action_simulations.advance_unit_internal(unit, advance_to)
    EoHS.put_unit(unit)
    
    if fire_event then
      wesnoth.fire_event("post_advance", x, y)
      unit = EoHS.get_unit(x, y)
      if not unit then return end
    end
    
    if animate then
      wesnoth.fire("animate_unit", {
        { "filter", { x=x, y=y }},
        flag="levelin"
      })
    end
  end,
  
  

  --void attack_unit(const map_location &attacker, const map_location &defender,
  --        int attack_with, int defend_with, bool update_display)
  --{
  attack_unit = function(ax, ay, dx, dy, a_weapon_index, d_weapon_index)
    --attack dummy(attacker, defender, attack_with, defend_with, update_display);
    --dummy.perform();
  --}
  end,
}

>>)}

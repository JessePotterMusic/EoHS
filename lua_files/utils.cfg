{EOHS_LUA_FILE (<<-- utils.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.err = function(string)
  wesnoth.fire("wml_message", { logger="err", message=(_"EoHS error: ")..string })
end
EoHS.assert = function(condition, string)
  if not condition then EoHS.err(string) end
end

EoHS.message = function(string, source_unit_id)
  local sides_list = ""
  if source_unit_id then
    local wunit = wesnoth.get_unit(source_unit_id)
    -- Get all sides that can see the unit, to display the cast message only to those sides.
    for side_number in ipairs(wesnoth.sides) do
      if wesnoth.match_unit(wunit, { { "filter_vision", { viewing_side=side_number }} }) then
        if sides_list == "" then sides_list = ""..side_number
        else sides_list = sides_list..","..side_number end
      end
    end
  end
  wesnoth.fire("chat", { speaker = "EoHS", message = string, side = sides_list })
end

EoHS.get_variable = function(name)
  return wesnoth.get_variable("EoHS."..name)
end

EoHS.set_variable = function(name, value)
  wesnoth.set_variable("EoHS."..name, value)
end

EoHS.get_side_variables = function(side)
  return EoHS.get_variable("side["..side.."]")
end
EoHS.get_side_variable = function(side, name)
  return EoHS.get_variable("side["..side.."]."..name)
end
EoHS.set_side_variable = function(side, name, value)
  EoHS.set_variable("side["..side.."]."..name, value)
end

EoHS.synchronized = false
local nested_events = 0
EoHS.begin_event = function()
  nested_events = nested_events + 1
  if nested_events == 1 then
    EoHS.synchronized = true
    EoHS.gave_alert_this_event = false
    EoHS.puttable_unit_tables = {}
  end
end
EoHS.end_event = function()
  nested_events = nested_events - 1
  if nested_events == 0 then
    EoHS.synchronized = false
    EoHS.puttable_unit_tables = nil
  end
end

EoHS.give_alert = function()
  if not EoHS.gave_alert_this_event then
    wesnoth.play_sound("bell.wav")
    EoHS.gave_alert_this_event = true
  end
end

EoHS.random = function(randstring)
  if not EoHS.synchronized then EoHS.err("EoHS.random used in an unsynchronized context") end
  wesnoth.fire("set_variable", { name="EoHS.LUA_TEMP", rand=randstring })
  local result = wesnoth.get_variable("EoHS.LUA_TEMP")
  wesnoth.set_variable("EoHS.LUA_TEMP")
  return result
end

EoHS.synchronize_choice = function(human_func, ai_func)
  if not EoHS.synchronized then EoHS.err("EoHS.synchronize_choice used in an unsynchronized context") end
  EoHS.synchronized = false
  local result = wesnoth.synchronize_choice(
    function() return { { "result", human_func() } } end,
    function() return { { "result", (ai_func or human_func)() } } end)
  if result == nil then EoHS.err("EoHS.synchronize_choice used in an invalid situation") end
  EoHS.synchronized = true
  return result[1][2]
end

EoHS.if_side_is_local_human = function(side, human_func)
  if wesnoth.sides[side].controller == "human" then
    local old_sync = EoHS.synchronized
    EoHS.synchronized = false
    human_func()
    EoHS.synchronized = old_sync
  end
end

EoHS.substitute = function(string, values)
  local old_values = {}
  for k,v in pairs(values) do
    old_values[k] = wesnoth.get_variable(k)
    wesnoth.set_variable(k,v)
  end
  string = (wesnoth.tovconfig{string=string}).string
  for k,v in pairs(old_values) do
    wesnoth.set_variable(k,v)
  end
  return string
end

EoHS.is_on_the_map = { "filter_location", {} } -- TODO: confirm this works
EoHS.location_is_on_the_map = function(x,y)
  if (not x) or (not y) then return false end
  local w,h = wesnoth.get_map_size()
  if (x < 1) or (y < 1) or (x > w) or (y > h) then return false end
  return true
end

EoHS.unit_is_visible = function(unit_id, side)
  return wesnoth.match_unit(wesnoth.get_unit(unit_id), { { "filter_vision", { viewing_side = side or wesnoth.current.side }} })
end

EoHS.terrain_is_impassable = function(terrain)
  return string.match(terrain, "[_X]")
end

local make_puttable = function(unit)
  if EoHS.synchronized then
    if not EoHS.puttable_unit_tables[unit.underlying_id] then EoHS.puttable_unit_tables[unit.underlying_id] = {} end
    EoHS.puttable_unit_tables[unit.underlying_id][unit] = true
  end
end

EoHS.get_units = function(filter)
  local result = wesnoth.get_units(filter)
  for i,wunit in ipairs(result) do
    result[i] = wunit.__cfg
    make_puttable(result[i])
  end
  return result
end

EoHS.get_unit = function(...)
  local result = wesnoth.get_unit(unpack(arg))
  if result then
    result = result.__cfg
    make_puttable(result)
    return result
  end
end

EoHS.transformed_unit = function(unit, unit_type)
  local proxy_unit = wesnoth.create_unit(unit)
  wesnoth.transform_unit(proxy_unit, unit_type or unit.type)
  local result = proxy_unit.__cfg
  result.hitpoints = unit.hitpoints
  make_puttable(result)
  return result
end

EoHS.transform_unit = function(unit, unit_type)
  EoHS.shallow_overwrite(unit, EoHS.transformed_unit(unit, unit_type))
end

EoHS.at_beginning_of_event_get_autostored_unit = function(varname)
  local unit = wesnoth.get_variable(varname)
  if not puttable_unit_tables[unit.underlying_id] then puttable_unit_tables[unit.underlying_id] = {} end
  puttable_unit_tables[unit.underlying_id][unit] = true
  return unit
end

EoHS.put_unit = function(unit)
  if not EoHS.puttable_unit_tables then EoHS.err("EoHS.put_unit called not during an event") end
  if not EoHS.synchronized then EoHS.err("EoHS.put_unit used in an unsynchronized context") end
  if unit.underlying_id then
    if not EoHS.puttable_unit_tables[unit.underlying_id] then EoHS.err("EoHS.put_unit that was never gotten in an synchronized context") end
    if not EoHS.puttable_unit_tables[unit.underlying_id][unit] then EoHS.err("EoHS.put_unit probably overwriting earlier EoHS.put_unit") end
    EoHS.puttable_unit_tables[unit.underlying_id] = {}
  end
  local x = tonumber(unit.x)
  local y = tonumber(unit.y)
  if (not x) or (not y) then EoHS.err("EoHS.put_unit at "..unit.x..","..unit.y..", which is not a location") end
  local w,h = wesnoth.get_map_size()
  if (x < 1) or (y < 1) or (x > w) or (y > h) then EoHS.err("EoHS.put_unit at "..unit.x..","..unit.y..", which is off the map") end
  wesnoth.put_unit(unit)
end

EoHS.shallow_overwrite = function(dst, src)
  for k,v in pairs(dst) do dst[k]=nil end
  for k,v in pairs(src) do dst[k]=v end
end
EoHS.deep_overwrite = function(dst, src)
  for k,v in pairs(dst) do dst[k]=nil end
  for k,v in pairs(src) do dst[k]=EoHS.deep_copy(v) end
end

EoHS.tags_are_identical = function(tag1, tag2)
  local one_sided = function(tag1, tag2)
    for k,v1 in pairs(tag1) do
      local v2 = tag2[k]
      if getmetatable(v1) == "translatable string" then
        -- ignore translatable strings.
      elseif type(v1) == "table" then
        -- the only tables are subtags, with the requisite format.
        if type(v2) ~= "table" then return false end
        if v2[1] ~= v1[1] then return false end
        if not EoHS.tags_are_identical(v1[2], v2[2]) then return false end
      else
        -- these could be strings, numbers... tostring() them all because we might have set some of them to numbers and some to number-strings in Lua
        if tostring(v1) ~= tostring(v2) then return false end
      end
    end
    return true
  end
  return one_sided(tag1, tag2) and one_sided(tag2, tag1)
end

EoHS.comma_separated_values = function(s)
  return string.gmatch(s, "[^%s,][^,]*")
end
EoHS.lua_pattern_escape = function(s)
  return (s:gsub('[%-%.%+%[%]%(%)%$%^%%%?%*]','%%%1'):gsub('%z','%%z'))
end

EoHS.get_subtag = function(table_, subtag_path)
  local last_idx
  for name in string.gmatch(subtag_path, "[^.]+") do
    if not table_ then return nil end
    table_,last_idx = helper.get_child(table_, name)
  end
  return table_,last_idx
end
EoHS.force_subtag = function(table_, subtag_path)
  local last_idx
  for name in string.gmatch(subtag_path, "[^.]+") do
    local subtag,index = helper.get_child(table_, name)
    if subtag then
      table_,last_idx = subtag,index
    else
      if table_[name] ~= nil then EoHS.err("EoHS.force_subtag overwrote an attribute with a tag") end
      table.insert(table_, { name, {} })
      table_,last_idx = table_[#table_][2],#table_
    end
  end
  return table_,last_idx
end
EoHS.get_subtag_attribute = function(table_, path)
  local current = table_
  for name in string.gmatch(path, "[^.]+") do
    if type(current) ~= "table" then return nil end
    local next = helper.get_child(current, name)
    if next then
      current = next
    else
      current = current[name]
    end
  end
  return current
end
EoHS.set_subtag_attribute = function(table_, path, value)
  local path_list = {}
  for name in string.gmatch(path, "[^.]+") do
    table.insert(path_list, name)
  end
  for i,name in ipairs(path_list) do
    local subtag,index = helper.get_child(table_, name)
    if path_list[i+1] then
      if subtag then
        table_ = subtag
      else
        if table_[name] ~= nil then EoHS.err("EoHS.set_subtag_attribute overwrote an attribute with a tag in the middle") end
        table.insert(table_, { name, {} })
        table_ = table_[#table_][2]
      end
    else
      if type(value) == "table" then
        if table_[name] ~= nil then EoHS.err("EoHS.set_subtag_attribute overwrote an attribute with a tag") end
        if subtag then
          table_[index][2] = value
        else
          table.insert(table_, { name, value })
        end
      else
        if subtag then
          EoHS.err("EoHS.set_subtag_attribute overwrote a tag with an attribute")
        else
          table_[name] = value
        end
      end
    end
  end
end

EoHS.get_unit_variables_tag = function(unit)
  return EoHS.get_subtag(unit, "variables.EoHS")
  --[[local a = EoHS.get_subtag(unit, "variables")
  if not a return nil end
  return EoHS.get_subtag(a, "EoHS")]]
end
EoHS.force_unit_variables_tag = function(unit)
  return EoHS.force_subtag(unit, "variables.EoHS")
  --return EoHS.force_subtag(EoHS.force_subtag(unit, "variables"), "EoHS")
end

EoHS.get_unit_variable = function(unit, name)
  return EoHS.get_subtag_attribute(unit, "variables.EoHS."..name)
end
EoHS.set_unit_variable = function(unit, name, value)
         EoHS.set_subtag_attribute(unit, "variables.EoHS."..name, value)
end

EoHS.has_unit_variables = function(vars)
  return { "filter_wml", {
      { "variables", {
        { "EoHS", vars }
      }}
    }}
end

EoHS.has_unit_variable = function(path, value)
  if value == nil then value = true end
  local vars = {}
  EoHS.set_subtag_attribute(vars, path, value)
  return EoHS.has_unit_variables(vars)
end

EoHS.find_path = function(x1,y1,x2,y2,cost_func,maximum)
  if maximum then
    return EoHS.find_path(x1,y1,x2,y2,function(x,y,current_cost)
      local cost = cost_func(x,y,current_cost)
      if not cost then return nil end
      if current_cost+cost+helper.distance_between(x,y,x2,y2) > maximum then return nil end
      return cost
    end)
  else
    return wesnoth.find_path(x1,y1,x2,y2,function(x,y,current_cost)
      local cost = cost_func(x,y,current_cost)
      if cost then
        if cost < 1 then EoHS.err("EoHS.find_path cost_func gave invalid cost") end
        if cost+current_cost >= 10000 then EoHS.err("EoHS.find_path exceeded wesnoth's arbitrary, undocumented limit") end
        return cost
      else
        return 10001
      end
    end)
  end
end
EoHS.distance_between = function(x1,y1,x2,y2,cost_func,maximum)
  if cost_func then
    local path,cost = EoHS.find_path(x1,y1,x2,y2,cost_func,maximum)
    return cost
  else
    return helper.distance_between(x1,y1,x2,y2)
  end
end

EoHS.passable_only = function(x, y, current_cost)
  if EoHS.terrain_is_impassable(wesnoth.get_terrain(x, y)) then return nil end
  return 1
end
  
EoHS.restrict_contained_filter = function(contents, filter_tagname, filter)
  for i,tag in ipairs(contents) do
    if tag[1] == filter_tagname then
      table.insert(contents, { "and", filter })
      return
    end
  end
  table.insert(contents, { filter_tagname, filter })
end

EoHS.unit_type_considering_variations = function(unit)
  local result = wesnoth.unit_types[unit.type].__cfg
  for i,tag in ipairs(result) do
    if tag[1] == "base_unit" then EoHS.err("A base_unit was left around, do we need to handle it?") end
    if (tag[1] == unit.gender) or ((tag[1] == "variation") and ((tag[2].variation_id or tag[2].variation_name) == unit.variation)) then
      if tag[2].inherit then
        wesnoth.set_variable("EoHS.LUA_TEMP", result)
        wesnoth.fire("set_variables", { name = "EoHS.LUA_TEMP", mode = "merge", { "literal", tag[2] }})
        result = wesnoth.get_variable("EoHS.LUA_TEMP")
        wesnoth.set_variable("EoHS.LUA_TEMP")
      else
        result = tag[2]
      end
    end
  end
  return result
end

EoHS.check_wml_table = function(wml_table, prefix)
  if not prefix then prefix = "" end
  local err = function(str) EoHS.err("EoHS.check_wml_table"..prefix..": "..str) end
  if type(wml_table) == "table" then
    for k,v in pairs(wml_table) do
      if type(k) == "number" then
        if type(v) == "table" then
          if type(v[1]) == "string" then
            EoHS.check_wml_table(v[2],prefix.."["..v[1].."]")
          else
            err(type(v[1]) == "string", "Non-string tagname: ["..k.."] = "..EoHS.inspect(v, {depth=2}))
          end
        else
          err("Non-table at integer index: ["..k.."] = "..EoHS.inspect(v))
        end
      else
        if type(v) == "table" then
          err("Table at non-integer index: ["..k.."] = "..EoHS.inspect(v, {depth=1}))
        elseif type(v) == "function" then
          err("Attribute is a function: ["..k.."] = "..EoHS.inspect(v))
        end
      end
    end
  else
    err("WML table is not a table at all, but "..EoHS.inspect(v))
  end
end

>>)}

{EOHS_LUA_FILE (<<-- utils.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.err = function(string)
  wesnoth.fire("wml_message", { logger="err", message=(_"EoHS error: ")..string })
end

EoHS.get_variable = function(name)
  return wesnoth.get_variable("EoHS."..name)
end

EoHS.set_variable = function(name, value)
  wesnoth.set_variable("EoHS."..name, value)
end

EoHS.synchronize_choice = function(human_func, ai_func)
  local result = wesnoth.synchronize_choice(
    function() return { { "result", human_func() } end,
    function() return { { "result", ai_func() } end)
  if result == nil then
    EoHS.err("EoHS.synchronize_choice used in an invalid situation")
  end
  return result
end

EoHS.get_units = function(filter)
  local result = wesnoth.get_variable("EoHS."..name)
  for i,wunit in ipairs(result) do
    result[i] = wunit.__cfg
  end
  return result
end

EoHS.put_unit = function(unit)
  wesnoth.put_unit(unit)
end

EoHS.deep_copy = function(table)
  local tables = {}
  local process_table = function(subtable)
    if tables[subtable] == nil then
      tables[subtable] = {}
      for k,v in pairs(subtable) do
        if type(v) == "table" then tables[subtable][k] = process_table(v)
        else tables[subtable][k] = v end
      end
    end
    return tables[subtable]
  end
  return process_table(table)
end

EoHS.get_subtag = helper.get_child
EoHS.force_subtag = function(table_, subtag_name)
  local subtag,index = helper.get_child(table_, subtag_name)
  if subtag == nil then
    table.insert(table_, { subtag_name, {} })
    return table_[#table_][2],#table_
  else
    return subtag,index
  end
end

EoHS.force_unit_variables_tag = function(unit)
  return EoHS.force_subtag(EoHS.force_subtag(unit, "variables"), "EoHS")
end

EoHS.set_unit_variable = function(unit, name, value)
  EoHS.force_unit_variables_tag(unit)[name] = value
end

EoHS.has_unit_variables = function(vars)
  return { "filter_wml", {
      { "variables", {
        { "EoHS", vars }
      }}
    }}
end

EoHS.has_unit_variable = function(name, value)
  if value == nil then value = true end
  local vars = {}
  vars[name] = value
  return EoHS.has_unit_variables(vars)
end

--[[
EoHS.dialog_grid = function(rows, columns, ...)
  local result = { "grid", {} }
  for r = 1, rows do
    local row = { "row", {} }
    for c = 1, columns do
      local column = { "column", {} }
      local idx = (r-1)*columns + c
      if idx > arg[n] then
      table.insert(column[2], arg[idx])
      table.insert(row[2], column)
    end
    table.insert(result[2], row)
  end
  return result
end
]]

>>)}

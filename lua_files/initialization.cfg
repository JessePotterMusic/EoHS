{EOHS_LUA_FILE (<<-- initialization.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.init_campaign = function(player_picks_settings)
  EoHS.begin_event() -- Most of the time we put these outside the function, directly in the [lua] code=,
  -- but here we want the campaign-initing command - the only thing called directly from WML -
  -- to be as short as possible.
  
  EoHS.set_variable("player_picks_settings", player_picks_settings)
  EoHS.set_variable("settings_inited", false)
  EoHS.set_variable("client_local_trainings", {})
  EoHS.set_variable("show_menu_item", false)
  wesnoth.fire("set_menu_item", {
    id = "EoHS_menu_item",
    image = "icons/scroll_red.png~SCALE(20,20)",
    description = _"EoHS actions",
    { "show_if", {
      { "variable", {
        name="EoHS.show_menu_item",
        boolean_equals="true",
      }}
    }},
    { "command", {
      { "lua", {
        code = [[--EoHS.menu_item_invoked
EoHS.begin_event()
EoHS.menu_item_invoked()
EoHS.end_event()]]
      }},
    }},
  })
  -- TODO: remove this before releasing
  wesnoth.fire("set_menu_item", {
    id = "EoHS_zdebug_menu_item",
    image = "icons/scroll_red.png~SCALE(20,20)~GS()~CS(-50,0,0)",
    description = _"EoHS debug mode",
    { "show_if", {
      { "variable", {
        name="EoHS.debug_mode",
        boolean_equals="false",
      }}
    }},
    { "command", {
      { "set_variable", {
        name = "EoHS.debug_mode", value = true
      }},
    }},
  })
  
  for side in ipairs(wesnoth.sides) do
    EoHS.init_side_variables(side)
    EoHS.set_side_variable(side, "persistent_variables", {})
  end
  
  local leaders = EoHS.get_units({ canrecruit=true, type="Red Mage" })
  for i,unit in ipairs(leaders) do
    EoHS.set_unit_variable(unit, "is_starting_wizard", true)
    EoHS.set_side_variable(unit.side, "original_nick", unit.name)
    if type(unit.name) == "string" then
      EoHS.set_side_variable(unit.side, "original_nick_hash", EoHS.sha1(unit.name))
    end
    local modifications = EoHS.force_subtag(unit, "modifications")
    local variables = EoHS.force_unit_variables_tag(unit)
    local skillset = EoHS.force_subtag(variables, "skillset")
    variables.is_wizard = true
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_wizard",
      name = _"wizard",
      description = _"This unit is immune to direct damage from spells, and it can only lose a quarter of its max hitpoints each time it's attacked. Beyond that, combat stops immediately.",
      --{ "effect", { apply_to="ellipse", ellipse="misc/ellipse-leader" } }, -- TODO remove in 1.11 as it's redundant with canrecruit=true
    }})
    table.insert(skillset, { "dress_up_options", EoHS.random_dress_up_options(unit) })
    -- variables.is_mounted = true -- TODO remove
    -- table.insert(variables, {"mount",wesnoth.create_unit{type="Fire Dragon"}.__cfg}) -- TODO remove
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = nil
    EoHS.put_unit(unit)
  end
  EoHS.init_scenario()
  
  EoHS.end_event()
end

EoHS.init_scenario = function()
  EoHS.standardize_units()
  for i,event in pairs(EoHS.events) do
    wesnoth.fire("event", event)
  end
  EoHS.set_variable("scenario_inited", true)
end

EoHS.init_settings = function()
  EoHS.set_variable("settings_inited", true)
  
  if EoHS.get_variable("player_picks_settings") then
    EoHS.current_player_picks_settings()
  else
    EoHS.set_variable("settings", EoHS.map_specific_default_settings())
  end
  
  EoHS.set_variable("show_menu_item", true)
  
  local local_player_has_something_to_preselect = false
  local leaders = EoHS.get_units({ EoHS.has_unit_variable("is_starting_wizard") })
  for i,unit in ipairs(leaders) do
    local variables = EoHS.force_unit_variables_tag(unit)
    local settings = EoHS.force_subtag(variables, "settings")
    local skillset = EoHS.force_subtag(variables, "skillset")
    EoHS.init_wizard_settings(settings)
    EoHS.init_skillset(skillset)
    local level = EoHS.get_wizard_setting(unit, "starting_level")
    if level <= 1 then
      unit.type = "Mage"
      EoHS.set_unit_variable(unit, "level_adjustment", level-1)
    elseif level == 2 then
      unit.type = "Red Mage"
    elseif level == 3 then
      unit.type = "Arch Mage"
    elseif level >= 4 then
      unit.type = "Great Mage"
      EoHS.set_unit_variable(unit, "level_adjustment", level-4)
    else EoHS.err("bad starting level") end
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = nil
    EoHS.set_unit_variable(unit, "mana", EoHS.unit_mana_cap(unit) or 0)
    EoHS.put_unit(unit)
    
    EoHS.do_only_on_client_controlling_human_side(unit.side, function()
      local_player_has_something_to_preselect = true
    end)
  end
  if local_player_has_something_to_preselect then
    EoHS.local_player_can_preselect_skills()
  end
end

EoHS.create_oneshot_event = function(name, code)
  wesnoth.fire("event", {
    name = name,
    { "lua", {
      code = [[--EoHS.create_oneshot_event("]]..name..[[", ...)
EoHS.begin_event()
]]..code..[[
EoHS.end_event()]]
    }},
  })
end

table.insert(EoHS.events, {
  name = "preload",
  first_time_only = "no",
  { "insert_tag", {
    name = "command",
    variable = "EoHS.preload"
  }},
})

EoHS.next_scenario_initing_event_names = {
  "prestart", "start", "side_turn", "turn_refresh", "side_turn_end", "prerecruit", "recruit", "moveto"
  -- deliberately omitted: attack (because the combat events rely on the fact that they all exist before the combat),
  -- preload (because it could create different behavior after a load)
}
EoHS.next_scenario_initing_event = function(name)
  return { "event", {
    name = name,
    id = "EoHS_next_scenario_initing_event_"..name,
    first_time_only = "no",
    { "filter_condition", {
      { "variable", {
        name = "EoHS.scenario_inited",
        boolean_equals = false
      }},
    }},
    { "insert_tag", {
      name = "command",
      variable = "EoHS.preload"
    }},
    { "lua", {
      code = [[--EoHS.next_scenario_initing_event("]]..name..[[")
EoHS.begin_event()
EoHS.init_scenario()
EoHS.end_event()]]
    }},
  }}
end

-- These events can normally be undone, so we don't want to trigger events on them unless we have to.
-- But we do want units to be standardized ASAP if the scenario does something!
-- We could standardize units in non-synchronized events too - or in moveto events and allow undoing -
--   but that doesn't seem worth the risk.
EoHS.selective_unit_standardization_event_names = {
  "moveto"
}
EoHS.selective_unit_standardization_event = function(name)
  return {
    name = name,
    first_time_only = "no",
    { "filter_condition", {
      { "have_unit", {
        EoHS.is_on_the_map,
        lua_function = "EoHS_standardize_wunit"
      }},
    }},
    { "lua", {
      code = [[--EoHS.selective_unit_standardization_event
EoHS.begin_event()
EoHS.standardize_units()
EoHS.end_event()]]
    }},
  }
end
for i,name in ipairs(EoHS.selective_unit_standardization_event_names) do
  table.insert(EoHS.events, EoHS.selective_unit_standardization_event(name))
end

EoHS.standardize_units = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
  end
end

--[[local opposite_filters = {
  self = "opponent",
  opponent = "self",
  attacker = "defender",
  defender = "attacker",
}]]

_G.EoHS_standardize_wunit = function(wunit) EoHS.standardize_unit(wunit.__cfg) end
EoHS.standardize_unit = function(unit)
  local subtag_ids = {}
  local did_anything = false
  for i,subtag in ipairs(unit) do
    if subtag[2].id then subtag_ids[subtag[2].id] = true end
    if subtag[1] == "attack" then
      local special_ids = {}
      local specials = EoHS.force_subtag(subtag[2], "specials")
      for i,special in ipairs(specials) do
        if special[2].id then special_ids[special[2].id] = true end
        --[[
          Mage Shield issues:
           Later comment:
             Whoops - (1) is simply incorrect, and for (2), there was an easier way to do it, which is that multiply=0 always zeroes the CTH.
             However, I'm leaving this code here in case I need it for something later.
           
            1) After an attack event, if another attack event invalidates the combat, then the attack_end event DOES NOT occur.
              So we'd prefer not to set any temporaries in the attack event that can't be fixed before they cause problems.
            2) If a slowing attack hits, we in fact CANNOT stop the slow effect or remove it before it reduces the next swing's damage.
              Therefore, we must make the attacks all miss. There's no way to override (for instance) magical, so we have to disable it.
              Due to (1), we don't want to remove it outright, only to modify it so that it fails to apply in attacks against Mage Shield.
              Thus, the filter:
              {"not",{ EoHS.has_unit_variable("unhittable") }}
              must be applied to all [chance_to_hit] specials, except for the special one that makes shielded units unhittable.
              But it's worse than that! The filter needed depends on the special's apply_to=. For any of the four normal values,
              I have to filter the opposite one, and for apply_to=both, I have to *split the special in two* so that I can
              stop them from hitting mage shields without changing the shielded unit's own chance to hit (or vice versa).
        ]]
        --[[if (special[1] == "chance_to_hit") and not (special[2].id = "EoHS_cant_hit_unhittable_units") then
          local required_filter = {"not",{ EoHS.has_unit_variable("unhittable") }}
          local add_to_filter = function(filter)
            -- The [not] has to be last - otherwise there could be an [or] after it
            local last = filter[1] and filter[#filter]
            if not (last and (last[1] == "not") and (EoHS.get_subtag_attribute(last[2], "filter_wml.variables.EoHS.unhittable") == true)) then
              table.insert(filter, required_filter)
              did_anything = true
            end
          end
          local apply_to = special[2].apply_to or "self"
          local opposite = opposite_filters[apply_to]
          if opposite then
            add_to_filter(EoHS.force_subtag(special[2], "filter_"..opposite))
          else
            EoHS.assert(apply_to=="both", "Found bad weapon special apply_to value")
            -- Interestingly, it doesn't matter which of the two axes we split it along. I find self/opponent more elegant though.
            local other_special = EoHS.deep_copy(special)
                  special[2].apply_to = "self"    ; table.insert(EoHS.force_subtag(      special[2], "filter_opponent"), required_filter)
            other_special[2].apply_to = "opponent"; table.insert(EoHS.force_subtag(other_special[2], "filter_self"    ), required_filter)
            table.insert(specials, other_special)
            did_anything = true
          end
        end]]
      end
      for i,special in ipairs(EoHS.universal_attack_specials) do
        if not special_ids[special.id] then
          table.insert(specials, special)
          did_anything = true
        end
      end
    end
  end
  for i,name in ipairs(EoHS.next_scenario_initing_event_names) do
    if not subtag_ids["EoHS_next_scenario_initing_event_"..name] then
      table.insert(unit, EoHS.next_scenario_initing_event(name))
      did_anything = true
    end
  end
  if EoHS.update_unit_graphics(unit) then did_anything = true end -- too slow? TODO evaluate speed of standardize_unit
  return did_anything
end


local scenario_over_event = function()
  EoHS.standardize_units()
  EoHS.set_variable("show_menu_item", false)
  EoHS.set_variable("scenario_inited", false)
  for side in ipairs(wesnoth.sides) do
    EoHS.score_for_side_completing_game(side)
  end
  EoHS.score_for_game_ending()
end
EoHS.set_simple_event("victory", scenario_over_event)
EoHS.set_simple_event("defeat", scenario_over_event)
EoHS.set_simple_event("side_turn", function()
  local init_needed = not EoHS.get_variable("settings_inited")
  EoHS.update_and_share_persistent_variables_of_current_side(init_needed)
  if init_needed then EoHS.init_settings() end
  
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    local put = false
    if EoHS.standardize_unit(unit) then put = true end
    if unit.side == wesnoth.current.side then
      if EoHS.earn_mana_income(unit) then put = true end
      if EoHS.get_unit_variable(unit, "extra_action_points") ~= 5 then
        EoHS.set_unit_variable(unit, "extra_action_points", 5)
        put = true
      end
    end
    if put then EoHS.put_unit(unit) end
  end
  --EoHS.menu_item_invoked()
end)
EoHS.set_simple_event("turn_refresh", function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
  end
  
  if EoHS.get_variable("client_local_preselect_side_turn") == wesnoth.current.side then
    EoHS.set_variable("client_local_preselect_side_turn")
    EoHS.local_player_can_preselect_skills()
  end
  
  local prepared_trainings = EoHS.synchronize_choice(function() return EoHS.get_variable("client_local_trainings") end, function() return {ai=true} end)
  if prepared_trainings.ai then
    EoHS.set_side_variable(wesnoth.current.side, "was_ever_ai", true)
    for i,unit in ipairs(units) do
      if EoHS.get_unit_variable(unit, "is_wizard") then
        if EoHS.choose_alliance_for_ai(unit) then EoHS.put_unit(unit) end
      end
    end
  else
    local i = 1
    while prepared_trainings[i] do
      local prepared_training = prepared_trainings[i][2]
      local unit = EoHS.get_unit(prepared_training.trainer_id)
      if unit.side == wesnoth.current.side then
        prepared_training.trainer_id = nil
        EoHS.set_unit_skillset(unit, prepared_training)
        EoHS.put_unit(unit)
        table.remove(prepared_trainings, i)
      else
        i = i + 1
      end
    end
    EoHS.do_only_on_client_controlling_human_side(wesnoth.current.side, function()
      EoHS.set_variable("client_local_trainings", prepared_trainings)
    end)
  end
end)
EoHS.set_simple_event("side_turn_end", function()
  EoHS.standardize_units()
  -- can't, side turn end events aren't synced
  --EoHS.update_and_share_persistent_variables_of_current_side()
end)
EoHS.set_simple_event("advance", function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.should_adjust_level_next(unit) then
    EoHS.set_unit_variable(unit, "adjust_level_this_advancement", true)
    EoHS.put_unit(unit)
  end
end)
EoHS.set_simple_event("post_advance", function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  EoHS.standardize_unit(unit)
  local adjust_level_this_advancement = EoHS.get_unit_variable(unit, "adjust_level_this_advancement")
  if adjust_level_this_advancement then
    EoHS.set_unit_variable(unit, "adjust_level_this_advancement")
    EoHS.set_unit_variable(unit, "level_adjustment", (EoHS.get_unit_variable(unit, "level_adjustment") or 0) + 1)
  end
  EoHS.update_all_type_adjustments(unit)
  if adjust_level_this_advancement then
    -- It seems that when a unit levels up into its own type, it doesn't get fully healed.
    -- This behavior is undesirable.
    unit.hitpoints = unit.max_hitpoints
  end
  EoHS.put_unit(unit)
end)
EoHS.set_simple_event("prerecruit", function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  EoHS.standardize_unit(unit)
  
  --EoHS eliminates upkeep
  if not EoHS.get_unit_variable(unit, "is_summon") then
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, EoHS.macros.TRAIT_LOYAL[1])
  end

  EoHS.put_unit(unit)
end)

>>)}

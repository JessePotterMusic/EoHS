{EOHS_LUA_FILE (<<-- initialization.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.init_campaign = function(player_picks_settings)
  EoHS.set_variable("show_menu_item", false)
  wesnoth.fire("set_menu_item", {
    id = "EoHS_menu_item",
    image = "attacks/staff-magic.png~SCALE(36,36)",
    description = _"EoHS actions",
    { "show_if", {
      { "variable", {
        name="EoHS.show_menu_item",
        boolean_equals="true",
      }}
    }},
    { "command", {
      { "lua", {
        code = "EoHS.menu_item_invoked()"
      }},
    }},
  })
  local leaders = EoHS.get_units({ canrecruit=true, type="Red Mage" })
  for i,leader in ipairs(leaders) do
    EoHS.set_unit_variable(leader, "is_starting_wizard", true)
    EoHS.put_unit(leader)
  end
  EoHS.init_scenario()
  
  if player_picks_settings then
    EoHS.create_settings_picking_event()
  else
    EoHS.set_variable("settings", EoHS.map_specific_default_settings())
    EoHS.init_campaign_with_settings()
  end
end

EoHS.init_scenario = function()
  for i,event in pairs(EoHS.events) do
    wesnoth.fire("event", event)
  end
  EoHS.set_variable("scenario_inited", true)
end

EoHS.init_campaign_with_settings = function()
  EoHS.set_variable("show_menu_item", true)
  local leaders = EoHS.get_units({ EoHS.has_unit_variable("is_starting_wizard") })
  for i,leader in ipairs(leaders) do
    
    EoHS.put_unit(leader)
  end
end

EoHS.events = {}

EoHS.set_simple_event = function(name, func)
  table.insert(EoHS.event_functions, func)
  table.insert(EoHS.events, { name = name, first_time_only = "no", { "lua", { code = "EoHS.event_functions["..#EoHS.event_functions.."]" }} })
end

EoHS.set_simple_event("preload", function()
  wesnoth.fire("insert_tag", {
    name = "command",
    variable = "EoHS.preload"
  })
end)

EoHS.next_scenario_initing_event_names = {
  "prestart", "start", "side_turn", "turn_refresh", "side_turn_end", "prerecruit", "recruit", "moveto"
  -- deliberately omitted: attack (because the combat events rely on the fact that they all exist before the combat),
  -- preload (because it could create different behavior after a load)
}
EoHS.next_scenario_initing_event = function(name)
  return { "event", {
    name = name,
    id = "EoHS_next_scenario_initing_event_"..name,
    first_time_only = "no",
    { "filter_condition", {
      { "variable", {
        name = "EoHS.scenario_inited",
        boolean_equals = false
      }},
    }},
    { "insert_tag", {
      name = "command",
      variable = "EoHS.preload"
    }},
    { "lua", {
      code = "EoHS.init_scenario()"
    }},
  }}
end

-- These events can normally be undone, so we don't want to trigger events on them unless we have to.
-- But we do want units to be standardized ASAP if the scenario does something!
EoHS.selective_unit_standardization_event_names = {
  "moveto"
}
EoHS.selective_unit_standardization_event = function(name)
  return { "event", {
    name = name,
    first_time_only = "no",
    { "filter_condition", {
      { "have_unit", {
        EoHS.is_on_the_map,
        lua_function = "EoHS.standardize_wunit"
      }},
    }},
    { "lua", {
      code = "EoHS.standardize_units()"
    }},
  }}
end
for i,name in ipairs(EoHS.selective_unit_standardization_event_names) do
  table.insert(EoHS.events, EoHS.selective_unit_standardization_event(name))
end

EoHS.standardize_units = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
  end
end

EoHS.standardize_wunit = function(wunit) EoHS.standardize_unit(wunit.__cfg) end
EoHS.standardize_unit = function(unit)
  local subtag_ids = {}
  local did_anything = false
  for i,subtag in ipairs(unit) do
    subtag_ids[subtag[2].id] = true
    if subtag[1] == "attack" then
      local special_ids = {}
      local specials = EoHS.force_subtag(subtag[2], "specials")
      for i,special in ipairs(specials) do
        special_ids[special[2].id] = true
      end
      for i,special in ipairs(EoHS.univeral_attack_specials) do
        if not special_ids[special[2].id] then
          table.insert(specials, special)
          did_anything = true
        end
      end
    end
  end
  for i,name in ipairs(EoHS.next_scenario_initing_event_names) do
    if not subtag_ids["EoHS_next_scenario_initing_event_"..name] then
      table.insert(unit, EoHS.next_scenario_initing_event(name))
      did_anything = true
    end
  end
  return did_anything
end


-- TODO: move this function to a wizard utils file
EoHS.earn_mana_income = function(unit)
  if EoHS.turn_number > 1 then -- parallel to built-in rule about gold income
    local mincome = EoHS.unit_mana_income(unit)
    if mincome ~= 0 then
      local mcap = EoHS.unit_mana_cap(unit)
      local old_mana = EoHS.get_unit_variable(unit, "mana")
      if (type(mcap) ~= "number") or (old_mana < mcap) then
        local new_mana = old_mana + mincome
        if (type(mcap) == "number") and (new_mana > mcap) then
          new_mana = mcap
        end
        EoHS.set_unit_variable(unit, "mana", new_mana)
        return true
      end
    end
  end
  return false
end


local scenario_over_event = function()
  EoHS.standardize_units()
  EoHS.set_variable("show_menu_item", false)
  EoHS.set_variable("scenario_inited", false)
end
EoHS.set_simple_event("victory", scenario_over_event)
EoHS.set_simple_event("defeat", scenario_over_event)
EoHS.set_simple_event("side_turn", function()
  EoHS.standardize_units()
end)
EoHS.set_simple_event("turn_refresh", function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    local put = false
    if EoHS.standardize_unit(unit) then put = true end
    if EoHS.earn_mana_income(unit) then put = true end
    if put then EoHS.put_unit(unit) end
  end
end)
EoHS.set_simple_event("side_turn_end", function()
  EoHS.standardize_units()
end)

>>)}

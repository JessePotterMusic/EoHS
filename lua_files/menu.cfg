{EOHS_LUA_FILE (<<-- menu.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end
local l = function(label) return {"label",{label=label}} end
local spacer = { "spacer", {}}

EoHS.show_menu = function(is_preselect)
  if is_preselect then EoHS.give_alert() end
    
  local arbitrary_side_you_control
  if is_preselect then 
    for side in ipairs(wesnoth.sides) do
      EoHS.do_only_on_client_controlling_human_side(side, function()
        arbitrary_side_you_control = side
      end)
    end
    EoHS.assert(arbitrary_side_you_control, "EoHS menu used by someone who controls no sides")
  else
    arbitrary_side_you_control = wesnoth.current.side
  end
  
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local trainers = {}
  local actors   = {}
  for i,unit in ipairs(units) do
    if ((not is_preselect) and (unit.side == wesnoth.current.side)) or
        (is_preselect and (wesnoth.sides[unit.side].controller == "human")) then
      if                        EoHS.unit_can_train  (unit) then table.insert(trainers, unit) end
      if (not is_preselect) and EoHS.unit_has_actions(unit) then table.insert(actors  , unit) end
    end
  end
  local sides_with_units = {}
  for i,unit in ipairs(units) do
    sides_with_units[unit.side] = true
  end
  
  local sx,sy = wesnoth.get_selected_tile()
  local dwu = wesnoth.get_displayed_unit()
  local trainers_sort = function(a,b)
    sa = EoHS.unit_skill_points_left(a)
    sb = EoHS.unit_skill_points_left(b)
    if (sa > 0) and (sb <= 0) then return true  end
    if (sb > 0) and (sa <= 0) then return false end
    if         a.x ==    sx and a.y ==    sy then return true  end
    if         b.x ==    sx and b.y ==    sy then return false end
    if dwu and a.x == dwu.x and a.y == dwu.y then return true  end
    if dwu and b.x == dwu.x and b.y == dwu.y then return false end
    if sa > sb then return true  end
    if sb > sa then return false end
    return a.underlying_id < b.underlying_id
  end
  local actors_sort = function(a,b)
    if         a.x ==    sx and a.y ==    sy then return true  end
    if         b.x ==    sx and b.y ==    sy then return false end
    if dwu and a.x == dwu.x and a.y == dwu.y then return true  end
    if dwu and b.x == dwu.x and b.y == dwu.y then return false end
    -- TODO: compare AP and distance
    return a.underlying_id < b.underlying_id
  end
  table.sort(trainers, trainers_sort)
  table.sort(actors, actors_sort)
  
  local finished = false
  local ok = false
  local result = {}
  local mode, subject
  local secret
  local parameters = {
    target_x = wesnoth.get_variable("x1"),
    target_y = wesnoth.get_variable("y1"),
  }
  local old_skillsets = {}
  for i,unit in ipairs(trainers) do
    local skillset = EoHS.get_unit_skillset(unit)
    if not skillset then EoHS.err("skillset not inited") end
    old_skillsets[unit.underlying_id] = EoHS.deep_copy(skillset)
  end
  local set_subject = function(new_subject)
    subject = new_subject
    parameters.actor_id = subject.underlying_id
  end
  local set_mode = function(new_mode)
    mode = new_mode
  end
  if trainers[1] and (EoHS.unit_skill_points_left(trainers[1]) > 0) then
    set_mode("training")
  elseif actors[1] then
    set_mode("actions")
  else
    set_mode("instructions")
  end
  
  local loc_info_grid = function(x,y)
    local unit = EoHS.get_unit(x,y)
    if unit then
      --return unit_info_grid(unit)
    end
    return g{r{c{ {"label",{label = "("..x..","..y..")"}} }}}
    -- TODO a picture
  end
  
  while not finished do
    if mode == "training" and not (subject and EoHS.unit_can_train(subject)) then set_subject(trainers[1]) end
    if mode == "actions" then
      if not (subject and EoHS.unit_has_actions(subject)) then set_subject(actors[1]) end
      if not (parameters.action_id and EoHS.unit_has_action(subject, parameters.action_id)) then parameters.action_id = EoHS.unit_actions(subject)[1] end
    end
    local d = EoHS.make_dialog_context(function() finished = true; ok = true end, function() finished = true end)
    
    local modes_row = {}
    do
      local make_mode_button = function(button_mode, name, image)
        local canvas_extras = { {"text",{
          x = "(if(text_width < (width+2-height), ((width+2-height) - text_width) / 2 + (height-2), height-4))",
          y = EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w = "(text_width)",
          h = "(text_height)",
          font_size = 14,
          color = "221, 221, 221, 255",
          text = name,
        }}, {"image",{
          x = 2,
          y = 2,
          w = "(height-4)",
          h = "(height-4)",
          name = image,
        }} }
        table.insert(modes_row, c{ EoHS.fake_listbox_entry(d, name.."mmmmmm\nm\nm", canvas_extras, mode == button_mode, function() set_mode(button_mode) end) })
      end
      if trainers[1] then      make_mode_button("training"    , _"Training"     , "attacks/woodensword.png") end
      if   actors[1] then      make_mode_button("actions"     , _"Actions"      , "attacks/staff-magic.png") end
                               make_mode_button("instructions", _"Instructions" , "icons/letter_and_ale.png")
                               make_mode_button("settings"    , _"View settings", "icons/crossed_sword_and_hammer.png")
      if not is_preselect then make_mode_button("misc"        , _"Misc"         , "icons/dress_silk_green.png") end
      if EoHS.get_variable("debug_mode") and not is_preselect then
                               make_mode_button("debug"       , _"Debug"        , "attacks/gaze.png") end
    end
    local modes_grid = g{r(modes_row)}
    
    local subjects_row = {}
    do
      local make_subject_button = function(button_subject)
        local extra_strings = {}
        if mode == "training" then
          table.insert(extra_strings, EoHS.substitute("$1| SP",{EoHS.unit_skill_points_left(button_subject)}))
        end
        if mode == "actions" then
          table.insert(extra_strings, EoHS.substitute("$1| AP",{EoHS.unit_action_points(button_subject)}))
          local mana = EoHS.get_unit_variable(button_subject, "mana")
          if mana then
            table.insert(extra_strings, EoHS.substitute("$1| mana",{mana}))
          end
        end
        table.insert(subjects_row, c{ EoHS.fake_listbox_entry(d, "mmmmmmmmmmmmmm\nm\nm\nm", EoHS.unit_info_canvas(button_subject, extra_strings), subject == button_subject, function() set_subject(button_subject) end) })
      end
      if mode == "training" then for i,unit in ipairs(trainers) do make_subject_button(unit) end end
      if mode == "actions"  then for i,unit in ipairs(  actors) do make_subject_button(unit) end end
    end
    local subjects_grid = g{r(subjects_row)}
    
    local move_target_button = function(direction)
      return d.button({label=direction}, function()
        parameters.target_x,parameters.target_y = EoHS.get_loc_in_direction(parameters.target_x,parameters.target_y, direction)
      end)
    end
    local target_grid = g{
      r{ c{spacer}, c{move_target_button("n")}, c{spacer} },
      r{ c{g{r{c{move_target_button("nw")}},r{c{move_target_button("sw")}}}}, c{loc_info_grid(parameters.target_x,parameters.target_y)}, c{g{r{c{move_target_button("ne")}},r{c{move_target_button("se")}}}} },
      r{ c{spacer}, c{move_target_button("s")}, c{spacer} },
    }
    local contents
    if mode == "training" then
      local training_grid = EoHS.training_dialog_grid(d, subject, old_skillsets[subject.underlying_id])
      contents = g{
        r{c{subjects_grid}},
        r{c{training_grid}},
      }
    end
    if mode == "actions" then
      local switch_func = function(id)
        return function()
          parameters.action_id = id
        end
      end
      local actions_grid = g{
        r{ c{EoHS.action_list_dialog_grid(d,parameters,switch_func)}, c{EoHS.action_dialog_stuff(d,parameters)} },
      }
      contents = g{
        r{c{g{r{c{subjects_grid},c{target_grid}}}}},
        r{c{actions_grid}},
      }
    end
    if mode == "settings" then
      contents = EoHS.settings_dialog_grid(d, EoHS.get_variable("settings"), false)
    end
    if mode == "instructions" then
      contents = {"label",{label=_"TODO Rules desc here"}}
    end
    if mode == "misc" then
      local misc_rows = {}
      table.insert(misc_rows, r{c{ border="all", border_size=7, l(EoHS.substitute(_"You have won games against $1| enemy wizards.", {EoHS.num_players_defeated(arbitrary_side_you_control)})) }})
      table.insert(misc_rows, r{c{ border="all", border_size=7, l(EoHS.substitute(_"You have introduced $1| new players to Era of High Sorcery\nby playing complete games with them.", {EoHS.num_players_defeated(arbitrary_side_you_control)})) }})
      table.insert(misc_rows, r{c{ border="all", border_size=7, l(_"(These stats only count complete games, and ignore sides\nthat switched their controller between the beginning and the end.)") }})
      table.insert(misc_rows, r{c{ border="all", border_size=17, l(EoHS.substitute(_"You have played Era of High Sorcery on $1| separate days.", {EoHS.get_potentially_out_of_date_persistent_variable(arbitrary_side_you_control, "total_days_played")})) }})

      if not is_preselect then
        local next_side = wesnoth.current.side
        local can_end_turn_and_train
        while true do
          next_side = next_side + 1
          if not wesnoth.sides[next_side] then next_side = 1 end
          if next_side == wesnoth.current.side then
            can_end_turn_and_train = false
            break
          end
          if sides_with_units[next_side] and (wesnoth.sides[next_side].controller == "human") then
            can_end_turn_and_train = false
            break
          end
          if sides_with_units[next_side] and (wesnoth.sides[next_side].controller == "network") and not EoHS.get_side_variable(next_side, "was_ever_ai") then
            can_end_turn_and_train = true
            break
          end
        end
        table.insert(misc_rows, r{c{ border="top", border_size=22, d.button({label=_"End turn and train", id="end_turn_and_train_button"}, function()
          -- NOT returned, not synchronized
          EoHS.set_variable("client_local_preselect_side_turn", next_side)
          table.insert(result, { "end_turn_and_train", {} })
          finished = true
        end) }})
        table.insert(misc_rows, r{c{ border="all", border_size=2, l(_"This allows you to choose your skills and/or appearance on the next\nplayer's turn, so that the other players don't have to wait for you.\nHowever, the changes won't take effect until your following turn.") }})
        if not can_end_turn_and_train then
          table.insert(misc_rows, r{c{ border="all", border_size=4, l(_"Currently, the next player is also you, so this isn't useful.") }})
          d.preshow(function() wesnoth.set_dialog_active(false, "end_turn_and_train_button") end)
        end
        d.postshow(function() secret = wesnoth.get_dialog_value("secret_magics_box") end)
        table.insert(misc_rows, r{c{ border="top", border_size=45, {"text_box",{id="secret_magics_box"}} }})
        table.insert(misc_rows, r{c{ border="bottom", border_size=15, {"button",{label=_"Invoke secret magics",id="ok"}} }})
      end
      contents = g(misc_rows)
    end
    if mode == "debug" then
      local debug_rows = {
        r{c{ d.button({label=_"Debug EoHS variables"}, function()
          local debug_vars = EoHS.deep_copy(wesnoth.get_variable("EoHS"))
          if EoHS.debug_table(debug_vars) then
            table.insert(result, { "debug_set_vars", debug_vars })
            finished = true
          end
        end) }},
      }
      local debug_unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
      if debug_unit then
        table.insert(debug_rows, r{c{ d.button({label=_"Debug this unit"}, function()
          if EoHS.debug_table(debug_unit) then
            table.insert(result, { "debug_put_unit", debug_unit })
            finished = true
          end
        end) }})
      end
      contents = g(debug_rows)
    end
    --EoHS.err(EoHS.inspect(contents))
    d.show(g{
      r{c{modes_grid}},
      r{c{g{r{c{ {"spacer",{height=400}} },c{contents}}}}}
    })
  end
  
  for i,unit in ipairs(trainers) do
    if EoHS.unit_skill_points_left(unit) >= 0 then
      local training = EoHS.get_unit_skillset(unit)
      if not EoHS.tags_are_identical(training, old_skillsets[unit.underlying_id]) then
        training = EoHS.deep_copy(training)
        training.trainer_id = unit.underlying_id
        table.insert(result, { "training", training })
      end
    end
  end
  if ok and (mode == "actions") and parameters.action_id then
    if EoHS.err("TODO") then
      table.insert(result, { "action", parameters })
    end
  end
  if ok and secret then
    if secret == "carnelian" then
      table.insert(result, { "activate_debug_mode", {} })
    end
    for side,info in ipairs(wesnoth.sides) do
      if (info.controller == "human") and EoHS.is_valid_supporter_password(side, secret) then
        table.insert(result, { "add_supporter_password", { side = side, password = secret } })
        break
      end
    end
  end
  return result
end

EoHS.menu_item_invoked = function()
  EoHS.standardize_units()
  EoHS.update_and_share_persistent_variables_of_current_side()
  local choice = EoHS.synchronize_choice(EoHS.show_menu, function() EoHS.err("An AI invoked the EoHS menu item?!?") end)
  
  for i,instruction in ipairs(choice) do
    if instruction[1] == "training" then
      local unit = EoHS.get_unit(instruction[2].trainer_id)
      instruction[2].trainer_id = nil
      EoHS.set_unit_skillset(unit, instruction[2])
      EoHS.put_unit(unit)
    end
    if instruction[1] == "action" then
      EoHS.do_action(instruction[2])
    end
    if instruction[1] == "end_turn_and_train" then
      wesnoth.fire("end_turn", {})
    end
    if instruction[1] == "add_supporter_password" then
      EoHS.add_supporter_password(instruction[2].side, instruction[2].password)
    end
    if instruction[1] == "activate_debug_mode" then
       wesnoth.fire("print", {
         text = _"EoHS debug mode has been turned on!",
         size = 50,
         duration = 150,
         red=255,green=255,blue=255,
       })
      EoHS.set_variable("debug_mode", true)
    end
    if instruction[1] == "debug_put_unit" then
      EoHS.put_unit(instruction[2])
    end
    if instruction[1] == "debug_set_vars" then
      wesnoth.set_variable("EoHS", instruction[2])
    end
  end
end

>>)}

{EOHS_LUA_FILE (<<-- menu.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end
local spacer = { "spacer", {}}

EoHS.menu_item_invoked = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
  end
  local choice = EoHS.synchronize_choice(function()
    local trainers = {}
    local actors = {}
    for i,unit in ipairs(units) do
      if unit.side == wesnoth.current.side then
        if EoHS.unit_can_train  (unit) then table.insert(trainers, unit) end
        if EoHS.unit_has_actions(unit) then table.insert(actors, unit) end
      end
    end
    
    local sx,sy = wesnoth.get_selected_tile()
    local dwu = wesnoth.get_displayed_unit()
    local trainers_sort = function(a,b)
      if         a.x ==    sx and a.y ==    sy then return true  end
      if         b.x ==    sx and b.y ==    sy then return false end
      if dwu and a.x == dwu.x and a.y == dwu.y then return true  end
      if dwu and b.x == dwu.x and b.y == dwu.y then return false end
      sa = EoHS.unit_skill_points_left(a)
      sb = EoHS.unit_skill_points_left(b)
      if sa > sb return true  end
      if sb > sa return false end
      return a.underlying_id < b.underlying_id
    end
    local actors_sort = function(a,b)
      if         a.x ==    sx and a.y ==    sy then return true  end
      if         b.x ==    sx and b.y ==    sy then return false end
      if dwu and a.x == dwu.x and a.y == dwu.y then return true  end
      if dwu and b.x == dwu.x and b.y == dwu.y then return false end
      -- TODO: compare AP and distance
      return a.underlying_id < b.underlying_id
    end
    table.sort(trainers, trainers_sort)
    table.sort(actors, actors_sort)
    
    local finished = false
    local result
    local mode, subject, selected_action_id
    local parameters = {
      target_x = wesnoth.get_variable("x1"),
      target_y = wesnoth.get_variable("y1"),
    }
    local selected_skillsets = {}
    local set_subject = function(new_subject)
      subject = new_subject
      parameters.actor_id = subject.underlying_id
    end
    local set_mode = function(new_mode)
      mode = new_mode
      if mode == "training" and not (subject and EoHS.unit_can_train  (subject)) then set_subject(trainers[1]) end
      if mode == "actions"  and not (subject and EoHS.unit_has_actions(subject)) then set_subject(  actors[1]) end
    end
    if trainers[1] and EoHS.unit_skill_points_left(trainers[1]) then
      set_mode("training")
      subject = trainers[1]
    elseif actors[1] then
      set_mode("actions")
    else
      set_mode("instructions")
    end
    
    local unit_info_grid = function(unit)
      local rows = {}
      if unit.name ~= "" then
        table.insert(rows, r{c{ {"label",{label = unit.name}} }})
      else
        table.insert(rows, r{c{ {"label",{label = unit.language_name}} }})
      end
      table.insert(rows, r{c{ {"label",{label = "("..unit.x..","..unit.y..")"}} }})
      if EoHS.unit_has_actions(unit) and unit.side == wesnoth.current.side then
        table.insert(rows, r{c{ {"label",{label = EoHS.substitute("$1| AP",{EoHS.unit_action_points(unit)})}} }})
      end
      local mana = EoHS.get_unit_variable(unit, "mana")
      if mana then
        table.insert(rows, r{c{ {"label",{label = EoHS.substitute("$1| mana",{mana})}} }})
      end
      
      return g{r{c{ {"image",{label = EoHS.unit_image_72x72(unit)}} },c{g(rows)}}}
    end
    local loc_info_grid = function(x,y)
      local unit = EoHS.get_unit(x,y)
      if unit then
        return unit_info_grid(unit)
      end
      return g{r{c{ {"label",{label = "("..unit.x..","..unit.y..")"}} }}}
      -- TODO a picture
    end
    
    while not finished do
      local d = EoHS.make_dialog_context(function()
        if (mode == "actions") and selected_action_id then
          if can do action selected_action_id then
            finished = true
            result = { type="action", actor_id = subject.underlying_id, action_id = selected_action, {"parameters",parameters} }
          end
        end
        if mode == "training" then
          if has enough points then
            finished = true
            result = { type="training", subject = subject.underlying_id, {"skillset",selected_skillsets[subject.underlying_id] } }
          end
        end
      end, function()
        finished = true
        result = { type="cancel" }
      end)
      
      local modes_row = {}
      do
        local make_mode_button = function(button_mode, name)
          if mode == button_mode then
            table.insert(modes_row, c{ {"label",{label = name}} })
          else
            table.insert(modes_row, c{d.button({label = name}, function() set_mode(button_mode) end)})
          end
        end
        if trainers[1] then make_mode_button("training", _"Training") end
        if   actors[1] then make_mode_button("actions" , _"Actions" ) end
        make_mode_button("instructions", _"Instructions")
      end
      local modes_grid = g{r(modes_row)}
      
      local subjects_row = {}
      do
        local make_subject_button = function(button_subject)
          if subject == button_subject then
            table.insert(subjects_row, g{r{c{unit_info_grid(subject)}}})
          else
            table.insert(subjects_row, g{r{c{unit_info_grid(subject)}},
              r{c{d.button({label = _"select"}, function() set_subject(button_mode) end)}}})
          end
        end
        if mode == "training" then for i,unit in ipairs(trainers) do make_subject_button(unit) end end
        if mode == "actions"  then for i,unit in ipairs(  actors) do make_subject_button(unit) end end
      end
      local subjects_grid = g{r(subjects_row)}
      
      local move_target_button = function(direction)
        return d.button({label=direction}, function()
          parameters.target_x,parameters.target_y = EoHS.get_loc_in_direction(parameters.target_x,parameters.target_y, direction)
        end)
      end
      local target_grid = g{
        r{ c{spacer}, c{move_target_button("n")}, c{spacer} },
        r{ c{g{r{c{move_target_button("nw")}},r{c{move_target_button("sw")}}}}, c{loc_info_grid(target_x,target_y)}, c{g{r{c{move_target_button("ne")}},r{c{move_target_button("se")}}}} },
        r{ c{spacer}, c{move_target_button("s")}, c{spacer} },
      }
      local contents
      if mode == "training" then
        contents = g{
          r{c{subjects_grid}},
          r{c{training_grid}},
        }
      end
      if mode == "actions" then
        local actions_grid = g{
          r{ c{spacer}, c{EoHS.action_dialog_grid(d,EoHS.actions[selected_action_id],parameters)} },
        }
        contents = g{
          r{c{g{r{c{subjects_grid},c{target_grid}}}}},
          r{c{actions_grid}},
        }
      end
      if mode == "instructions" then
        contents = {"label",{label=_"Rules desc here"}}
      end
      d.show({
        {"tooltip",{}},
        {"helptip",{}},
        g{r{c{modes_grid}},r{c{contents}}}
      })
    end
    return result
  end, function() EoHS.err("An AI invoked the EoHS menu item?!?") end)
  
  if choice.type == "training" then
    local unit = EoHS.get_unit(choice.subject)
    EoHS.set_unit_skillset(unit, choice[1][2])
    EoHS.put_unit(unit)
  end
  if choice.type == "action" then
    EoHS.do_action(EoHS.actions[choice.action_id], choice[1][2])
  end
end

>>)}

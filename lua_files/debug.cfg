{EOHS_LUA_FILE (<<-- debug.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery

EoHS.dump_profiling = function()
  local sorted = {}
  for k,v in pairs(EoHS.profiling) do
    table.insert(sorted, {k,v})
  end
  table.sort(sorted, function(a,b) return a[2].incl < b[2].incl end)
  local cropnum = function(n)
    local str = ""..n
    local int, low = string.match(n, "([^%.])%.?(.?.?.?)")
    return string.rep(" ",math.max(0,4-string.len(int)))..int.."."..low..string.rep("0",3-string.len(low))
    
  end
  for i,kv in ipairs(sorted) do
    EoHS.err(string.rep(" ",math.max(0,80-string.len(kv[1])))..kv[1]..": "..cropnum(kv[2].incl)..", "..cropnum(kv[2].self)..", "..kv[2].calls)
  end
end

local pack = function(...) return arg end
EoHS.debug_command = function(command_table)
  if (command_table.command == "enable_profiling") and not EoHS.profiling then
    EoHS.profiling = {}
    for k,v in pairs(EoHS) do if type(v) == "function" then
      EoHS[k] = function(...)
        EoHS.profiling_stack = { name = k, up = EoHS.profiling_stack }
        local prof = EoHS.profiling[k] or {}
        EoHS.profiling[k] = prof
        prof.calls = (prof.calls or 0) + 1
        prof.incl = (prof.incl or 0)
        prof.self = (prof.self or 0)
        local cl1 = os.clock()
        local results = pack(v(...))
        local cl2 = os.clock()
        prof.incl = prof.incl + (cl2 - cl1)
        prof.self = prof.self + (cl2 - cl1)
        EoHS.profiling_stack = EoHS.profiling_stack.up
        if EoHS.profiling_stack then
          local up_prof = EoHS.profiling[EoHS.profiling_stack.name]
          up_prof.self = up_prof.self - (cl2 - cl1)
        end
        return unpack(results)
      end
    end end
  end

  local fighting_types = {"Dark Adept","Wose"}
  if command_table.command == "enable_fighting" then
    for i,unit in ipairs(EoHS.get_units({ EoHS.is_on_the_map })) do
      unit.attacks_left = 500
      unit.moves = 500
      unit.hitpoints = 100
      unit.experience = unit.max_experience - 6
      EoHS.put_unit(unit)
    end
    for i,loc in ipairs(wesnoth.get_locations({ {"not",{{"filter",{}}}}, {"filter_adjacent_location",{{"filter",{}}}} })) do
      EoHS.put_unit({ x=loc[1], y=loc[2], side=math.random(1,#wesnoth.sides),
        type= fighting_types[EoHS.random("1.."..#fighting_types)],
        attacks_left = 500,
        hitpoints = math.random(1,80),
        moves = 500
      })
    end
    finished = true
  end
end

EoHS.debug_table = function(input)
  local finished = false
  local retval
  local open_tables = {}
  while not finished do
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local l = function(label) return {"label",{label=label}} end
    local d = EoHS.make_dialog_context(function()
      finished = true
      retval = true
    end, function()
      finished = true
      retval = false
    end)
    
    local last_id = 0
    local make_id = function()
      last_id = last_id + 1
      return last_id
    end
    
    local function table_grid(t, opennesses)
      local rows = {}
      local function entry_grid(k,v)
        local id = make_id()
        if type(v) == "table" then
          local is_tag = (type(v[1]) == "string") and (type(v[2]) == "table")
          local focus_button = ((opennesses.DEBUG_TABLE_GRID_FOCUS==k)
            and d.button({ label=_"unfocus" }, function()
                opennesses.DEBUG_TABLE_GRID_FOCUS = nil
              end)
            or d.button({ label=_"focus" }, function()
                opennesses[k] = opennesses[k] or {true,{}}
                opennesses[k][1] = true
                opennesses.DEBUG_TABLE_GRID_FOCUS = k
              end))
          if opennesses[k] and opennesses[k][1] then
            return g{
              r{c{horizontal_alignment="left", g{r{
                c{horizontal_alignment="left", l(is_tag and "["..v[1].."]" or "{")},
                c{horizontal_alignment="left", d.button({ label=_"close" }, function()
                  opennesses[k][1] = false
                  if opennesses.DEBUG_TABLE_GRID_FOCUS == k then opennesses.DEBUG_TABLE_GRID_FOCUS = nil end
                end)},
                c{horizontal_alignment="left", focus_button},
              }}}},
              r{c{horizontal_alignment="left", border="left", border_size=15, table_grid(is_tag and v[2] or v, opennesses[k][2])}},
              r{c{horizontal_alignment="left", l(is_tag and "[/"..v[1].."]" or "}")}},
            }
          else
            return g{r{
              c{horizontal_alignment="left", l(is_tag and "["..v[1].."]" or "{}")},
              c{horizontal_alignment="left", d.button({ label=_"open" }, function()
                opennesses[k] = opennesses[k] or {true,{}}
                opennesses[k][1] = true
              end)},
              c{horizontal_alignment="left", focus_button},
            }}
          end
        else
          d.postshow(function()
            local val = wesnoth.get_dialog_value("text_box"..id)
            if val ~= tostring(v) then t[k]=val end
          end)
          return g{r{
            c{horizontal_alignment="left", {"text_box",{ id="text_box"..id, label=tostring(v) }}},
          }}
        end
      end
      if opennesses.DEBUG_TABLE_GRID_FOCUS then
        table.insert(rows, r{c{horizontal_alignment="left",
          g{r{c{l(tostring(opennesses.DEBUG_TABLE_GRID_FOCUS).." = ")},c{entry_grid(opennesses.DEBUG_TABLE_GRID_FOCUS,t[opennesses.DEBUG_TABLE_GRID_FOCUS])}}}}})
      else
        for k,v in pairs(t) do
          if type(k) ~= "number" then
            table.insert(rows, r{c{horizontal_alignment="left", g{r{c{l(tostring(k).." = ")},c{entry_grid(k,v)}}}}})
          end
        end
        do
          local id = make_id()
          table.insert(rows, r{c{horizontal_alignment="left", g{r{
            c{horizontal_alignment="left",{"text_box",{ id="new_attr_name_box"..id }}},
            c{l(" = ")},
            c{horizontal_alignment="left", {"text_box",{ id="new_attr_value_box"..id }}},
          }}}})
          d.postshow(function()
            local k = wesnoth.get_dialog_value("new_attr_name_box"..id)
            if k ~= "" then t[k]=wesnoth.get_dialog_value("new_attr_value_box"..id) end
          end)
        end
        for i,v in ipairs(t) do
          table.insert(rows, r{c{horizontal_alignment="left", entry_grid(i,v)}})
        end
      end
      return g(rows)
    end
    d.show(table_grid(input, open_tables))
  end
  
  return retval
end

>>)}
